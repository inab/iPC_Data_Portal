{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toQuery = toQuery;\nexports[\"default\"] = columnsToGraphql;\n\nfunction toQuery(column) {\n  return column.query || (column.accessor || '').split('.').reverse().reduce(function (acc, segment, i, arr) {\n    if (i === 0) {\n      return segment;\n    } else {\n      return \"\".concat(segment.indexOf('edges[') === 0 ? 'edges' : segment, \" {\\n                \").concat(acc, \"\\n              }\");\n    }\n  }, '');\n}\n\nfunction columnsToGraphql(_ref) {\n  var _ref$config = _ref.config,\n      config = _ref$config === void 0 ? {} : _ref$config,\n      sqon = _ref.sqon,\n      queryName = _ref.queryName,\n      sort = _ref.sort,\n      offset = _ref.offset,\n      first = _ref.first;\n  var fields = config.columns.filter(function (column) {\n    return !(column.accessor && column.accessor === config.keyField) && (column.fetch || column.show);\n  }).concat(config.keyField ? {\n    accessor: config.keyField\n  } : []).map(toQuery).join('\\n');\n  return {\n    fields: fields,\n    query: \"\\n        query($sort: [Sort], $first: Int, $offset: Int, $score: String, $sqon: JSON) {\\n          \".concat(config.type, \" {\\n            hits(first: $first, offset: $offset, sort: $sort, score: $score, filters: $sqon) {\\n              total\\n              edges {\\n                node {\\n                  \").concat(fields, \"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      \"),\n    variables: {\n      sqon: sqon || null,\n      sort: sort && sort.map(function (s) {\n        if (s.field.indexOf('hits.total') >= 0) {\n          return Object.assign({}, s, {\n            field: '_score'\n          });\n        } else {\n          var nested = s.field.match(/(.*)\\.hits\\.edges\\[\\d+\\]\\.node(.*)/);\n          return Object.assign({}, s, nested ? {\n            field: \"\".concat(nested[1]).concat(nested[2])\n          } : {});\n        }\n      }),\n      score: sort && sort.filter(function (s) {\n        return s.field.indexOf('hits.total') >= 0;\n      }).map(function (s) {\n        var match = s.field.match(/((.*)s)\\.hits\\.total/);\n        return \"\".concat(match[1], \".\").concat(match[2], \"_id\");\n      }).join(',') || null,\n      offset: offset,\n      first: first\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}