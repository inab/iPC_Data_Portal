{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/acanosa/React_arranger_template/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _graphqlFields = _interopRequireDefault(require(\"graphql-fields\"));\n\nvar _middleware = require(\"@arranger/middleware\");\n\nvar _hackyTemporaryEsSetResolution = require(\"./hackyTemporaryEsSetResolution\");\n\nvar _esSearch = _interopRequireDefault(require(\"./utils/esSearch\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar toGraphqlField = function toGraphqlField(acc, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      a = _ref2[0],\n      b = _ref2[1];\n\n  return _objectSpread({}, acc, _defineProperty({}, a.replace(/\\./g, '__'), b));\n};\n\nvar _default = function _default(type) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(obj, _ref3, _ref4, info) {\n        var _ref3$offset, offset, filters, aggregations_filter_themselves, _ref3$include_missing, include_missing, es, nestedFields, resolvedFilter, query, graphqlFields, aggs, body, response, aggregations;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref3$offset = _ref3.offset, offset = _ref3$offset === void 0 ? 0 : _ref3$offset, filters = _ref3.filters, aggregations_filter_themselves = _ref3.aggregations_filter_themselves, _ref3$include_missing = _ref3.include_missing, include_missing = _ref3$include_missing === void 0 ? true : _ref3$include_missing;\n                es = _ref4.es;\n                nestedFields = type.nested_fields; // due to this problem in Elasticsearch 6.2 https://github.com/elastic/elasticsearch/issues/27782,\n                // we have to resolve set ids into actual ids. As this is an aggregations specific issue,\n                // we are placing this here until the issue is resolved by Elasticsearch in version 6.3\n\n                _context.next = 5;\n                return (0, _hackyTemporaryEsSetResolution.resolveSetsInSqon)({\n                  sqon: filters,\n                  es: es\n                });\n\n              case 5:\n                resolvedFilter = _context.sent;\n                query = (0, _middleware.buildQuery)({\n                  nestedFields: nestedFields,\n                  filters: resolvedFilter\n                });\n                /**\n                 * TODO: getFields does not support aliased fields, so we are unable to\n                 * serve multiple aggregations of the same type for a given field.\n                 * Library issue: https://github.com/robrichard/graphql-fields/issues/18\n                 */\n\n                graphqlFields = (0, _graphqlFields[\"default\"])(info, {}, {\n                  processArguments: true\n                });\n                aggs = (0, _middleware.buildAggregations)({\n                  query: query,\n                  sqon: resolvedFilter,\n                  graphqlFields: graphqlFields,\n                  nestedFields: nestedFields,\n                  aggregationsFilterThemselves: aggregations_filter_themselves\n                });\n                body = Object.keys(query || {}).length ? {\n                  query: query,\n                  aggs: aggs\n                } : {\n                  aggs: aggs\n                };\n                _context.next = 12;\n                return (0, _esSearch[\"default\"])(es)({\n                  index: type.index,\n                  size: 0,\n                  _source: false,\n                  body: body\n                });\n\n              case 12:\n                response = _context.sent;\n                aggregations = (0, _middleware.flattenAggregations)({\n                  aggregations: response.aggregations,\n                  includeMissing: include_missing\n                });\n                return _context.abrupt(\"return\", Object.entries(aggregations).reduce(toGraphqlField, {}));\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3, _x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}