{"ast":null,"code":"'use strict';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar options = {};\n\nfunction getSelections(ast) {\n  if (ast && ast.selectionSet && ast.selectionSet.selections && ast.selectionSet.selections.length) {\n    return ast.selectionSet.selections;\n  }\n\n  return [];\n}\n\nfunction isFragment(ast) {\n  return ast.kind === 'InlineFragment' || ast.kind === 'FragmentSpread';\n}\n\nfunction getAST(ast, info) {\n  if (ast.kind === 'FragmentSpread') {\n    var fragmentName = ast.name.value;\n    return info.fragments[fragmentName];\n  }\n\n  return ast;\n}\n\nfunction getArguments(ast) {\n  return ast.arguments.map(function (argument) {\n    return _defineProperty({}, argument.name.value, {\n      kind: argument.value.kind,\n      value: argument.value.value\n    });\n  });\n}\n\nfunction flattenAST(ast, info, obj) {\n  obj = obj || {};\n  return getSelections(ast).reduce(function (flattened, a) {\n    if (isFragment(a)) {\n      flattened = flattenAST(getAST(a, info), info, flattened);\n    } else {\n      var name = a.name.value;\n\n      if (options.excludedFields.indexOf(name) !== -1) {\n        return flattened;\n      }\n\n      if (flattened[name] && flattened[name] !== '__arguments') {\n        _extends(flattened[name], flattenAST(a, info, flattened[name]));\n      } else {\n        flattened[name] = flattenAST(a, info);\n      }\n\n      if (options.processArguments) {\n        // check if the current field has arguments\n        if (a.arguments && a.arguments.length) {\n          _extends(flattened[name], {\n            __arguments: getArguments(a)\n          });\n        }\n      }\n    }\n\n    return flattened;\n  }, obj);\n}\n\nmodule.exports = function graphqlFields(info) {\n  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    processArguments: false\n  };\n  var fields = info.fieldNodes || info.fieldASTs;\n  options.processArguments = opts.processArguments;\n  options.excludedFields = opts.excludedFields || [];\n  return fields.reduce(function (o, ast) {\n    return flattenAST(ast, info, o);\n  }, obj) || {};\n};","map":null,"metadata":{},"sourceType":"script"}