{"ast":null,"code":"var _jsxFileName = \"/home/acanosa/React_arranger_template/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as Keycloak from 'keycloak-js';\nlet initOptions = {\n  url: 'https://inb.bsc.es/auth/',\n  realm: 'IPC',\n  clientId: 'ipc-react-portal',\n  onLoad: 'login-required'\n};\nlet keycloak = Keycloak(initOptions);\nkeycloak.init({\n  onLoad: initOptions.onLoad\n}).success(auth => {\n  if (!auth) {\n    window.location.reload();\n  } else {\n    console.info(\"Authenticated\");\n  }\n\n  const app = React.createElement(BrowserRouter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }));\n  console.log(\"React\");\n  ReactDOM.render(app, document.getElementById('root'));\n  localStorage.setItem(\"react-token\", keycloak.token);\n  localStorage.setItem(\"react-refresh-token\", keycloak.refreshToken);\n  setTimeout(() => {\n    keycloak.updateToken(70).success(refreshed => {\n      if (refreshed) {\n        console.debug('Token refreshed' + refreshed);\n      } else {\n        console.warn('Token not refreshed, valid for ' + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');\n      }\n    }).error(() => {\n      console.error('Failed to refresh token');\n    });\n  }, 60000);\n}).error(() => {\n  console.error(\"Authenticated Failed\");\n});","map":{"version":3,"sources":["/home/acanosa/React_arranger_template/src/index.js"],"names":["React","ReactDOM","BrowserRouter","App","Keycloak","initOptions","url","realm","clientId","onLoad","keycloak","init","success","auth","window","location","reload","console","info","app","log","render","document","getElementById","localStorage","setItem","token","refreshToken","setTimeout","updateToken","refreshed","debug","warn","Math","round","tokenParsed","exp","timeSkew","Date","getTime","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B;AAEA,IAAIC,WAAW,GAAG;AACdC,EAAAA,GAAG,EAAE,0BADS;AACmBC,EAAAA,KAAK,EAAE,KAD1B;AACiCC,EAAAA,QAAQ,EAAE,kBAD3C;AAC+DC,EAAAA,MAAM,EAAE;AADvE,CAAlB;AAIA,IAAIC,QAAQ,GAAGN,QAAQ,CAACC,WAAD,CAAvB;AAEAK,QAAQ,CAACC,IAAT,CAAc;AAAEF,EAAAA,MAAM,EAAEJ,WAAW,CAACI;AAAtB,CAAd,EAA8CG,OAA9C,CAAuDC,IAAD,IAAU;AAE5D,MAAI,CAACA,IAAL,EAAW;AACPC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,GAFD,MAEO;AACHC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAb;AACH;;AAED,QAAMC,GAAG,GACL,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAMAF,EAAAA,OAAO,CAACG,GAAR,CAAY,OAAZ;AAEAnB,EAAAA,QAAQ,CAACoB,MAAT,CAAgBF,GAAhB,EAAqBG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAArB;AAEAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCf,QAAQ,CAACgB,KAA7C;AACAF,EAAAA,YAAY,CAACC,OAAb,CAAqB,qBAArB,EAA4Cf,QAAQ,CAACiB,YAArD;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACblB,IAAAA,QAAQ,CAACmB,WAAT,CAAqB,EAArB,EAAyBjB,OAAzB,CAAkCkB,SAAD,IAAe;AAC5C,UAAIA,SAAJ,EAAe;AACXb,QAAAA,OAAO,CAACc,KAAR,CAAc,oBAAoBD,SAAlC;AACH,OAFD,MAEO;AACHb,QAAAA,OAAO,CAACe,IAAR,CAAa,oCACPC,IAAI,CAACC,KAAL,CAAWxB,QAAQ,CAACyB,WAAT,CAAqBC,GAArB,GAA2B1B,QAAQ,CAAC2B,QAApC,GAA+C,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAjF,CADO,GACkF,UAD/F;AAEH;AACJ,KAPD,EAOGC,KAPH,CAOS,MAAM;AACXvB,MAAAA,OAAO,CAACuB,KAAR,CAAc,yBAAd;AACH,KATD;AAUH,GAXS,EAWP,KAXO,CAAV;AAaH,CAlCD,EAkCGA,KAlCH,CAkCS,MAAM;AACXvB,EAAAA,OAAO,CAACuB,KAAR,CAAc,sBAAd;AACH,CApCD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as Keycloak from 'keycloak-js';\n\nlet initOptions = {\n    url: 'https://inb.bsc.es/auth/', realm: 'IPC', clientId: 'ipc-react-portal', onLoad: 'login-required'\n}\n\nlet keycloak = Keycloak(initOptions);\n\nkeycloak.init({ onLoad: initOptions.onLoad }).success((auth) => {\n\n    if (!auth) {\n        window.location.reload();\n    } else {\n        console.info(\"Authenticated\");\n    }\n\n    const app = (\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    );\n\n    console.log(\"React\");\n\n    ReactDOM.render(app, document.getElementById('root'));\n\n    localStorage.setItem(\"react-token\", keycloak.token);\n    localStorage.setItem(\"react-refresh-token\", keycloak.refreshToken);\n\n    setTimeout(() => {\n        keycloak.updateToken(70).success((refreshed) => {\n            if (refreshed) {\n                console.debug('Token refreshed' + refreshed);\n            } else {\n                console.warn('Token not refreshed, valid for '\n                    + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');\n            }\n        }).error(() => {\n            console.error('Failed to refresh token');\n        });\n    }, 60000)\n\n}).error(() => {\n    console.error(\"Authenticated Failed\");\n});\n"]},"metadata":{},"sourceType":"module"}