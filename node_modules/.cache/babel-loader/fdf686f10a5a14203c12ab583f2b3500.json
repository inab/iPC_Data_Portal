{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/user/iPC_Data_Portal/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.hitsToEdges = void 0;\n\nvar _graphqlFields = _interopRequireDefault(require(\"graphql-fields\"));\n\nvar _middleware = require(\"@arranger/middleware\");\n\nvar _lodash = require(\"lodash\");\n\nvar _esSearch = _interopRequireDefault(require(\"./utils/esSearch\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar findCopyToSourceFields = function findCopyToSourceFields(mapping) {\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var results = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.entries(mapping).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n\n    if (v.type === 'nested') {\n      findCopyToSourceFields(v.properties, k, results);\n    } else if (Object.keys(v).includes('copy_to')) {\n      var fullPath = path ? \"\".concat(path, \".\").concat(k) : k;\n      var copy_to = v.copy_to[0];\n      results[copy_to] = [].concat(_toConsumableArray(results[copy_to] || []), [fullPath]);\n    }\n  });\n  return results;\n};\n\nvar hitsToEdges = function hitsToEdges(_ref3) {\n  var _process, _process$env;\n\n  var hits = _ref3.hits,\n      nestedFields = _ref3.nestedFields,\n      Parallel = _ref3.Parallel,\n      _ref3$copyToSourceFie = _ref3.copyToSourceFields,\n      copyToSourceFields = _ref3$copyToSourceFie === void 0 ? {} : _ref3$copyToSourceFie,\n      _ref3$systemCores = _ref3.systemCores,\n      systemCores = _ref3$systemCores === void 0 ? ((_process = process) === null || _process === void 0 ? void 0 : (_process$env = _process.env) === null || _process$env === void 0 ? void 0 : _process$env.SYSTEM_CORES) || 2 : _ref3$systemCores;\n  /*\n    If there's a large request, we'll trigger ludicrous mode and do some parallel\n    map-reduce based on # of cores available. Otherwise, only one child-process\n    is spawn for compute\n  */\n\n  var dataSize = hits.hits.length;\n  var chunks = (0, _lodash.chunk)(hits.hits, dataSize > 1000 ? dataSize / systemCores + dataSize % systemCores : dataSize);\n  return Promise.all(chunks.map(function (chunk) {\n    return (//Parallel.spawn output has a .then but it's not returning an actual promise\n      new Promise(function (resolve) {\n        new Parallel({\n          hits: chunk,\n          nestedFields: nestedFields,\n          copyToSourceFields: copyToSourceFields\n        }).spawn(function (_ref4) {\n          var hits = _ref4.hits,\n              nestedFields = _ref4.nestedFields,\n              copyToSourceFields = _ref4.copyToSourceFields;\n          /*\n            everthing inside spawn is executed in a separate thread, so we have\n            to use good old ES5 and require for run-time dependecy bundling.\n          */\n\n          var _require = require('lodash'),\n              isObject = _require.isObject,\n              flattenDeep = _require.flattenDeep;\n\n          var jp = require('jsonpath/jsonpath.min');\n\n          var resolveCopiedTo = function resolveCopiedTo(_ref5) {\n            var node = _ref5.node;\n            var foundValues = Object.entries(copyToSourceFields).reduce(function (acc, pair) {\n              var copyToField = pair[0];\n              var sourceField = pair[1];\n              var found = {};\n              found[copyToField] = flattenDeep(sourceField.map(function (path) {\n                return jp.query(node, path.split('.').reduce(function (acc, part, index) {\n                  return index === 0 ? \"$.\".concat(part) : \"\".concat(acc, \"..\").concat(part);\n                }, ''));\n              }));\n              return found;\n            }, {});\n            return foundValues;\n          };\n\n          return hits.map(function (x) {\n            var joinParent = function joinParent(parent, field) {\n              return parent ? \"\".concat(parent, \".\").concat(field) : field;\n            };\n\n            var resolveNested = function resolveNested(_ref6) {\n              var node = _ref6.node,\n                  nestedFields = _ref6.nestedFields,\n                  _ref6$parent = _ref6.parent,\n                  parent = _ref6$parent === void 0 ? '' : _ref6$parent;\n              if (!isObject(node) || !node) return node;\n              return Object.entries(node).reduce(function (acc, pair) {\n                var field = pair[0];\n                var hits = pair[1]; // TODO: inner hits query if necessary\n\n                var fullPath = joinParent(parent, field);\n                acc[field] = nestedFields.includes(fullPath) ? {\n                  hits: {\n                    edges: hits.map(function (node) {\n                      return {\n                        node: Object.assign({}, node, resolveNested({\n                          node: node,\n                          nestedFields: nestedFields,\n                          parent: fullPath\n                        }))\n                      };\n                    }),\n                    total: hits.length\n                  }\n                } : isObject(hits) && hits ? Object.assign(hits.constructor(), resolveNested({\n                  node: hits,\n                  nestedFields: nestedFields,\n                  parent: fullPath\n                })) : resolveNested({\n                  node: hits,\n                  nestedFields: nestedFields,\n                  parent: fullPath\n                });\n                return acc;\n              }, {});\n            };\n\n            var source = x._source;\n            var nested_nodes = resolveNested({\n              node: source,\n              nestedFields: nestedFields\n            });\n            var copied_to_nodes = resolveCopiedTo({\n              node: source\n            });\n            return {\n              searchAfter: x.sort ? x.sort.map(function (x) {\n                return Number.isInteger(x) && !Number.isSafeInteger(x) ? // TODO: figure out a way to inject ES_CONSTANTS in here from @arranger/middleware\n                // ? ES_CONSTANTS.ES_MAX_LONG //https://github.com/elastic/elasticsearch-js/issues/662\n                \"-9223372036854775808\" //https://github.com/elastic/elasticsearch-js/issues/662\n                : x;\n              }) : [],\n              node: Object.assign(source, // we're not afraid of mutating source here!\n              {\n                id: x._id\n              }, nested_nodes, copied_to_nodes)\n            };\n          });\n        }).then(resolve);\n      })\n    );\n  })).then(function (chunks) {\n    return chunks.reduce(function (acc, chunk) {\n      return acc.concat(chunk);\n    }, []);\n  });\n};\n\nexports.hitsToEdges = hitsToEdges;\n\nvar _default = function _default(_ref7) {\n  var type = _ref7.type,\n      Parallel = _ref7.Parallel;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref10 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(obj, _ref8, _ref9, info) {\n        var _ref8$first, first, _ref8$offset, offset, filters, score, sort, searchAfter, es, fields, nestedFields, query, body, copyToSourceFields, _ref13, hits;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref8$first = _ref8.first, first = _ref8$first === void 0 ? 10 : _ref8$first, _ref8$offset = _ref8.offset, offset = _ref8$offset === void 0 ? 0 : _ref8$offset, filters = _ref8.filters, score = _ref8.score, sort = _ref8.sort, searchAfter = _ref8.searchAfter;\n                es = _ref9.es;\n                fields = (0, _graphqlFields[\"default\"])(info);\n                nestedFields = type.nested_fields;\n                query = filters;\n\n                if (filters || score) {\n                  // TODO: something with score?\n                  query = (0, _middleware.buildQuery)({\n                    nestedFields: nestedFields,\n                    filters: filters\n                  });\n                }\n\n                body = query && {\n                  query: query\n                } || {};\n\n                if (sort && sort.length) {\n                  // TODO: add query here to sort based on result. https://www.elastic.co/guide/en/elasticsearch/guide/current/nested-sorting.html\n                  body.sort = sort.map(function (_ref11) {\n                    var field = _ref11.field,\n                        missing = _ref11.missing,\n                        order = _ref11.order,\n                        rest = _objectWithoutProperties(_ref11, [\"field\", \"missing\", \"order\"]);\n\n                    var nested_path = nestedFields.filter(function (nestedField) {\n                      return field.indexOf(nestedField) === 0;\n                    }).reduce(function (deepestPath, path) {\n                      return deepestPath.length > path.length ? deepestPath : path;\n                    }, '');\n                    return _defineProperty({}, field, _objectSpread({\n                      missing: missing ? missing === 'first' ? '_first' : '_last' : order === 'asc' ? '_first' : '_last',\n                      order: order\n                    }, rest, {}, (nested_path === null || nested_path === void 0 ? void 0 : nested_path.length) ? {\n                      nested: {\n                        path: nested_path\n                      }\n                    } : {}));\n                  });\n                }\n\n                if (searchAfter) {\n                  body.search_after = searchAfter;\n                }\n\n                copyToSourceFields = findCopyToSourceFields(type.mapping);\n                _context.next = 12;\n                return (0, _esSearch[\"default\"])(es)({\n                  index: type.index,\n                  size: first,\n                  from: offset,\n                  _source: [].concat(_toConsumableArray(fields.edges && Object.keys(fields.edges.node || {}) || []), _toConsumableArray(Object.values(copyToSourceFields))),\n                  track_scores: !!score,\n                  body: body\n                });\n\n              case 12:\n                _ref13 = _context.sent;\n                hits = _ref13.hits;\n                return _context.abrupt(\"return\", {\n                  edges: function edges() {\n                    return hitsToEdges({\n                      hits: hits,\n                      nestedFields: nestedFields,\n                      Parallel: Parallel,\n                      copyToSourceFields: copyToSourceFields\n                    });\n                  },\n                  total: function total() {\n                    return hits.total.value;\n                  }\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3, _x4) {\n        return _ref10.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}