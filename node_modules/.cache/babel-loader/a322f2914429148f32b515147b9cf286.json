{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.removeSQON = exports.makeSQON = exports.getSQONValue = exports.fieldInCurrentSQON = exports.inCurrentSQON = exports.currentFieldValue = exports.setSQONContent = exports.setSQON = exports.mergeQuery = exports.currentFilterValue = exports.replaceFilterSQON = exports.addInSQON = exports.replaceSQON = exports.toggleSQON = exports.addInValue = exports.combineValues = void 0;\n\nvar _uri = require(\"../utils/uri\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction compareTerms(a, b) {\n  return a.op.toLowerCase() === b.op.toLowerCase() && (a.content.field ? a.content.field === b.content.field : a.content.entity === b.content.entity);\n}\n\nvar sortSQON = function sortSQON(a, b) {\n  if (a.content.field && b.content.field) {\n    return a.content.field.localeCompare(b.content.field);\n  } else if (a.content.field || b.content.field) {\n    return a.content.field ? -1 : 1;\n  } else {\n    return 0;\n  }\n};\n\nvar combineValues = function combineValues(x, y) {\n  var xValue = [].concat(x.content.value || []);\n  var yValue = [].concat(y.content.value || []);\n  if (xValue.length === 0 && yValue.length === 0) return null;\n  if (xValue.length === 0) return y;\n  if (yValue.length === 0) return x;\n  var merged = {\n    op: x.op,\n    content: {\n      field: x.content.field,\n      value: xValue.reduce(function (acc, v) {\n        if (acc.includes(v)) return acc.filter(function (f) {\n          return f !== v;\n        });\n        return [].concat(_toConsumableArray(acc), [v]);\n      }, yValue).sort()\n    }\n  };\n  return merged.content.value.length ? merged : null;\n};\n\nexports.combineValues = combineValues;\n\nvar addInValue = function addInValue(x, y) {\n  var xValue = [].concat(x.content.value || []);\n  var yValue = [].concat(y.content.value || []);\n  if (xValue.length === 0 && yValue.length === 0) return null;\n  if (xValue.length === 0) return y;\n  if (yValue.length === 0) return x;\n  var merged = {\n    op: 'in',\n    content: {\n      field: x.content.field,\n      value: xValue.reduce(function (acc, v) {\n        if (acc.includes(v)) return acc;\n        return [].concat(_toConsumableArray(acc), [v]);\n      }, yValue).sort()\n    }\n  };\n  return merged.content.value.length ? merged : null;\n};\n\nexports.addInValue = addInValue;\n\nvar toggleSQON = function toggleSQON(q, ctxq) {\n  if (!ctxq && !q) return null;\n  if (!ctxq) return q;\n  if (!q) return ctxq;\n  var merged = {\n    op: 'and',\n    content: ctxq.content.reduce(function (acc, ctx) {\n      var found = acc.find(function (a) {\n        return compareTerms(a, ctx);\n      });\n      if (!found) return [].concat(_toConsumableArray(acc), [ctx]);\n      return [].concat(_toConsumableArray(acc.filter(function (y) {\n        return !compareTerms(y, found);\n      })), [combineValues(found, ctx)]).filter(Boolean);\n    }, q.content).sort(sortSQON)\n  };\n  return merged.content.length ? merged : null;\n};\n\nexports.toggleSQON = toggleSQON;\n\nvar replaceSQON = function replaceSQON(q, ctxq) {\n  if (!ctxq && !q) return null;\n  if (!ctxq) return q;\n  if (!q) return ctxq;\n  var merged = {\n    op: 'and',\n    content: ctxq.content.reduce(function (acc, ctx) {\n      var found = acc.find(function (a) {\n        return compareTerms(a, ctx);\n      });\n      if (!found) return [].concat(_toConsumableArray(acc), [ctx]);\n      return acc;\n    }, q.content).sort(sortSQON)\n  };\n  return merged.content.length ? merged : null;\n};\n\nexports.replaceSQON = replaceSQON;\n\nvar addInSQON = function addInSQON(q, ctxq) {\n  if (!ctxq && !q) return null;\n  if (!ctxq) return q;\n  if (!q) return ctxq;\n  var merged = {\n    op: 'and',\n    content: ctxq.content.reduce(function (acc, ctx) {\n      var found = acc.find(function (a) {\n        return compareTerms(a, ctx);\n      });\n      if (!found) return [].concat(_toConsumableArray(acc), [ctx]);\n      return [].concat(_toConsumableArray(acc.filter(function (y) {\n        return y.content.field !== found.content.field;\n      })), [addInValue(found, ctx)]).filter(Boolean);\n    }, q.content).sort(sortSQON)\n  };\n  return merged.content.length ? merged : null;\n};\n\nexports.addInSQON = addInSQON;\n\nvar replaceFilterSQON = function replaceFilterSQON(q, ctxq) {\n  var _q$content, _q$content$, _ctxq$content;\n\n  var _ref = (q === null || q === void 0 ? void 0 : (_q$content = q.content) === null || _q$content === void 0 ? void 0 : (_q$content$ = _q$content[0]) === null || _q$content$ === void 0 ? void 0 : _q$content$.content) || {},\n      entity = _ref.entity,\n      fields = _ref.fields,\n      value = _ref.value;\n\n  var merged = {\n    op: 'and',\n    content: [].concat(_toConsumableArray((ctxq === null || ctxq === void 0 ? void 0 : (_ctxq$content = ctxq.content) === null || _ctxq$content === void 0 ? void 0 : _ctxq$content.filter(function (x) {\n      return entity ? !(x.op === 'filter' && x.content.entity === entity) : x.op !== 'filter';\n    })) || []), _toConsumableArray(!(fields === null || fields === void 0 ? void 0 : fields.length) || !(value === null || value === void 0 ? void 0 : value.length) ? [] : q.content)).sort(sortSQON)\n  };\n  return merged.content.length ? merged : null;\n};\n\nexports.replaceFilterSQON = replaceFilterSQON;\n\nvar currentFilterValue = function currentFilterValue(sqon) {\n  var _sqon$content, _sqon$content$find, _sqon$content$find$co;\n\n  var entity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (sqon === null || sqon === void 0 ? void 0 : (_sqon$content = sqon.content) === null || _sqon$content === void 0 ? void 0 : (_sqon$content$find = _sqon$content.find(function (_ref2) {\n    var op = _ref2.op,\n        content = _ref2.content;\n    return op === 'filter' && (!entity || entity === content.entity);\n  })) === null || _sqon$content$find === void 0 ? void 0 : (_sqon$content$find$co = _sqon$content$find.content) === null || _sqon$content$find$co === void 0 ? void 0 : _sqon$content$find$co.value) || '';\n};\n\nexports.currentFilterValue = currentFilterValue;\n\nvar mergeFns = function mergeFns(v) {\n  switch (v) {\n    case 'toggle':\n      return toggleSQON;\n\n    case 'add':\n      return addInSQON;\n\n    default:\n      return replaceSQON;\n  }\n};\n\nvar filterByWhitelist = function filterByWhitelist(obj, wls) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return wls.includes(k) ? _objectSpread({}, acc, _defineProperty({}, k, obj[k])) : acc;\n  }, {});\n};\n\nvar mergeQuery = function mergeQuery(q, c, mergeType, whitelist) {\n  var ctx = c || {};\n  var query = q || {};\n  var wlCtx = whitelist ? filterByWhitelist(ctx, whitelist) : ctx;\n\n  var mQs = _objectSpread({}, wlCtx, {}, query);\n\n  return _objectSpread({}, mQs, {\n    sqon: mergeFns(mergeType)(query.sqon, (0, _uri.parseSQONParam)(wlCtx.sqon, null))\n  });\n};\n\nexports.mergeQuery = mergeQuery;\n\nvar setSQON = function setSQON(_ref3) {\n  var value = _ref3.value,\n      field = _ref3.field;\n  return {\n    op: 'and',\n    content: [{\n      op: 'in',\n      content: {\n        field: field,\n        value: [].concat(value || [])\n      }\n    }]\n  };\n};\n\nexports.setSQON = setSQON;\n\nvar setSQONContent = function setSQONContent(sqonContent) {\n  return sqonContent.length ? {\n    op: 'and',\n    content: sqonContent\n  } : null;\n}; // returns current value for a given field / operation\n\n\nexports.setSQONContent = setSQONContent;\n\nvar currentFieldValue = function currentFieldValue(_ref4) {\n  var _sqon$content2, _sqon$content2$find;\n\n  var sqon = _ref4.sqon,\n      dotField = _ref4.dotField,\n      op = _ref4.op;\n  return sqon === null || sqon === void 0 ? void 0 : (_sqon$content2 = sqon.content) === null || _sqon$content2 === void 0 ? void 0 : (_sqon$content2$find = _sqon$content2.find(function (content) {\n    var _content$content;\n\n    return ((_content$content = content.content) === null || _content$content === void 0 ? void 0 : _content$content.field) === dotField && content.op === op;\n  })) === null || _sqon$content2$find === void 0 ? void 0 : _sqon$content2$find.content.value;\n}; // true if field and value in\n\n\nexports.currentFieldValue = currentFieldValue;\n\nvar inCurrentSQON = function inCurrentSQON(_ref5) {\n  var currentSQON = _ref5.currentSQON,\n      value = _ref5.value,\n      dotField = _ref5.dotField;\n  var content = currentSQON === null || currentSQON === void 0 ? void 0 : currentSQON.content;\n  return (Array.isArray(content) ? content : [].concat(currentSQON || [])).some(function (f) {\n    var _f$content;\n\n    return ((_f$content = f.content) === null || _f$content === void 0 ? void 0 : _f$content.field) === dotField && [].concat(f.content.value || []).includes(value);\n  });\n}; // true if field in\n\n\nexports.inCurrentSQON = inCurrentSQON;\n\nvar fieldInCurrentSQON = function fieldInCurrentSQON(_ref6) {\n  var currentSQON = _ref6.currentSQON,\n      field = _ref6.field;\n  return currentSQON.some(function (f) {\n    return f.content.field === field;\n  });\n};\n\nexports.fieldInCurrentSQON = fieldInCurrentSQON;\n\nvar getSQONValue = function getSQONValue(_ref7) {\n  var currentSQON = _ref7.currentSQON,\n      dotField = _ref7.dotField;\n  return currentSQON.find(function (f) {\n    return f.content.field === dotField;\n  });\n};\n\nexports.getSQONValue = getSQONValue;\n\nvar makeSQON = function makeSQON(fields) {\n  if (!fields.length) return {};\n  return {\n    op: 'and',\n    content: fields.map(function (item) {\n      return {\n        op: 'in',\n        content: {\n          field: item.field,\n          value: [].concat(item.value || [])\n        }\n      };\n    })\n  };\n};\n\nexports.makeSQON = makeSQON;\n\nvar removeSQON = function removeSQON(field, sqon) {\n  if (!sqon) return null;\n  if (!field) return sqon;\n  if (Object.keys(sqon).length === 0) return sqon;\n\n  if (!Array.isArray(sqon.content)) {\n    var fieldFilter = typeof field === 'function' ? field : function (f) {\n      return f === field;\n    };\n    return fieldFilter(sqon.content.field) ? null : sqon;\n  }\n\n  var filteredContent = sqon.content.map(function (q) {\n    return removeSQON(field, q);\n  }).filter(Boolean);\n  return filteredContent.length ? _objectSpread({}, sqon, {\n    content: filteredContent\n  }) : null;\n};\n\nexports.removeSQON = removeSQON;\nvar _default = makeSQON;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}