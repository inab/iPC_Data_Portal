{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSingleValue = getSingleValue;\nexports.normalizeColumns = normalizeColumns;\nexports.withNormalizedColumns = void 0;\n\nvar _columnTypes = _interopRequireDefault(require(\"./columnTypes\"));\n\nvar _recompose = require(\"recompose\");\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction getSingleValue(data) {\n  if (_typeof(data) === 'object' && data) {\n    return getSingleValue(Object.values(data)[0]);\n  } else {\n    return data;\n  }\n}\n\nfunction normalizeColumns(_ref) {\n  var _ref$columns = _ref.columns,\n      columns = _ref$columns === void 0 ? [] : _ref$columns,\n      customTypes = _ref.customTypes,\n      _ref$customColumns = _ref.customColumns,\n      customColumns = _ref$customColumns === void 0 ? [] : _ref$customColumns,\n      _ref$customTypeConfig = _ref.customTypeConfigs,\n      customTypeConfigs = _ref$customTypeConfig === void 0 ? {} : _ref$customTypeConfig;\n\n  var types = _objectSpread({}, _columnTypes.default, {}, customTypes);\n\n  var mappedColumns = columns.map(function (column) {\n    var _customColumns$find;\n\n    var customCol = ((_customColumns$find = customColumns.find(function (cc) {\n      return cc.content.field === column.field;\n    })) === null || _customColumns$find === void 0 ? void 0 : _customColumns$find.content) || {};\n    return _objectSpread({}, column, {\n      show: typeof column.show === 'boolean' ? column.show : true,\n      Cell: column.Cell || types[column.type],\n      hasCustomType: (0, _lodash.isNil)(column.hasCustomType) ? !!(customTypes || {})[column.type] : column.hasCustomType\n    }, !column.accessor && !column.id ? {\n      id: column.field\n    } : {}, {}, customTypeConfigs[column.type] || {}, {}, customCol);\n  }).filter(function (x) {\n    return x.show || x.canChangeShow;\n  }); // filter out override columns\n\n  var filteredCustomCols = customColumns.filter(function (cc) {\n    return !mappedColumns.some(function (col) {\n      return col.field === cc.content.field;\n    });\n  });\n  return (0, _lodash.sortBy)(filteredCustomCols, 'index').reduce(function (arr, _ref2, i) {\n    var index = _ref2.index,\n        content = _ref2.content;\n    return [].concat(_toConsumableArray(arr.slice(0, index + i)), [content], _toConsumableArray(arr.slice(index + i)));\n  }, mappedColumns);\n}\n\nvar withNormalizedColumns = (0, _recompose.withProps)(function (_ref3) {\n  var _ref3$config = _ref3.config,\n      config = _ref3$config === void 0 ? {} : _ref3$config,\n      customTypes = _ref3.customTypes,\n      customColumns = _ref3.customColumns,\n      customTypeConfigs = _ref3.customTypeConfigs;\n  return {\n    config: _objectSpread({}, config, {\n      columns: normalizeColumns({\n        columns: config.columns,\n        customTypes: customTypes,\n        customColumns: customColumns,\n        customTypeConfigs: customTypeConfigs\n      })\n    })\n  };\n});\nexports.withNormalizedColumns = withNormalizedColumns;","map":null,"metadata":{},"sourceType":"script"}