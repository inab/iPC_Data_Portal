{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/user/iPC_Data_Portal/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.saveSet = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _v = _interopRequireDefault(require(\"uuid/v4\"));\n\nvar _middleware = require(\"@arranger/middleware\");\n\nvar _esSearch = _interopRequireDefault(require(\"./utils/esSearch\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nvar retrieveSetIds =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(_ref) {\n    var es, index, query, path, sort, _ref$BULK_SIZE, BULK_SIZE, search, handleResult;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            es = _ref.es, index = _ref.index, query = _ref.query, path = _ref.path, sort = _ref.sort, _ref$BULK_SIZE = _ref.BULK_SIZE, BULK_SIZE = _ref$BULK_SIZE === void 0 ? 1000 : _ref$BULK_SIZE;\n\n            search =\n            /*#__PURE__*/\n            function () {\n              var _ref3 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee() {\n                var _ref4,\n                    searchAfter,\n                    body,\n                    response,\n                    ids,\n                    nextSearchAfter,\n                    _args = arguments;\n\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _ref4 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, searchAfter = _ref4.searchAfter;\n                        body = _objectSpread({}, !(0, _lodash.isEmpty)(query) && {\n                          query: query\n                        }, {}, searchAfter && {\n                          search_after: searchAfter\n                        });\n                        _context.next = 4;\n                        return (0, _esSearch[\"default\"])(es)({\n                          index: index,\n                          sort: sort.map(function (_ref5) {\n                            var field = _ref5.field,\n                                order = _ref5.order;\n                            return \"\".concat(field, \":\").concat(order || 'asc');\n                          }),\n                          size: BULK_SIZE,\n                          body: body\n                        });\n\n                      case 4:\n                        response = _context.sent;\n                        ids = response.hits.hits.map(function (x) {\n                          return (0, _lodash.get)(x, \"_source.\".concat(path.split('__').join('.')), x._id || '');\n                        });\n                        nextSearchAfter = sort.map(function (_ref6) {\n                          var field = _ref6.field;\n                          return response.hits.hits.map(function (x) {\n                            return x._source[field] || x[field];\n                          });\n                        }).reduce(function (acc, vals) {\n                          return [].concat(_toConsumableArray(acc), _toConsumableArray(vals.slice(-1)));\n                        }, []);\n                        return _context.abrupt(\"return\", {\n                          ids: ids,\n                          searchAfter: nextSearchAfter,\n                          total: response.hits.total.value\n                        });\n\n                      case 8:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function search() {\n                return _ref3.apply(this, arguments);\n              };\n            }();\n\n            handleResult =\n            /*#__PURE__*/\n            function () {\n              var _ref8 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee2(_ref7) {\n                var searchAfter, total, _ref7$ids, ids, _ref9, newIds, response;\n\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        searchAfter = _ref7.searchAfter, total = _ref7.total, _ref7$ids = _ref7.ids, ids = _ref7$ids === void 0 ? [] : _ref7$ids;\n\n                        if (!(ids.length === total)) {\n                          _context2.next = 3;\n                          break;\n                        }\n\n                        return _context2.abrupt(\"return\", (0, _lodash.uniq)(ids));\n\n                      case 3:\n                        _context2.next = 5;\n                        return search({\n                          searchAfter: searchAfter\n                        });\n\n                      case 5:\n                        _ref9 = _context2.sent;\n                        newIds = _ref9.ids;\n                        response = _objectWithoutProperties(_ref9, [\"ids\"]);\n                        return _context2.abrupt(\"return\", handleResult(_objectSpread({}, response, {\n                          ids: [].concat(_toConsumableArray(ids), _toConsumableArray(newIds))\n                        })));\n\n                      case 9:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function handleResult(_x2) {\n                return _ref8.apply(this, arguments);\n              };\n            }();\n\n            _context3.t0 = handleResult;\n            _context3.next = 6;\n            return search();\n\n          case 6:\n            _context3.t1 = _context3.sent;\n            return _context3.abrupt(\"return\", (0, _context3.t0)(_context3.t1));\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function retrieveSetIds(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar saveSet = function saveSet(_ref10) {\n  var types = _ref10.types;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref13 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(obj, _ref11, _ref12) {\n        var type, userId, sqon, path, sort, _ref11$refresh, refresh, es, projectId, _types$find$, nestedFields, index, query, ids, body;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                type = _ref11.type, userId = _ref11.userId, sqon = _ref11.sqon, path = _ref11.path, sort = _ref11.sort, _ref11$refresh = _ref11.refresh, refresh = _ref11$refresh === void 0 ? 'WAIT_FOR' : _ref11$refresh;\n                es = _ref12.es, projectId = _ref12.projectId;\n                _types$find$ = types.find(function (_ref14) {\n                  var _ref15 = _slicedToArray(_ref14, 2),\n                      x = _ref15[1];\n\n                  return x.name === type;\n                })[1], nestedFields = _types$find$.nested_fields, index = _types$find$.index;\n                query = (0, _middleware.buildQuery)({\n                  nestedFields: nestedFields,\n                  filters: sqon || {}\n                });\n                _context4.next = 6;\n                return retrieveSetIds({\n                  es: es,\n                  index: index,\n                  query: query,\n                  path: path,\n                  sort: sort && sort.length ? sort : [{\n                    field: '_id',\n                    order: 'asc'\n                  }]\n                });\n\n              case 6:\n                ids = _context4.sent;\n                body = {\n                  setId: (0, _v[\"default\"])(),\n                  createdAt: Date.now(),\n                  ids: ids,\n                  type: type,\n                  path: path,\n                  sqon: sqon,\n                  userId: userId,\n                  size: ids.length\n                };\n                _context4.next = 10;\n                return es.index({\n                  index: _middleware.CONSTANTS.ES_ARRANGER_SET_INDEX,\n                  id: body.setId,\n                  refresh: refresh.toLowerCase(),\n                  body: body\n                });\n\n              case 10:\n                return _context4.abrupt(\"return\", body);\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x3, _x4, _x5) {\n        return _ref13.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nexports.saveSet = saveSet;","map":null,"metadata":{},"sourceType":"script"}