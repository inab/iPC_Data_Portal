{"ast":null,"code":"var _jsxFileName = \"/home/acanosa/React_arranger_template/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.module.css';\nimport App from './App';\nimport * as Keycloak from 'keycloak-js';\nconst app = React.createElement(BrowserRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}));\nlet initOptions = {\n  url: 'https://inb.bsc.es/auth/realms/IPC/protocol/openid-connect/auth',\n  realm: 'IPC',\n  clientId: 'ipc-web-portal',\n  onLoad: 'login-required'\n};\nlet keycloak = Keycloak(initOptions);\nkeycloak.init({\n  onLoad: initOptions.onLoad\n}).success(auth => {\n  if (!auth) {\n    window.location.reload();\n  } else {\n    console.info(\"Authenticated\");\n  }\n\n  ReactDOM.render(app, document.getElementById('root'));\n  localStorage.setItem(\"react-token\", keycloak.token);\n  localStorage.setItem(\"react-refresh-token\", keycloak.refreshToken);\n  setTimeout(() => {\n    keycloak.updateToken(70).success(refreshed => {\n      if (refreshed) {\n        console.debug('Token refreshed' + refreshed);\n      } else {\n        console.warn('Token not refreshed, valid for ' + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');\n      }\n    }).error(() => {\n      console.error('Failed to refresh token');\n    });\n  }, 60000);\n}).error(() => {\n  console.error(\"Authenticated Failed\");\n});","map":{"version":3,"sources":["/home/acanosa/React_arranger_template/src/index.js"],"names":["React","ReactDOM","BrowserRouter","App","Keycloak","app","initOptions","url","realm","clientId","onLoad","keycloak","init","success","auth","window","location","reload","console","info","render","document","getElementById","localStorage","setItem","token","refreshToken","setTimeout","updateToken","refreshed","debug","warn","Math","round","tokenParsed","exp","timeSkew","Date","getTime","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAO,oBAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B;AAEA,MAAMC,GAAG,GACL,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ;AAMA,IAAIC,WAAW,GAAG;AACdC,EAAAA,GAAG,EAAE,iEADS;AAC0DC,EAAAA,KAAK,EAAE,KADjE;AACwEC,EAAAA,QAAQ,EAAE,gBADlF;AACoGC,EAAAA,MAAM,EAAE;AAD5G,CAAlB;AAIA,IAAIC,QAAQ,GAAGP,QAAQ,CAACE,WAAD,CAAvB;AAEAK,QAAQ,CAACC,IAAT,CAAc;AAAEF,EAAAA,MAAM,EAAEJ,WAAW,CAACI;AAAtB,CAAd,EAA8CG,OAA9C,CAAuDC,IAAD,IAAU;AAE5D,MAAI,CAACA,IAAL,EAAW;AACPC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,GAFD,MAEO;AACHC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAb;AACH;;AAEDlB,EAAAA,QAAQ,CAACmB,MAAT,CAAgBf,GAAhB,EAAqBgB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAArB;AAEAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCb,QAAQ,CAACc,KAA7C;AACAF,EAAAA,YAAY,CAACC,OAAb,CAAqB,qBAArB,EAA4Cb,QAAQ,CAACe,YAArD;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACbhB,IAAAA,QAAQ,CAACiB,WAAT,CAAqB,EAArB,EAAyBf,OAAzB,CAAkCgB,SAAD,IAAe;AAC5C,UAAIA,SAAJ,EAAe;AACXX,QAAAA,OAAO,CAACY,KAAR,CAAc,oBAAoBD,SAAlC;AACH,OAFD,MAEO;AACHX,QAAAA,OAAO,CAACa,IAAR,CAAa,oCACPC,IAAI,CAACC,KAAL,CAAWtB,QAAQ,CAACuB,WAAT,CAAqBC,GAArB,GAA2BxB,QAAQ,CAACyB,QAApC,GAA+C,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAjF,CADO,GACkF,UAD/F;AAEH;AACJ,KAPD,EAOGC,KAPH,CAOS,MAAM;AACXrB,MAAAA,OAAO,CAACqB,KAAR,CAAc,yBAAd;AACH,KATD;AAYH,GAbS,EAaP,KAbO,CAAV;AAeH,CA5BD,EA4BGA,KA5BH,CA4BS,MAAM;AACXrB,EAAAA,OAAO,CAACqB,KAAR,CAAc,sBAAd;AACH,CA9BD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.module.css';\nimport App from './App';\nimport * as Keycloak from 'keycloak-js';\n\nconst app = (\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n);\n\nlet initOptions = {\n    url: 'https://inb.bsc.es/auth/realms/IPC/protocol/openid-connect/auth', realm: 'IPC', clientId: 'ipc-web-portal', onLoad: 'login-required'\n}\n\nlet keycloak = Keycloak(initOptions);\n\nkeycloak.init({ onLoad: initOptions.onLoad }).success((auth) => {\n\n    if (!auth) {\n        window.location.reload();\n    } else {\n        console.info(\"Authenticated\");\n    }\n\n    ReactDOM.render(app, document.getElementById('root'));\n\n    localStorage.setItem(\"react-token\", keycloak.token);\n    localStorage.setItem(\"react-refresh-token\", keycloak.refreshToken);\n\n    setTimeout(() => {\n        keycloak.updateToken(70).success((refreshed) => {\n            if (refreshed) {\n                console.debug('Token refreshed' + refreshed);\n            } else {\n                console.warn('Token not refreshed, valid for '\n                    + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');\n            }\n        }).error(() => {\n            console.error('Failed to refresh token');\n        });\n\n\n    }, 60000)\n\n}).error(() => {\n    console.error(\"Authenticated Failed\");\n});\n"]},"metadata":{},"sourceType":"module"}