{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _buildQuery = require(\"../buildQuery\");\n\nvar _normalizeFilters = _interopRequireDefault(require(\"../buildQuery/normalizeFilters\"));\n\nvar _constants = require(\"../constants\");\n\nvar _lodash = require(\"lodash\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/*\n * due to this problem: https://github.com/kids-first/kf-portal-ui/issues/488\n * queries that are on a term that shares a parent with a aggregation field\n * needs to be dropped down to the aggregation level as a filter.\n */\n\n\nvar injectNestedFiltersToAggs = function injectNestedFiltersToAggs(_ref) {\n  var aggs = _ref.aggs,\n      nestedSqonFilters = _ref.nestedSqonFilters,\n      aggregationsFilterThemselves = _ref.aggregationsFilterThemselves;\n  return Object.entries(aggs).reduce(function (acc, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        aggName = _ref3[0],\n        aggContent = _ref3[1];\n\n    var skipToNextLevel = function skipToNextLevel() {\n      acc[aggName] = _objectSpread({}, aggContent, {\n        aggs: injectNestedFiltersToAggs({\n          aggs: aggContent.aggs,\n          nestedSqonFilters: nestedSqonFilters,\n          aggregationsFilterThemselves: aggregationsFilterThemselves\n        })\n      });\n      return acc;\n    };\n\n    var wrapInFilterAgg = function wrapInFilterAgg() {\n      acc[aggName] = _objectSpread({}, aggContent, {\n        aggs: _defineProperty({}, \"\".concat(aggContent.nested.path, \":\").concat(_constants.AGGS_WRAPPER_FILTERED), {\n          filter: {\n            bool: {\n              should: nestedSqonFilters[aggContent.nested.path].filter(function (sqonFilter) {\n                return aggregationsFilterThemselves || aggName.split(':')[0] !== sqonFilter.content.field;\n              }).map(function (sqonFilter) {\n                return (0, _buildQuery.opSwitch)({\n                  nestedFields: [],\n                  filter: (0, _normalizeFilters[\"default\"])(sqonFilter)\n                });\n              })\n            }\n          },\n          aggs: injectNestedFiltersToAggs({\n            aggs: aggContent.aggs,\n            nestedSqonFilters: nestedSqonFilters,\n            aggregationsFilterThemselves: aggregationsFilterThemselves\n          })\n        })\n      });\n      return acc;\n    };\n\n    if (aggContent.global || aggContent.filter) {\n      return skipToNextLevel();\n    } else if (aggContent.nested) {\n      if (nestedSqonFilters[aggContent.nested.path]) {\n        return wrapInFilterAgg();\n      } else {\n        return skipToNextLevel();\n      }\n    } else {\n      return acc;\n    }\n  }, (0, _lodash.cloneDeep)(aggs));\n};\n\nvar _default = injectNestedFiltersToAggs;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}