{"ast":null,"code":"var convert,\n    keys = require('lodash.keys'),\n    each = require('lodash.foreach'),\n    measures = {\n  length: require('./definitions/length'),\n  area: require('./definitions/area'),\n  mass: require('./definitions/mass'),\n  volume: require('./definitions/volume'),\n  each: require('./definitions/each'),\n  temperature: require('./definitions/temperature'),\n  time: require('./definitions/time'),\n  digital: require('./definitions/digital'),\n  partsPer: require('./definitions/partsPer'),\n  speed: require('./definitions/speed'),\n  pace: require('./definitions/pace'),\n  pressure: require('./definitions/pressure'),\n  current: require('./definitions/current'),\n  voltage: require('./definitions/voltage'),\n  power: require('./definitions/power'),\n  reactivePower: require('./definitions/reactivePower'),\n  apparentPower: require('./definitions/apparentPower'),\n  energy: require('./definitions/energy'),\n  reactiveEnergy: require('./definitions/reactiveEnergy'),\n  volumeFlowRate: require('./definitions/volumeFlowRate'),\n  illuminance: require('./definitions/illuminance'),\n  frequency: require('./definitions/frequency'),\n  angle: require('./definitions/angle')\n},\n    Converter;\n\nConverter = function Converter(numerator, denominator) {\n  if (denominator) this.val = numerator / denominator;else this.val = numerator;\n};\n/**\n* Lets the converter know the source unit abbreviation\n*/\n\n\nConverter.prototype.from = function (from) {\n  if (this.destination) throw new Error('.from must be called before .to');\n  this.origin = this.getUnit(from);\n\n  if (!this.origin) {\n    this.throwUnsupportedUnitError(from);\n  }\n\n  return this;\n};\n/**\n* Converts the unit and returns the value\n*/\n\n\nConverter.prototype.to = function (to) {\n  if (!this.origin) throw new Error('.to must be called after .from');\n  this.destination = this.getUnit(to);\n  var result, transform;\n\n  if (!this.destination) {\n    this.throwUnsupportedUnitError(to);\n  } // Don't change the value if origin and destination are the same\n\n\n  if (this.origin.abbr === this.destination.abbr) {\n    return this.val;\n  } // You can't go from liquid to mass, for example\n\n\n  if (this.destination.measure != this.origin.measure) {\n    throw new Error('Cannot convert incompatible measures of ' + this.destination.measure + ' and ' + this.origin.measure);\n  }\n  /**\n  * Convert from the source value to its anchor inside the system\n  */\n\n\n  result = this.val * this.origin.unit.to_anchor;\n  /**\n  * For some changes it's a simple shift (C to K)\n  * So we'll add it when convering into the unit (later)\n  * and subtract it when converting from the unit\n  */\n\n  if (this.origin.unit.anchor_shift) {\n    result -= this.origin.unit.anchor_shift;\n  }\n  /**\n  * Convert from one system to another through the anchor ratio. Some conversions\n  * aren't ratio based or require more than a simple shift. We can provide a custom\n  * transform here to provide the direct result\n  */\n\n\n  if (this.origin.system != this.destination.system) {\n    transform = measures[this.origin.measure]._anchors[this.origin.system].transform;\n\n    if (typeof transform === 'function') {\n      result = transform(result);\n    } else {\n      result *= measures[this.origin.measure]._anchors[this.origin.system].ratio;\n    }\n  }\n  /**\n  * This shift has to be done after the system conversion business\n  */\n\n\n  if (this.destination.unit.anchor_shift) {\n    result += this.destination.unit.anchor_shift;\n  }\n  /**\n  * Convert to another unit inside the destination system\n  */\n\n\n  return result / this.destination.unit.to_anchor;\n};\n/**\n* Converts the unit to the best available unit.\n*/\n\n\nConverter.prototype.toBest = function (options) {\n  if (!this.origin) throw new Error('.toBest must be called after .from');\n  var options = Object.assign({\n    exclude: [],\n    cutOffNumber: 1\n  }, options);\n  var best;\n  /**\n    Looks through every possibility for the 'best' available unit.\n    i.e. Where the value has the fewest numbers before the decimal point,\n    but is still higher than 1.\n  */\n\n  each(this.possibilities(), function (possibility) {\n    var unit = this.describe(possibility);\n    var isIncluded = options.exclude.indexOf(possibility) === -1;\n\n    if (isIncluded && unit.system === this.origin.system) {\n      var result = this.to(possibility);\n\n      if (!best || result >= options.cutOffNumber && result < best.val) {\n        best = {\n          val: result,\n          unit: possibility,\n          singular: unit.singular,\n          plural: unit.plural\n        };\n      }\n    }\n  }.bind(this));\n  return best;\n};\n/**\n* Finds the unit\n*/\n\n\nConverter.prototype.getUnit = function (abbr) {\n  var found;\n  each(measures, function (systems, measure) {\n    each(systems, function (units, system) {\n      if (system == '_anchors') return false;\n      each(units, function (unit, testAbbr) {\n        if (testAbbr == abbr) {\n          found = {\n            abbr: abbr,\n            measure: measure,\n            system: system,\n            unit: unit\n          };\n          return false;\n        }\n      });\n      if (found) return false;\n    });\n    if (found) return false;\n  });\n  return found;\n};\n\nvar describe = function describe(resp) {\n  return {\n    abbr: resp.abbr,\n    measure: resp.measure,\n    system: resp.system,\n    singular: resp.unit.name.singular,\n    plural: resp.unit.name.plural\n  };\n};\n/**\n* An alias for getUnit\n*/\n\n\nConverter.prototype.describe = function (abbr) {\n  var resp = Converter.prototype.getUnit(abbr);\n  var desc = null;\n\n  try {\n    desc = describe(resp);\n  } catch (err) {\n    this.throwUnsupportedUnitError(abbr);\n  }\n\n  return desc;\n};\n/**\n* Detailed list of all supported units\n*/\n\n\nConverter.prototype.list = function (measure) {\n  var list = [];\n  each(measures, function (systems, testMeasure) {\n    if (measure && measure !== testMeasure) return;\n    each(systems, function (units, system) {\n      if (system == '_anchors') return false;\n      each(units, function (unit, abbr) {\n        list = list.concat(describe({\n          abbr: abbr,\n          measure: testMeasure,\n          system: system,\n          unit: unit\n        }));\n      });\n    });\n  });\n  return list;\n};\n\nConverter.prototype.throwUnsupportedUnitError = function (what) {\n  var validUnits = [];\n  each(measures, function (systems, measure) {\n    each(systems, function (units, system) {\n      if (system == '_anchors') return false;\n      validUnits = validUnits.concat(keys(units));\n    });\n  });\n  throw new Error('Unsupported unit ' + what + ', use one of: ' + validUnits.join(', '));\n};\n/**\n* Returns the abbreviated measures that the value can be\n* converted to.\n*/\n\n\nConverter.prototype.possibilities = function (measure) {\n  var possibilities = [];\n\n  if (!this.origin && !measure) {\n    each(keys(measures), function (measure) {\n      each(measures[measure], function (units, system) {\n        if (system == '_anchors') return false;\n        possibilities = possibilities.concat(keys(units));\n      });\n    });\n  } else {\n    measure = measure || this.origin.measure;\n    each(measures[measure], function (units, system) {\n      if (system == '_anchors') return false;\n      possibilities = possibilities.concat(keys(units));\n    });\n  }\n\n  return possibilities;\n};\n/**\n* Returns the abbreviated measures that the value can be\n* converted to.\n*/\n\n\nConverter.prototype.measures = function () {\n  return keys(measures);\n};\n\nconvert = function convert(value) {\n  return new Converter(value);\n};\n\nmodule.exports = convert;","map":null,"metadata":{},"sourceType":"script"}