{"ast":null,"code":"/**\n * Lo-Dash 2.3.0 (Custom Build) <http://lodash.com/>\n * Build: `lodash modularize modern exports=\"npm\" -o ./npm/`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\nvar bind = require('lodash.bind'),\n    identity = require('lodash.identity'),\n    setBindData = require('lodash._setbinddata'),\n    support = require('lodash.support');\n/** Used to detected named functions */\n\n\nvar reFuncName = /^\\s*function[ \\n\\r\\t]+\\w/;\n/** Used to detect functions containing a `this` reference */\n\nvar reThis = /\\bthis\\b/;\n/** Native method shortcuts */\n\nvar fnToString = Function.prototype.toString;\n/**\n * The base implementation of `_.createCallback` without support for creating\n * \"_.pluck\" or \"_.where\" style callbacks.\n *\n * @private\n * @param {*} [func=identity] The value to convert to a callback.\n * @param {*} [thisArg] The `this` binding of the created callback.\n * @param {number} [argCount] The number of arguments the callback accepts.\n * @returns {Function} Returns a callback function.\n */\n\nfunction baseCreateCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  } // exit early for no `thisArg` or already bound by `Function#bind`\n\n\n  if (typeof thisArg == 'undefined' || !('prototype' in func)) {\n    return func;\n  }\n\n  var bindData = func.__bindData__;\n\n  if (typeof bindData == 'undefined') {\n    if (support.funcNames) {\n      bindData = !func.name;\n    }\n\n    bindData = bindData || !support.funcDecomp;\n\n    if (!bindData) {\n      var source = fnToString.call(func);\n\n      if (!support.funcNames) {\n        bindData = !reFuncName.test(source);\n      }\n\n      if (!bindData) {\n        // checks if `func` references the `this` keyword and stores the result\n        bindData = reThis.test(source);\n        setBindData(func, bindData);\n      }\n    }\n  } // exit early if there are no `this` references or `func` is bound\n\n\n  if (bindData === false || bindData !== true && bindData[1] & 1) {\n    return func;\n  }\n\n  switch (argCount) {\n    case 1:\n      return function (value) {\n        return func.call(thisArg, value);\n      };\n\n    case 2:\n      return function (a, b) {\n        return func.call(thisArg, a, b);\n      };\n\n    case 3:\n      return function (value, index, collection) {\n        return func.call(thisArg, value, index, collection);\n      };\n\n    case 4:\n      return function (accumulator, value, index, collection) {\n        return func.call(thisArg, accumulator, value, index, collection);\n      };\n  }\n\n  return bind(func, thisArg);\n}\n\nmodule.exports = baseCreateCallback;","map":null,"metadata":{},"sourceType":"script"}