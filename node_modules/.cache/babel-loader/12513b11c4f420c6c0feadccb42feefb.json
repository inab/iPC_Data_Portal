{"ast":null,"code":"var _jsxFileName = \"/home/ale/React_arranger_template/src/components/DropDown/DropDown.js\";\nimport React from 'react';\nimport Downshift from 'downshift';\nimport './DropDown.css';\n\nfunction ArrowIcon({\n  isOpen\n}) {\n  return React.createElement(\"svg\", {\n    viewBox: \"0 0 20 20\",\n    preserveAspectRatio: \"none\",\n    width: 16,\n    fill: \"transparent\",\n    stroke: \"#979797\",\n    strokeWidth: \"1.1px\",\n    transform: isOpen ? 'rotate(180)' : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: \"M1,6 L10,15 L19,6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }));\n}\n\nclass DropDown extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isOpen: false\n    };\n\n    this.handleToggleMenu = () => {\n      this.setState(({\n        isOpen\n      }) => ({\n        isOpen: !isOpen\n      }));\n    };\n\n    this.handleStateChange = changes => {\n      const isOpen = changes.isOpen,\n            type = changes.type;\n\n      if (type === Downshift.stateChangeTypes.mouseUp) {\n        this.setState({\n          isOpen\n        });\n      }\n    };\n  }\n\n  render() {\n    const isOpen = this.state.isOpen;\n    const _this$props = this.props,\n          items = _this$props.items,\n          onChange = _this$props.onChange,\n          itemToString = _this$props.itemToString,\n          children = _this$props.children,\n          _this$props$align = _this$props.align,\n          align = _this$props$align === void 0 ? 'right' : _this$props$align;\n    return React.createElement(Downshift, {\n      itemToString: itemToString,\n      onChange: onChange,\n      selectedItem: items.filter(item => item.show),\n      isOpen: isOpen,\n      onStateChange: this.handleStateChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, ({\n      getInputProps,\n      getButtonProps,\n      getItemProps,\n      isOpen,\n      toggleMenu,\n      clearSelection,\n      selectedItem,\n      inputValue,\n      highlightedIndex\n    }) => React.createElement(\"div\", {\n      className: \"dropDownHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"button\", Object.assign({\n      \"aria-label\": `Show columns to select`,\n      className: \"dropDownButton\"\n    }, getButtonProps({\n      onClick: this.handleToggleMenu\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"dropDownButtonContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, children), React.createElement(ArrowIcon, {\n      isOpen: isOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), !isOpen ? null : React.createElement(\"div\", {\n      className: \"dropDownContent\",\n      style: {\n        right: align === 'right' ? 0 : 'auto',\n        left: align === 'right' ? 'auto' : 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, items.map((item, index) => React.createElement(\"div\", Object.assign({\n      className: \"dropDownContentElement\",\n      key: item.id || itemToString(item)\n    }, getItemProps({\n      item,\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), itemToString(item), React.createElement(\"input\", {\n      readOnly: true,\n      type: \"checkbox\",\n      checked: selectedItem.indexOf(item) > -1,\n      \"aria-label\": `Select column ${item.id || itemToString(item)}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default DropDown;","map":{"version":3,"sources":["/home/ale/React_arranger_template/src/components/DropDown/DropDown.js"],"names":["React","Downshift","ArrowIcon","isOpen","DropDown","Component","state","handleToggleMenu","setState","handleStateChange","changes","type","stateChangeTypes","mouseUp","render","props","items","onChange","itemToString","children","align","filter","item","show","getInputProps","getButtonProps","getItemProps","toggleMenu","clearSelection","selectedItem","inputValue","highlightedIndex","onClick","right","left","map","index","id","indexOf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Downshift from 'downshift';\nimport './DropDown.css';\n\nfunction ArrowIcon({ isOpen }) {\n  return (\n    <svg\n      viewBox=\"0 0 20 20\"\n      preserveAspectRatio=\"none\"\n      width={16}\n      fill=\"transparent\"\n      stroke=\"#979797\"\n      strokeWidth=\"1.1px\"\n      transform={isOpen ? 'rotate(180)' : null}\n    >\n      <path d=\"M1,6 L10,15 L19,6\" />\n    </svg>\n  );\n}\n\nclass DropDown extends React.Component {\n  state = { isOpen: false };\n  handleToggleMenu = () => {\n    this.setState(({ isOpen }) => ({ isOpen: !isOpen }));\n  };\n  handleStateChange = changes => {\n    const { isOpen, type } = changes;\n    if (type === Downshift.stateChangeTypes.mouseUp) {\n      this.setState({ isOpen });\n    }\n  };\n  render() {\n    const { isOpen } = this.state;\n    const {\n      items,\n      onChange,\n      itemToString,\n      children,\n      align = 'right',\n    } = this.props;\n\n    return (\n      <Downshift\n        itemToString={itemToString}\n        onChange={onChange}\n        selectedItem={items.filter(item => item.show)}\n        isOpen={isOpen}\n        onStateChange={this.handleStateChange}\n      >\n        {({\n          getInputProps,\n          getButtonProps,\n          getItemProps,\n          isOpen,\n          toggleMenu,\n          clearSelection,\n          selectedItem,\n          inputValue,\n          highlightedIndex,\n        }) => (\n          <div className=\"dropDownHeader\">\n            <button\n              aria-label={`Show columns to select`}\n              className=\"dropDownButton\"\n              {...getButtonProps({ onClick: this.handleToggleMenu })}\n            >\n              <div className=\"dropDownButtonContent\">{children}</div>\n              <ArrowIcon isOpen={isOpen} />\n            </button>\n            {!isOpen ? null : (\n              <div\n                className=\"dropDownContent\"\n                style={{\n                  right: align === 'right' ? 0 : 'auto',\n                  left: align === 'right' ? 'auto' : 0,\n                }}\n              >\n                {items.map((item, index) => (\n                  <div\n                    className=\"dropDownContentElement\"\n                    key={item.id || itemToString(item)}\n                    {...getItemProps({ item, index })}\n                  >\n                    {itemToString(item)}\n                    <input\n                      readOnly\n                      type=\"checkbox\"\n                      checked={selectedItem.indexOf(item) > -1}\n                      aria-label={`Select column ${item.id ||\n                        itemToString(item)}`}\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n      </Downshift>\n    );\n  }\n}\n\nexport default DropDown;\n"]},"metadata":{},"sourceType":"module"}