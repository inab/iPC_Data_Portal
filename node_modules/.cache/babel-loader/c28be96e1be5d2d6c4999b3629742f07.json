{"ast":null,"code":"export default function stifle(fn, wait) {\n  if (typeof fn !== 'function' || typeof wait !== 'number') {\n    throw new Error('stifle(fn, wait) -- expected a function and number of milliseconds, got (' + typeof fn + ', ' + typeof wait + ')');\n  }\n\n  var timer; // Timer to fire after `wait` has elapsed\n\n  var called; // Keep track if it gets called during the `wait`\n\n  var wrapper = function () {\n    // Check if still \"cooling down\" from a previous call\n    if (timer) {\n      called = true;\n    } else {\n      // Start a timer to fire after the `wait` is over\n      timer = setTimeout(afterWait, wait); // And call the wrapped function\n\n      fn();\n    }\n  }; // Add a cancel method, to kill any pending calls\n\n\n  wrapper.cancel = function () {\n    // Clear the called flag, or it would fire twice when called again later\n    called = false; // Turn off the timer, so it won't fire after the wait expires\n\n    if (timer) {\n      clearTimeout(timer);\n      timer = undefined;\n    }\n  };\n\n  function afterWait() {\n    // Empty out the timer\n    timer = undefined; // If it was called during the `wait`, fire it again\n\n    if (called) {\n      called = false;\n      wrapper();\n    }\n  }\n\n  return wrapper;\n}","map":null,"metadata":{},"sourceType":"module"}