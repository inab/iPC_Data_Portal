{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DisplayNameMapContext = exports.setSqonAtPath = exports.getDependentIndices = exports.doesContainReference = exports.isIndexReferencedInSqon = exports.removeSqonPath = exports.getOperationAtPath = exports.duplicateSqonAtIndex = exports.removeSqonAtIndex = exports.resolveSyntheticSqon = exports.isFieldOp = exports.isBooleanOp = exports.isValueObj = exports.isReference = exports.isEmptySqon = exports.FIELD_OP_DISPLAY_NAME = exports.BOOLEAN_OPS = exports.NOT_OP = exports.OR_OP = exports.AND_OP = exports.TERM_OPS = exports.RANGE_OPS = exports.FIELD_OP = exports.ALL_OP = exports.NOT_IN_OP = exports.IN_OP = exports.LTE_OP = exports.GTE_OP = exports.BETWEEN_OP = exports.LT_OP = exports.GT_OP = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _ramda = require(\"ramda\");\n\nvar _FIELD_OP_DISPLAY_NAM;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * todo: these magic sqon values should be centralized across Arranger\n */\n\n\nvar GT_OP = '>';\nexports.GT_OP = GT_OP;\nvar LT_OP = '<';\nexports.LT_OP = LT_OP;\nvar BETWEEN_OP = 'between';\nexports.BETWEEN_OP = BETWEEN_OP;\nvar GTE_OP = '>=';\nexports.GTE_OP = GTE_OP;\nvar LTE_OP = '<=';\nexports.LTE_OP = LTE_OP;\nvar IN_OP = 'in';\nexports.IN_OP = IN_OP;\nvar NOT_IN_OP = 'not-in';\nexports.NOT_IN_OP = NOT_IN_OP;\nvar ALL_OP = 'all';\nexports.ALL_OP = ALL_OP;\nvar FIELD_OP = [GT_OP, LT_OP, BETWEEN_OP, GTE_OP, LTE_OP, IN_OP, NOT_IN_OP, ALL_OP];\nexports.FIELD_OP = FIELD_OP;\nvar RANGE_OPS = [GT_OP, LT_OP, BETWEEN_OP, GTE_OP, LTE_OP];\nexports.RANGE_OPS = RANGE_OPS;\nvar TERM_OPS = [IN_OP, ALL_OP, NOT_IN_OP];\nexports.TERM_OPS = TERM_OPS;\nvar AND_OP = 'and';\nexports.AND_OP = AND_OP;\nvar OR_OP = 'or';\nexports.OR_OP = OR_OP;\nvar NOT_OP = 'not';\nexports.NOT_OP = NOT_OP;\nvar BOOLEAN_OPS = [AND_OP, OR_OP, NOT_OP];\nexports.BOOLEAN_OPS = BOOLEAN_OPS;\nvar FIELD_OP_DISPLAY_NAME = (_FIELD_OP_DISPLAY_NAM = {}, _defineProperty(_FIELD_OP_DISPLAY_NAM, IN_OP, 'any of'), _defineProperty(_FIELD_OP_DISPLAY_NAM, NOT_IN_OP, 'not'), _defineProperty(_FIELD_OP_DISPLAY_NAM, ALL_OP, 'all of'), _defineProperty(_FIELD_OP_DISPLAY_NAM, GTE_OP, 'greater than or equal to'), _defineProperty(_FIELD_OP_DISPLAY_NAM, LTE_OP, 'less than or equal to'), _defineProperty(_FIELD_OP_DISPLAY_NAM, LT_OP, 'less than'), _defineProperty(_FIELD_OP_DISPLAY_NAM, GT_OP, 'greater than'), _defineProperty(_FIELD_OP_DISPLAY_NAM, BETWEEN_OP, 'between'), _FIELD_OP_DISPLAY_NAM);\n/**\n * Utilities for determining the type of sqon object\n */\n\nexports.FIELD_OP_DISPLAY_NAME = FIELD_OP_DISPLAY_NAME;\n\nvar isEmptySqon = function isEmptySqon(sqonObj) {\n  return !sqonObj ? true : BOOLEAN_OPS.includes(sqonObj.op) && !Boolean(sqonObj.content.length);\n};\n\nexports.isEmptySqon = isEmptySqon;\n\nvar isReference = function isReference(syntheticSqon) {\n  return !isNaN(syntheticSqon);\n};\n\nexports.isReference = isReference;\n\nvar isValueObj = function isValueObj(sqonObj) {\n  return _typeof(sqonObj) === 'object' && !isEmptySqon(sqonObj) && 'value' in sqonObj && 'field' in sqonObj;\n};\n\nexports.isValueObj = isValueObj;\n\nvar isBooleanOp = function isBooleanOp(sqonObj) {\n  return _typeof(sqonObj) === 'object' && !isEmptySqon(sqonObj) && BOOLEAN_OPS.includes(sqonObj.op);\n};\n\nexports.isBooleanOp = isBooleanOp;\n\nvar isFieldOp = function isFieldOp(sqonObj) {\n  return _typeof(sqonObj) === 'object' && !isEmptySqon(sqonObj) && FIELD_OP.includes(sqonObj.op);\n};\n/**\n * A synthetic sqon may look like: { \"op\": \"and\", \"content\": [1, 0, 2] }\n * where [1, 0, 2] is a list of index references to other sqons in a list\n * of given sqons. resolveSyntheticSqon resolves a synthetic sqon to an\n * executable sqon.\n **/\n\n\nexports.isFieldOp = isFieldOp;\n\nvar resolveSyntheticSqon = function resolveSyntheticSqon(allSqons) {\n  return function (syntheticSqon) {\n    if (isEmptySqon(syntheticSqon)) {\n      return syntheticSqon;\n    } else if (isBooleanOp(syntheticSqon)) {\n      return _objectSpread({}, syntheticSqon, {\n        content: syntheticSqon.content.map(function (c) {\n          return !isNaN(c) ? allSqons[c] : c;\n        }).map(resolveSyntheticSqon(allSqons))\n      });\n    } else {\n      return syntheticSqon;\n    }\n  };\n};\n/**\n * Non-mutative removal of the entry at \"indexToRemove\" from a list of\n * synthetic sqons \"sqonList\" and updates references.\n **/\n\n\nexports.resolveSyntheticSqon = resolveSyntheticSqon;\n\nvar removeSqonAtIndex = function removeSqonAtIndex(indexToRemove, sqonList) {\n  return sqonList.filter(function (s, i) {\n    return i !== indexToRemove;\n  }) // takes out the removed sqon\n  .map(function (sqon) {\n    return isEmptySqon(sqon) ? sqon : _objectSpread({}, sqon, {\n      content: sqon.content.filter( // removes references\n      function (content) {\n        return content !== indexToRemove;\n      }).map( // shifts references to indices greater than the removed one\n      function (s) {\n        return !isNaN(s) ? s > indexToRemove ? s - 1 : s : s;\n      })\n    });\n  });\n};\n/**\n * Non-mutative duplication of the entry at \"indexToRemove\" from a list of\n * synthetic sqons \"sqonList\" and updates references.\n **/\n\n\nexports.removeSqonAtIndex = removeSqonAtIndex;\n\nvar duplicateSqonAtIndex = function duplicateSqonAtIndex(indexToDuplicate, sqonList) {\n  return [].concat(_toConsumableArray(sqonList.slice(0, indexToDuplicate)), [(0, _lodash.cloneDeep)(sqonList[indexToDuplicate])], _toConsumableArray(sqonList.slice(indexToDuplicate, sqonList.length))).map(function (sqon) {\n    return isEmptySqon(sqon) ? sqon : _objectSpread({}, sqon, {\n      content: sqon.content.map(function (s) {\n        return !isNaN(s) ? s > indexToDuplicate ? s + 1 : s : s;\n      })\n    });\n  });\n};\n/**\n * Paths are in the format [1, 3, 4, ...] where each number is a\n * \"content\" index of the obj of interest in the sqon tree.\n **/\n\n\nexports.duplicateSqonAtIndex = duplicateSqonAtIndex;\n\nvar getOperationAtPath = function getOperationAtPath(paths) {\n  return function (sqon) {\n    var _paths = _toArray(paths),\n        currentPath = _paths[0],\n        rest = _paths.slice(1);\n\n    return isBooleanOp(sqon) ? sqon.content.filter(function (c, i) {\n      return i === currentPath;\n    }).map(getOperationAtPath(rest))[0] : sqon;\n  };\n};\n/**\n * Non-mutative removal of an object at location 'paths' in 'sqon', using lens (refer to https://ramdajs.com/docs/#lens)\n * @param {[Number]} paths\n * @param {*} sqon\n */\n\n\nexports.getOperationAtPath = getOperationAtPath;\n\nvar removeSqonPath = function removeSqonPath(paths) {\n  return function (sqon) {\n    // creates the target lens\n    var lensPath = (0, _lodash.flattenDeep)(paths.map(function (path) {\n      return ['content', path];\n    }));\n    var targetLens = (0, _ramda.lensPath)(lensPath); // creates lens to the immediate parent of target\n\n    var parentPath = (0, _lodash.flattenDeep)(paths.slice(0, paths.length - 1).map(function (path) {\n      return ['content', path];\n    }));\n    var parentLens = (0, _ramda.lensPath)(parentPath); // get reference to target and its immediate parent\n\n    var removeTarget = (0, _ramda.view)(targetLens, sqon);\n    var parent = (0, _ramda.view)(parentLens, sqon); // returns the modified structure with removeTarget filtered out\n\n    return (0, _ramda.set)(parentLens, _objectSpread({}, parent, {\n      content: parent.content.filter(function (c) {\n        return c !== removeTarget;\n      })\n    }), sqon);\n  };\n};\n\nexports.removeSqonPath = removeSqonPath;\n\nvar isIndexReferencedInSqon = function isIndexReferencedInSqon(syntheticSqon) {\n  return function (indexReference) {\n    if (isBooleanOp(syntheticSqon)) {\n      return syntheticSqon.content.reduce(function (acc, contentSqon) {\n        return acc || isIndexReferencedInSqon(contentSqon)(indexReference);\n      }, false);\n    } else {\n      return syntheticSqon === indexReference;\n    }\n  };\n};\n\nexports.isIndexReferencedInSqon = isIndexReferencedInSqon;\n\nvar doesContainReference = function doesContainReference(sqon) {\n  if (isBooleanOp(sqon)) {\n    return sqon.content.some(doesContainReference);\n  } else {\n    return isReference(sqon);\n  }\n};\n\nexports.doesContainReference = doesContainReference;\n\nvar getDependentIndices = function getDependentIndices(syntheticSqons) {\n  return function (index) {\n    return syntheticSqons.reduce(function (acc, sq, i) {\n      if (sq && isIndexReferencedInSqon(sq)(index)) {\n        acc.push(i);\n      }\n\n      return acc;\n    }, []);\n  };\n};\n\nexports.getDependentIndices = getDependentIndices;\n\nvar setSqonAtPath = function setSqonAtPath(paths, newSqon) {\n  return function (sqon) {\n    var lensPath = (0, _lodash.flattenDeep)(paths.map(function (path) {\n      return ['content', path];\n    }));\n    var targetLens = (0, _ramda.lensPath)(lensPath);\n    return (0, _ramda.set)(targetLens, newSqon, sqon);\n  };\n};\n\nexports.setSqonAtPath = setSqonAtPath;\n\nvar DisplayNameMapContext = _react.default.createContext({});\n\nexports.DisplayNameMapContext = DisplayNameMapContext;","map":null,"metadata":{},"sourceType":"script"}