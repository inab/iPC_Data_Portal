{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _mappingToColumnsType = _interopRequireDefault(require(\"./mappingToColumnsType\"));\n\nvar _columnsToGraphql = require(\"./utils/columnsToGraphql\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar _default = function _default(mapping) {\n  return (0, _mappingToColumnsType[\"default\"])(mapping).map(function (_ref) {\n    var field = _ref.field,\n        type = _ref.type;\n    var id = field.replace(/hits\\.edges\\[\\d*\\].node\\./g, '');\n    return _objectSpread({\n      show: false,\n      type: type,\n      sortable: type !== 'list',\n      canChangeShow: type !== 'list',\n      field: id\n    }, type === 'list' ? {\n      query: (0, _columnsToGraphql.toQuery)({\n        accessor: field\n      }),\n      jsonPath: \"$.\".concat(field.replace(/\\[\\d*\\]/g, '[*]'))\n    } : {\n      accessor: field\n    });\n  });\n};\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}