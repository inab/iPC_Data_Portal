{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterDisplayTreeDataBySearchTerm = exports.orderDisplayTreeData = exports.elasticMappingToDisplayTreeData = exports.injectExtensionToElasticMapping = exports.filterOutNonValue = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _mappingUtils = require(\"@arranger/mapping-utils\");\n\nvar _strToReg = _interopRequireDefault(require(\"../utils/strToReg\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar elasticMappingToDisplayTreeData = _mappingUtils.mappingToDisplayTreeData.elasticMappingToDisplayTreeData;\nexports.elasticMappingToDisplayTreeData = elasticMappingToDisplayTreeData;\n\nvar injectExtensionToElasticMapping = function injectExtensionToElasticMapping(_ref) {\n  var elasticMapping = _ref.elasticMapping,\n      extendedMapping = _ref.extendedMapping,\n      rootTypeName = _ref.rootTypeName;\n  var rawDisplayData = elasticMappingToDisplayTreeData(elasticMapping);\n\n  var extend = function extend(node) {\n    var extension = extendedMapping.find(function (x) {\n      return x.field === node.path;\n    });\n    return _objectSpread({}, node, {}, extension && {\n      title: extension.displayName || node.title,\n      type: extension.type || node.title\n    }, {}, node.children && {\n      children: node.children.map(extend)\n    });\n  };\n\n  var _partition = (0, _lodash.partition)(rawDisplayData.map(extend), function (x) {\n    return !x.children;\n  }),\n      _partition2 = _slicedToArray(_partition, 2),\n      rootFields = _partition2[0],\n      nestedFields = _partition2[1];\n\n  return [{\n    title: rootTypeName || 'Root',\n    children: rootFields,\n    isRoot: true\n  }].concat(_toConsumableArray(nestedFields));\n};\n\nexports.injectExtensionToElasticMapping = injectExtensionToElasticMapping;\n\nvar filterOutNonValue = function filterOutNonValue(_ref2) {\n  var _extendedMapping$filt;\n\n  var aggregations = _ref2.aggregations,\n      displayTreeData = _ref2.displayTreeData,\n      extendedMapping = _ref2.extendedMapping;\n  var aggregationsWithValue = (0, _lodash.keys)(aggregations).reduce(function (a, key) {\n    var _aggregations$key, _aggregations$key$buc, _aggregations$key$buc2, _aggregations$key2, _aggregations$key2$st, _aggregations$key3, _aggregations$key3$st;\n\n    var keyHasValue = ((_aggregations$key = aggregations[key]) === null || _aggregations$key === void 0 ? void 0 : (_aggregations$key$buc = _aggregations$key.buckets) === null || _aggregations$key$buc === void 0 ? void 0 : (_aggregations$key$buc2 = _aggregations$key$buc.filter(function (x) {\n      return (x.key_as_string || x.key) !== '__missing__';\n    })) === null || _aggregations$key$buc2 === void 0 ? void 0 : _aggregations$key$buc2.length) > 0 || ((_aggregations$key2 = aggregations[key]) === null || _aggregations$key2 === void 0 ? void 0 : (_aggregations$key2$st = _aggregations$key2.stats) === null || _aggregations$key2$st === void 0 ? void 0 : _aggregations$key2$st.min) || ((_aggregations$key3 = aggregations[key]) === null || _aggregations$key3 === void 0 ? void 0 : (_aggregations$key3$st = _aggregations$key3.stats) === null || _aggregations$key3$st === void 0 ? void 0 : _aggregations$key3$st.max);\n    return _objectSpread({}, a, {}, keyHasValue ? _defineProperty({}, key, aggregations[key]) : {});\n  }, {});\n  var keysWithValue = (0, _lodash.keys)(aggregationsWithValue);\n\n  var doesDisplayNodeHaveValue = function doesDisplayNodeHaveValue(node) {\n    return node.children ? node.children.filter(doesDisplayNodeHaveValue).length : keysWithValue.indexOf(node.path) > -1;\n  };\n\n  var applyFilterToDisplayNodeCollection = function applyFilterToDisplayNodeCollection(collection) {\n    return collection.filter(doesDisplayNodeHaveValue).map(function (node) {\n      return _objectSpread({}, node, {}, node.children && {\n        children: applyFilterToDisplayNodeCollection(node.children)\n      });\n    });\n  };\n\n  return _objectSpread({\n    aggregationsWithValue: aggregationsWithValue\n  }, displayTreeData && {\n    displayTreeDataWithValue: applyFilterToDisplayNodeCollection(displayTreeData)\n  }, {}, extendedMapping && {\n    extendedMappingWithValue: extendedMapping === null || extendedMapping === void 0 ? void 0 : (_extendedMapping$filt = extendedMapping.filter) === null || _extendedMapping$filt === void 0 ? void 0 : _extendedMapping$filt.call(extendedMapping, function (x) {\n      return aggregationsWithValue[x.field];\n    })\n  });\n};\n\nexports.filterOutNonValue = filterOutNonValue;\n\nvar orderDisplayTreeData = function orderDisplayTreeData(displayTreeData) {\n  return [].concat(_toConsumableArray((0, _lodash.orderBy)(displayTreeData.filter(function (x) {\n    return !x.children || x.isRoot;\n  }), 'title')), _toConsumableArray((0, _lodash.orderBy)(displayTreeData.filter(function (x) {\n    return !!x.children && !x.isRoot;\n  }).map(function (_ref4) {\n    var children = _ref4.children,\n        rest = _objectWithoutProperties(_ref4, [\"children\"]);\n\n    return _objectSpread({}, rest, {\n      children: orderDisplayTreeData(children)\n    });\n  }), 'title')));\n};\n\nexports.orderDisplayTreeData = orderDisplayTreeData;\n\nvar filterDisplayTreeDataBySearchTerm = function filterDisplayTreeDataBySearchTerm(_ref5) {\n  var displayTree = _ref5.displayTree,\n      searchTerm = _ref5.searchTerm,\n      aggregations = _ref5.aggregations;\n\n  var shouldBeIncluded = function shouldBeIncluded(_ref6) {\n    var _aggregations$path, _aggregations$path$bu;\n\n    var title = _ref6.title,\n        path = _ref6.path,\n        children = _ref6.children;\n    var inTitle = title.match((0, _strToReg.default)(searchTerm));\n    var inBuckets = (_aggregations$path = aggregations[path]) === null || _aggregations$path === void 0 ? void 0 : (_aggregations$path$bu = _aggregations$path.buckets) === null || _aggregations$path$bu === void 0 ? void 0 : _aggregations$path$bu.some(function (x) {\n      return (x.key_as_string || x.key).match((0, _strToReg.default)(searchTerm));\n    });\n    var inChildren = children && children.some(shouldBeIncluded);\n    return inTitle || inBuckets || inChildren;\n  };\n\n  return searchTerm && searchTerm.length ? displayTree === null || displayTree === void 0 ? void 0 : displayTree.filter(shouldBeIncluded).map(function (_ref7) {\n    var children = _ref7.children,\n        rest = _objectWithoutProperties(_ref7, [\"children\"]);\n\n    return _objectSpread({}, rest, {\n      children: filterDisplayTreeDataBySearchTerm({\n        displayTree: children,\n        searchTerm: searchTerm,\n        aggregations: aggregations\n      })\n    });\n  }) : displayTree;\n};\n\nexports.filterDisplayTreeDataBySearchTerm = filterDisplayTreeDataBySearchTerm;","map":null,"metadata":{},"sourceType":"script"}