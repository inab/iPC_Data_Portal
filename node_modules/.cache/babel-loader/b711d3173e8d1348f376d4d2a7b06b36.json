{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveSetsInSqon = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _middleware = require(\"@arranger/middleware\");\n\nvar _esSearch = _interopRequireDefault(require(\"./utils/esSearch\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar resolveSetIdsFromEs = function resolveSetIdsFromEs(es) {\n  return function (setId) {\n    return (0, _esSearch[\"default\"])(es)({\n      index: _middleware.CONSTANTS.ES_ARRANGER_SET_INDEX,\n      body: {\n        query: {\n          bool: {\n            must: {\n              match: {\n                setId: setId\n              }\n            }\n          }\n        }\n      }\n    }).then(function (_ref) {\n      var hits = _ref.hits.hits;\n      return (0, _lodash.flattenDeep)(hits.map(function (_ref2) {\n        var ids = _ref2._source.ids;\n        return ids;\n      }));\n    });\n  };\n};\n\nvar getSetIdsFromSqon = function getSetIdsFromSqon() {\n  var _String$indexOf, _String;\n\n  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      content = _ref3.content;\n\n  var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return ((0, _lodash.isArray)(content) ? (0, _lodash.flattenDeep)(content.reduce(function (acc, subSqon) {\n    return [].concat(_toConsumableArray(acc), _toConsumableArray(getSetIdsFromSqon(subSqon, collection)));\n  }, collection)) : (0, _lodash.isArray)(content === null || content === void 0 ? void 0 : content.value) ? content === null || content === void 0 ? void 0 : content.value.filter(function (value) {\n    return String(value).indexOf('set_id:') === 0;\n  }) : _toConsumableArray(((_String$indexOf = (_String = String(content === null || content === void 0 ? void 0 : content.value)).indexOf) === null || _String$indexOf === void 0 ? void 0 : _String$indexOf.call(_String, 'set_id:')) === 0 ? [content.value] : [])).map(function (setId) {\n    return setId.replace('set_id:', '');\n  });\n};\n\nvar injectIdsIntoSqon = function injectIdsIntoSqon(_ref4) {\n  var sqon = _ref4.sqon,\n      setIdsToValueMap = _ref4.setIdsToValueMap;\n  return _objectSpread({}, sqon, {\n    content: sqon.content.map(function (op) {\n      return _objectSpread({}, op, {\n        content: !(0, _lodash.isArray)(op.content) ? _objectSpread({}, op.content, {\n          value: (0, _lodash.isArray)(op.content.value) ? (0, _lodash.flattenDeep)(op.content.value.map(function (value) {\n            return setIdsToValueMap[value] || op.content.value;\n          })) : setIdsToValueMap[op.content.value] || op.content.value\n        }) : injectIdsIntoSqon({\n          sqon: op,\n          setIdsToValueMap: setIdsToValueMap\n        }).content\n      });\n    })\n  });\n};\n\nvar resolveSetsInSqon = function resolveSetsInSqon(_ref5) {\n  var sqon = _ref5.sqon,\n      es = _ref5.es;\n  var setIds = getSetIdsFromSqon(sqon || {});\n  return setIds.length ? Promise.all(setIds.map(resolveSetIdsFromEs(es))).then(function (searchResult) {\n    var setIdsToValueMap = (0, _lodash.zipObject)(setIds.map(function (id) {\n      return \"set_id:\".concat(id);\n    }), searchResult);\n    return injectIdsIntoSqon({\n      sqon: sqon,\n      setIdsToValueMap: setIdsToValueMap\n    });\n  }) : sqon;\n};\n\nexports.resolveSetsInSqon = resolveSetsInSqon;","map":null,"metadata":{},"sourceType":"script"}