{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.decorateFieldWithColumnsState = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _recompose = require(\"recompose\");\n\nvar _jsonpath = _interopRequireDefault(require(\"jsonpath/jsonpath.min\"));\n\nvar _Query = require(\"../../Query\");\n\nvar _splitString = _interopRequireDefault(require(\"../../utils/splitString\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar isValidValue = function isValidValue(value) {\n  var _value$trim;\n\n  return (value === null || value === void 0 ? void 0 : (_value$trim = value.trim()) === null || _value$trim === void 0 ? void 0 : _value$trim.length) > 1;\n};\n\nvar decorateFieldWithColumnsState = function decorateFieldWithColumnsState(_ref) {\n  var _columnsState$columns;\n\n  var columnsState = _ref.columnsState,\n      field = _ref.field;\n  var columnsStateField = columnsState === null || columnsState === void 0 ? void 0 : (_columnsState$columns = columnsState.columns) === null || _columnsState$columns === void 0 ? void 0 : _columnsState$columns.find(function (y) {\n    return y.field === field;\n  });\n  return columnsStateField ? _objectSpread({}, columnsStateField, {\n    gqlField: field.split('.').join('__'),\n    query: columnsStateField.query || field,\n    jsonPath: columnsStateField.jsonPath || \"$.\".concat(field)\n  }) : {};\n};\n\nexports.decorateFieldWithColumnsState = decorateFieldWithColumnsState;\n\nvar isMatching = function isMatching(_ref2) {\n  var _ref2$value = _ref2.value,\n      value = _ref2$value === void 0 ? '' : _ref2$value,\n      _ref2$searchText = _ref2.searchText,\n      searchText = _ref2$searchText === void 0 ? '' : _ref2$searchText,\n      _ref2$exact = _ref2.exact,\n      exact = _ref2$exact === void 0 ? false : _ref2$exact;\n  return exact ? value === searchText : value.toLowerCase().includes(searchText.toLowerCase());\n};\n\nvar enhance = (0, _recompose.compose)((0, _recompose.withProps)(function (_ref3) {\n  var exact = _ref3.exact,\n      quickSearchFields = _ref3.quickSearchFields,\n      searchTextDelimiters = _ref3.searchTextDelimiters,\n      searchText = _ref3.searchText,\n      _ref3$searchTextParts = _ref3.searchTextParts,\n      searchTextParts = _ref3$searchTextParts === void 0 ? (0, _splitString[\"default\"])({\n    str: searchText,\n    split: searchTextDelimiters\n  }) : _ref3$searchTextParts;\n  return {\n    searchTextParts: searchTextParts,\n    sqon: {\n      op: 'or',\n      content: exact ? quickSearchFields === null || quickSearchFields === void 0 ? void 0 : quickSearchFields.map(function (_ref4) {\n        var field = _ref4.field;\n        return {\n          op: 'in',\n          content: {\n            field: field,\n            value: searchTextParts\n          }\n        };\n      }) : searchTextParts.map(function (x) {\n        return {\n          op: 'filter',\n          content: {\n            value: x,\n            fields: quickSearchFields === null || quickSearchFields === void 0 ? void 0 : quickSearchFields.map(function (x) {\n              return x.field;\n            })\n          }\n        };\n      })\n    }\n  };\n}), (0, _Query.withQuery)(function (_ref5) {\n  var _quickSearchFields$ma;\n\n  var projectId = _ref5.projectId,\n      index = _ref5.index,\n      primaryKeyField = _ref5.primaryKeyField,\n      quickSearchFields = _ref5.quickSearchFields,\n      searchText = _ref5.searchText,\n      searchTextParts = _ref5.searchTextParts,\n      _ref5$size = _ref5.size,\n      size = _ref5$size === void 0 ? 5 : _ref5$size,\n      sqon = _ref5.sqon;\n  return {\n    debounceTime: 300,\n    shouldFetch: isValidValue(searchText) && (quickSearchFields || []).length,\n    projectId: projectId,\n    key: 'rawSearchResults',\n    query: \"\\n        query \".concat((0, _lodash.capitalize)(index), \"QuickSearchResults($sqon: JSON, $size: Int) {\\n          \").concat(index, \" {\\n            hits(filters: $sqon, first: $size) {\\n              total\\n              edges {\\n                node {\\n                  primaryKey: \").concat(primaryKeyField === null || primaryKeyField === void 0 ? void 0 : primaryKeyField.query, \"\\n                  \").concat(quickSearchFields === null || quickSearchFields === void 0 ? void 0 : (_quickSearchFields$ma = quickSearchFields.map(function (f) {\n      return \"\".concat(f.gqlField, \": \").concat(f.query);\n    })) === null || _quickSearchFields$ma === void 0 ? void 0 : _quickSearchFields$ma.join('\\n'), \"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      \"),\n    variables: {\n      size: size,\n      sqon: sqon\n    }\n  };\n}), (0, _recompose.withProps)(function (_ref6) {\n  var _searchResultsByEntit;\n\n  var index = _ref6.index,\n      exact = _ref6.exact,\n      searchText = _ref6.searchText,\n      searchTextParts = _ref6.searchTextParts,\n      primaryKeyField = _ref6.primaryKeyField,\n      quickSearchFields = _ref6.quickSearchFields,\n      _ref6$rawSearchResult = _ref6.rawSearchResults,\n      data = _ref6$rawSearchResult.data,\n      loading = _ref6$rawSearchResult.loading,\n      _ref6$searchResultsBy = _ref6.searchResultsByEntity,\n      searchResultsByEntity = _ref6$searchResultsBy === void 0 ? (quickSearchFields === null || quickSearchFields === void 0 ? void 0 : quickSearchFields.map(function (x) {\n    var _data$index, _data$index$hits, _data$index$hits$edge, _data$index$hits$edge2;\n\n    return _objectSpread({}, x, {\n      results: data === null || data === void 0 ? void 0 : (_data$index = data[index]) === null || _data$index === void 0 ? void 0 : (_data$index$hits = _data$index.hits) === null || _data$index$hits === void 0 ? void 0 : (_data$index$hits$edge = _data$index$hits.edges) === null || _data$index$hits$edge === void 0 ? void 0 : (_data$index$hits$edge2 = _data$index$hits$edge.map(function (_ref7) {\n        var node = _ref7.node,\n            _ref7$primaryKey = _ref7.primaryKey,\n            primaryKey = _ref7$primaryKey === void 0 ? _jsonpath[\"default\"].query(_defineProperty({}, primaryKeyField.field.split('.')[0], node.primaryKey), primaryKeyField.jsonPath)[0] : _ref7$primaryKey,\n            _ref7$result = _ref7.result,\n            result = _ref7$result === void 0 ? _jsonpath[\"default\"].query(_defineProperty({}, x.field.split('.')[0], node[x.gqlField]), x.jsonPath)[0] : _ref7$result;\n        return _objectSpread({\n          primaryKey: primaryKey,\n          entityName: x.entityName\n        }, searchTextParts.reduce(function (acc, part) {\n          if ((0, _lodash.isArray)(result)) {\n            var r = result.find(function (r) {\n              return isMatching({\n                value: r,\n                searchText: part,\n                exact: exact\n              });\n            });\n\n            if (r) {\n              return {\n                input: part,\n                result: r\n              };\n            }\n\n            return acc;\n          }\n\n          if (isMatching({\n            value: result,\n            searchText: part,\n            exact: exact\n          })) {\n            return {\n              input: part,\n              result: result\n            };\n          }\n\n          return acc;\n        }, {\n          input: '',\n          result: ''\n        }));\n      })) === null || _data$index$hits$edge2 === void 0 ? void 0 : _data$index$hits$edge2.filter(function (x) {\n        return isValidValue(searchText) && x.input;\n      })\n    });\n  })) || [] : _ref6$searchResultsBy;\n  return {\n    searchResultsByEntity: searchResultsByEntity,\n    searchResultsLoading: loading,\n    searchResults: (0, _lodash.flatMap)(searchResultsByEntity === null || searchResultsByEntity === void 0 ? void 0 : (_searchResultsByEntit = searchResultsByEntity.filter(function (x) {\n      var _x$results;\n\n      return x === null || x === void 0 ? void 0 : (_x$results = x.results) === null || _x$results === void 0 ? void 0 : _x$results.length;\n    })) === null || _searchResultsByEntit === void 0 ? void 0 : _searchResultsByEntit.map(function (_ref8) {\n      var entityName = _ref8.entityName,\n          field = _ref8.field,\n          results = _ref8.results;\n      return results === null || results === void 0 ? void 0 : results.map(function (_ref9) {\n        var input = _ref9.input,\n            primaryKey = _ref9.primaryKey,\n            result = _ref9.result;\n        return {\n          entityName: entityName,\n          field: field,\n          input: input,\n          primaryKey: primaryKey,\n          result: result\n        };\n      });\n    }))\n  };\n}));\n\nvar QuickSearchQuery = function QuickSearchQuery(_ref10) {\n  var render = _ref10.render,\n      _ref10$mapResults = _ref10.mapResults,\n      mapResults = _ref10$mapResults === void 0 ? function () {\n    return {};\n  } : _ref10$mapResults,\n      sqon = _ref10.sqon,\n      searchResults = _ref10.searchResults,\n      searchResultsByEntity = _ref10.searchResultsByEntity,\n      searchResultsLoading = _ref10.searchResultsLoading,\n      searchTextParts = _ref10.searchTextParts,\n      _ref10$props = _ref10.props,\n      props = _ref10$props === void 0 ? {\n    searchTextParts: searchTextParts,\n    sqon: sqon,\n    results: searchResults,\n    resultsByEntity: searchResultsByEntity,\n    loading: searchResultsLoading\n  } : _ref10$props;\n  return render(_objectSpread({}, props, {}, mapResults(props)));\n};\n\nvar _default = enhance(QuickSearchQuery);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}