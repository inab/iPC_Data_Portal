{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _mappingToNestedFields = _interopRequireDefault(require(\"./mappingToNestedFields\"));\n\nvar _mappingToScalarFields = _interopRequireDefault(require(\"./mappingToScalarFields\"));\n\nvar _mappingToNestedTypes = _interopRequireDefault(require(\"./mappingToNestedTypes\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar mappingToObjectTypes = function mappingToObjectTypes(type, mapping, parent, extendedFields) {\n  return Object.entries(mapping).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        metadata = _ref2[1];\n\n    return !metadata.type && metadata.properties;\n  }).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        field = _ref4[0],\n        metadata = _ref4[1];\n\n    return \"\\n        \".concat(mappingToObjectTypes(type + (0, _lodash.capitalize)(field), metadata.properties, [parent, field].filter(Boolean).join('.'), extendedFields), \",\\n        \").concat((0, _mappingToNestedTypes[\"default\"])(type + (0, _lodash.capitalize)(field), metadata.properties, [parent, field].filter(Boolean).join('.'), extendedFields).join('\\n'), \"\\n        type \").concat(type + (0, _lodash.capitalize)(field), \" {\\n          \").concat((0, _mappingToNestedFields[\"default\"])(type + (0, _lodash.capitalize)(field), metadata.properties, [parent, field].filter(Boolean).join('.'), extendedFields), \"\\n          \").concat((0, _mappingToScalarFields[\"default\"])(metadata.properties, extendedFields, [parent, field].filter(Boolean).join('.')), \"\\n        }\\n      \");\n  });\n}; // TODO: figure out where this is making a dupe fiel\n// let mappingToObjectTypes = (type, mapping) => {\n//   return Object.entries(mapping)\n//     .filter(([, metadata]) => !metadata.type)\n//     .map(\n//       ([field, metadata]) => `\n//         ${mappingToFields({\n//           type: {\n//             name: type.name + capitalize(field),\n//             mapping: metadata.properties,\n//           },\n//         })}\n//         type ${type + capitalize(field)} {\n//           ${mappingToScalarFields(metadata.properties, type.extendedFields)}\n//         }\n//       `,\n//     )\n// }\n\n\nvar _default = mappingToObjectTypes;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}