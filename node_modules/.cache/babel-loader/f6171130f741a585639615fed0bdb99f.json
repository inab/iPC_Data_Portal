{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _lodash = require(\"lodash\");\n\nvar _injectNestedFiltersToAggs = _interopRequireDefault(require(\"./injectNestedFiltersToAggs\"));\n\nvar _getNestedSqonFilters = _interopRequireDefault(require(\"./getNestedSqonFilters\"));\n\nvar _constants = require(\"../constants\");\n\nvar _createFieldAggregation = _interopRequireDefault(require(\"./createFieldAggregation\"));\n\nvar _normalizeFilters = _interopRequireDefault(require(\"../buildQuery/normalizeFilters\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction createGlobalAggregation(_ref) {\n  var field = _ref.field,\n      aggregation = _ref.aggregation;\n  return _defineProperty({}, \"\".concat(field, \":\").concat(_constants.AGGS_WRAPPER_GLOBAL), {\n    global: {},\n    aggs: aggregation\n  });\n}\n\nfunction createFilteredAggregation(_ref3) {\n  var field = _ref3.field,\n      filter = _ref3.filter,\n      aggregation = _ref3.aggregation;\n  return Object.keys(filter || {}).length ? _defineProperty({}, \"\".concat(field, \":\").concat(_constants.AGGS_WRAPPER_FILTERED), {\n    filter: filter,\n    aggs: aggregation\n  }) : aggregation;\n}\n\nfunction removeFieldFromQuery(_ref5) {\n  var field = _ref5.field,\n      query = _ref5.query;\n  var nested = (0, _lodash.get)(query, _constants.ES_NESTED);\n  var nestedQuery = (0, _lodash.get)(nested, _constants.ES_QUERY);\n  var bool = (0, _lodash.get)(query, _constants.ES_BOOL);\n\n  if (['terms', 'range'].some(function (k) {\n    return (0, _lodash.get)(query, [k, field]);\n  }) || (0, _lodash.get)(query, ['exists', 'field']) === field) {\n    return null;\n  } else if (nestedQuery) {\n    var cleaned = removeFieldFromQuery({\n      field: field,\n      query: nestedQuery\n    });\n    return cleaned && _objectSpread({}, query, _defineProperty({}, _constants.ES_NESTED, _objectSpread({}, nested, _defineProperty({}, _constants.ES_QUERY, cleaned))));\n  } else if (bool) {\n    var filtered = Object.entries(bool).reduce(function (acc, _ref6) {\n      var _ref7 = _slicedToArray(_ref6, 2),\n          type = _ref7[0],\n          values = _ref7[1];\n\n      var filteredValues = values.map(function (value) {\n        return removeFieldFromQuery({\n          field: field,\n          query: value\n        });\n      }).filter(Boolean);\n\n      if (filteredValues.length > 0) {\n        acc[type] = filteredValues;\n      }\n\n      return acc;\n    }, {});\n    return Object.keys(filtered).length > 0 ? _defineProperty({}, _constants.ES_BOOL, filtered) : null;\n  } else {\n    return query;\n  }\n}\n\nfunction getNestedPathsInField(_ref9) {\n  var field = _ref9.field,\n      nestedFields = _ref9.nestedFields;\n  return field.split('.').map(function (s, i, arr) {\n    return arr.slice(0, i + 1).join('.');\n  }).filter(function (p) {\n    return nestedFields.includes(p);\n  });\n}\n\nfunction wrapWithFilters(_ref10) {\n  var field = _ref10.field,\n      query = _ref10.query,\n      aggregationsFilterThemselves = _ref10.aggregationsFilterThemselves,\n      aggregation = _ref10.aggregation;\n\n  if (!aggregationsFilterThemselves) {\n    var cleanedQuery = removeFieldFromQuery({\n      field: field,\n      query: query\n    }); // TODO: better way to figure out that the field wasn't found\n\n    if (!(0, _lodash.isEqual)(cleanedQuery || {}, query || {})) {\n      return createGlobalAggregation({\n        field: field,\n        aggregation: createFilteredAggregation({\n          field: field,\n          filter: cleanedQuery,\n          aggregation: aggregation\n        })\n      });\n    }\n  }\n\n  return aggregation;\n}\n/**\n * graphqlFields: output from `graphql-fields` (https://github.com/robrichard/graphql-fields)\n */\n\n\nfunction _default(_ref11) {\n  var sqon = _ref11.sqon,\n      graphqlFields = _ref11.graphqlFields,\n      nestedFields = _ref11.nestedFields,\n      aggregationsFilterThemselves = _ref11.aggregationsFilterThemselves,\n      query = _ref11.query;\n  var normalizedSqon = (0, _normalizeFilters[\"default\"])(sqon);\n  var nestedSqonFilters = (0, _getNestedSqonFilters[\"default\"])({\n    sqon: normalizedSqon,\n    nestedFields: nestedFields\n  });\n  var aggs = Object.entries(graphqlFields).reduce(function (aggregations, _ref12) {\n    var _ref13 = _slicedToArray(_ref12, 2),\n        fieldKey = _ref13[0],\n        graphqlField = _ref13[1];\n\n    var field = fieldKey.replace(/__/g, '.');\n    var nestedPaths = getNestedPathsInField({\n      field: field,\n      nestedFields: nestedFields\n    });\n    var fieldAggregation = (0, _createFieldAggregation[\"default\"])({\n      field: field,\n      graphqlField: graphqlField,\n      isNested: nestedPaths.length\n    });\n    var aggregation = nestedPaths.reverse().reduce(function (aggs, path) {\n      return _defineProperty({}, \"\".concat(field, \":\").concat(_constants.AGGS_WRAPPER_NESTED), {\n        nested: {\n          path: path\n        },\n        aggs: aggs\n      });\n    }, fieldAggregation);\n    return Object.assign(aggregations, wrapWithFilters({\n      query: query,\n      field: field,\n      aggregation: aggregation,\n      aggregationsFilterThemselves: aggregationsFilterThemselves\n    }));\n  }, {});\n  var filteredAggregations = (0, _injectNestedFiltersToAggs[\"default\"])({\n    aggs: aggs,\n    nestedSqonFilters: nestedSqonFilters,\n    aggregationsFilterThemselves: aggregationsFilterThemselves\n  });\n  return filteredAggregations;\n}","map":null,"metadata":{},"sourceType":"script"}