{"ast":null,"code":"/**\n * Lo-Dash 2.3.0 (Custom Build) <http://lodash.com/>\n * Build: `lodash modularize modern exports=\"npm\" -o ./npm/`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\nvar baseBind = require('lodash._basebind'),\n    baseCreateWrapper = require('lodash._basecreatewrapper'),\n    isFunction = require('lodash.isfunction');\n/**\n * Used for `Array` method references.\n *\n * Normally `Array.prototype` would suffice, however, using an array literal\n * avoids issues in Narwhal.\n */\n\n\nvar arrayRef = [];\n/** Native method shortcuts */\n\nvar push = arrayRef.push;\n/**\n * Creates a function that, when called, either curries or invokes `func`\n * with an optional `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to reference.\n * @param {number} bitmask The bitmask of method flags to compose.\n *  The bitmask may be composed of the following flags:\n *  1 - `_.bind`\n *  2 - `_.bindKey`\n *  4 - `_.curry`\n *  8 - `_.curry` (bound)\n *  16 - `_.partial`\n *  32 - `_.partialRight`\n * @param {Array} [partialArgs] An array of arguments to prepend to those\n *  provided to the new function.\n * @param {Array} [partialRightArgs] An array of arguments to append to those\n *  provided to the new function.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new function.\n */\n\nfunction createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {\n  var isBind = bitmask & 1,\n      isBindKey = bitmask & 2,\n      isCurry = bitmask & 4,\n      isCurryBound = bitmask & 8,\n      isPartial = bitmask & 16,\n      isPartialRight = bitmask & 32;\n\n  if (!isBindKey && !isFunction(func)) {\n    throw new TypeError();\n  }\n\n  if (isPartial && !partialArgs.length) {\n    bitmask &= ~16;\n    isPartial = partialArgs = false;\n  }\n\n  if (isPartialRight && !partialRightArgs.length) {\n    bitmask &= ~32;\n    isPartialRight = partialRightArgs = false;\n  }\n\n  var bindData = func && func.__bindData__;\n\n  if (bindData && bindData !== true) {\n    bindData = bindData.slice(); // set `thisBinding` is not previously bound\n\n    if (isBind && !(bindData[1] & 1)) {\n      bindData[4] = thisArg;\n    } // set if previously bound but not currently (subsequent curried functions)\n\n\n    if (!isBind && bindData[1] & 1) {\n      bitmask |= 8;\n    } // set curried arity if not yet set\n\n\n    if (isCurry && !(bindData[1] & 4)) {\n      bindData[5] = arity;\n    } // append partial left arguments\n\n\n    if (isPartial) {\n      push.apply(bindData[2] || (bindData[2] = []), partialArgs);\n    } // append partial right arguments\n\n\n    if (isPartialRight) {\n      push.apply(bindData[3] || (bindData[3] = []), partialRightArgs);\n    } // merge flags\n\n\n    bindData[1] |= bitmask;\n    return createWrapper.apply(null, bindData);\n  } // fast path for `_.bind`\n\n\n  var creater = bitmask == 1 || bitmask === 17 ? baseBind : baseCreateWrapper;\n  return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);\n}\n\nmodule.exports = createWrapper;","map":null,"metadata":{},"sourceType":"script"}