{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _emotion = require(\"emotion\");\n\nvar _reactComponentComponent = _interopRequireDefault(require(\"react-component-component\"));\n\nvar _timesCircleO = _interopRequireDefault(require(\"react-icons/lib/fa/times-circle-o\"));\n\nvar _filter = _interopRequireDefault(require(\"react-icons/lib/fa/filter\"));\n\nvar _NestedTreeView = _interopRequireDefault(require(\"../NestedTreeView\"));\n\nvar _CurrentSQON = require(\"../Arranger/CurrentSQON\");\n\nvar _FacetView = _interopRequireDefault(require(\"./FacetView\"));\n\nvar _Input = _interopRequireDefault(require(\"../Input\"));\n\nvar _LoadingScreen = _interopRequireDefault(require(\"../LoadingScreen\"));\n\nvar _Stats = _interopRequireDefault(require(\"../Stats\"));\n\nvar _utils = require(\"./utils\");\n\nrequire(\"./AdvancedFacetView.css\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar AdvancedFacetView =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AdvancedFacetView, _React$Component);\n\n  function AdvancedFacetView(props) {\n    var _this;\n\n    _classCallCheck(this, AdvancedFacetView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdvancedFacetView).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"fieldMappingFromPath\", function (path) {\n      var _this$props$elasticMa = _this.props.elasticMapping,\n          elasticMapping = _this$props$elasticMa === void 0 ? {} : _this$props$elasticMa;\n      return path.split('.').reduce(function (parentNode, nextPath) {\n        return parentNode[nextPath] ? parentNode[nextPath] : parentNode.properties ? parentNode.properties[nextPath] : {};\n      }, elasticMapping) || {};\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"constructFilterId\", function (_ref) {\n      var field = _ref.field,\n          value = _ref.value;\n      return value ? \"\".concat(field, \"---\").concat(value) : field;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSqonChange\", function (_ref2) {\n      var sqon = _ref2.sqon;\n      var _this$props$onSqonFie = _this.props.onSqonFieldChange,\n          onSqonFieldChange = _this$props$onSqonFie === void 0 ? function () {} : _this$props$onSqonFie;\n\n      _this.setState({\n        isLoading: true\n      }, function () {\n        return onSqonFieldChange({\n          sqon: sqon\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setSearchTerm\", (0, _lodash.debounce)(function (value) {\n      var _this$props$onFilterC = _this.props.onFilterChange,\n          onFilterChange = _this$props$onFilterC === void 0 ? function () {} : _this$props$onFilterC;\n      onFilterChange(value);\n\n      _this.setState({\n        searchTerm: value\n      });\n    }, 500));\n\n    _this.state = {\n      selectedPath: null,\n      withValueOnly: true,\n      searchTerm: null,\n      displayTreeData: null,\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(AdvancedFacetView, [{\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps, prevState) {\n      var aggChanged = !(0, _lodash.isEqual)(this.props.aggregations, prevProps.aggregations);\n      var sqonChanged = !(0, _lodash.isEqual)(this.props.sqon, prevProps.sqon);\n      return {\n        shouldEndLoading: aggChanged || sqonChanged\n      };\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, _ref3) {\n      var shouldEndLoading = _ref3.shouldEndLoading;\n      var shouldRecomputeDisplayTree = !(0, _lodash.isEqual)((0, _lodash.pick)(this.props, ['elasticMapping', 'extendedMapping']), (0, _lodash.pick)(prevProps, ['elasticMapping', 'extendedMapping']));\n\n      if (shouldRecomputeDisplayTree) {\n        var _this$props = this.props,\n            rootTypeName = _this$props.rootTypeName,\n            elasticMapping = _this$props.elasticMapping,\n            extendedMapping = _this$props.extendedMapping;\n        this.setState({\n          displayTreeData: (0, _utils.orderDisplayTreeData)((0, _utils.injectExtensionToElasticMapping)({\n            rootTypeName: rootTypeName,\n            elasticMapping: elasticMapping,\n            extendedMapping: extendedMapping\n          }))\n        });\n      }\n\n      if (shouldEndLoading) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          selectedPath = _this$state.selectedPath,\n          withValueOnly = _this$state.withValueOnly,\n          searchTerm = _this$state.searchTerm,\n          displayTreeData = _this$state.displayTreeData,\n          isLoading = _this$state.isLoading;\n\n      var _this$props2 = this.props,\n          _this$props2$extended = _this$props2.extendedMapping,\n          extendedMapping = _this$props2$extended === void 0 ? [] : _this$props2$extended,\n          _this$props2$aggregat = _this$props2.aggregations,\n          aggregations = _this$props2$aggregat === void 0 ? {} : _this$props2$aggregat,\n          sqon = _this$props2.sqon,\n          statsConfig = _this$props2.statsConfig,\n          translateSQONValue = _this$props2.translateSQONValue,\n          _this$props2$onFacetN = _this$props2.onFacetNavigation,\n          onFacetNavigation = _this$props2$onFacetN === void 0 ? function () {} : _this$props2$onFacetN,\n          onTermSelected = _this$props2.onTermSelected,\n          onClear = _this$props2.onClear,\n          _this$props2$InputCom = _this$props2.InputComponent,\n          InputComponent = _this$props2$InputCom === void 0 ? _Input[\"default\"] : _this$props2$InputCom,\n          props = _objectWithoutProperties(_this$props2, [\"extendedMapping\", \"aggregations\", \"sqon\", \"statsConfig\", \"translateSQONValue\", \"onFacetNavigation\", \"onTermSelected\", \"onClear\", \"InputComponent\"]);\n\n      var scrollFacetViewToPath = function scrollFacetViewToPath(path) {\n        _this2.facetView.scrollToPath({\n          path: path\n        });\n\n        onFacetNavigation(path);\n      };\n\n      var visibleDisplayTreeData = withValueOnly ? (0, _utils.filterOutNonValue)({\n        extendedMapping: extendedMapping,\n        displayTreeData: displayTreeData,\n        aggregations: aggregations\n      }).displayTreeDataWithValue : displayTreeData;\n      return _react[\"default\"].createElement(\"div\", {\n        className: \"advancedFacetViewWrapper\"\n      }, displayTreeData && _react[\"default\"].createElement(_react[\"default\"].Fragment, null, _react[\"default\"].createElement(\"div\", null, _react[\"default\"].createElement(_CurrentSQON.CurrentSQON, _extends({\n        sqon: sqon,\n        extendedMapping: extendedMapping,\n        translateSQONValue: translateSQONValue,\n        onClear: onClear\n      }, {\n        setSQON: function setSQON(sqon) {\n          return _this2.handleSqonChange({\n            sqon: sqon\n          });\n        }\n      }))), _react[\"default\"].createElement(\"div\", {\n        className: \"facetViewWrapper\"\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"panel treeViewPanel\"\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"treeView\"\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"panelHeading\"\n      }, _react[\"default\"].createElement(\"span\", {\n        className: \"fieldsShown\"\n      }, withValueOnly ? (0, _lodash.keys)((0, _utils.filterOutNonValue)({\n        aggregations: aggregations\n      }).aggregationsWithValue).length : Object.keys(aggregations).length, ' ', \"fields\"), _react[\"default\"].createElement(\"span\", {\n        className: \"valueOnlyCheck\",\n        style: {\n          cursor: 'pointer'\n        },\n        onClick: function onClick() {\n          var _displayTreeData$;\n\n          return _this2.setState({\n            selectedPath: (_displayTreeData$ = displayTreeData[0]) === null || _displayTreeData$ === void 0 ? void 0 : _displayTreeData$.path,\n            withValueOnly: !withValueOnly\n          });\n        }\n      }, _react[\"default\"].createElement(\"input\", {\n        type: \"checkBox\",\n        checked: withValueOnly,\n        \"aria-label\": \"Show only fields with value\"\n      }), \"Show only fields with value\")), _react[\"default\"].createElement(_NestedTreeView[\"default\"], {\n        searchString: searchTerm,\n        defaultCollapsed: function defaultCollapsed(_ref4) {\n          var depth = _ref4.depth;\n          return depth !== 0;\n        },\n        shouldCollapse: function shouldCollapse() {\n          // if there's a searchTerm, expand everything. Else, don't control\n          return searchTerm && searchTerm.length ? false : undefined;\n        },\n        dataSource: visibleDisplayTreeData,\n        selectedPath: selectedPath,\n        onLeafSelect: function onLeafSelect(path) {\n          scrollFacetViewToPath(path);\n\n          _this2.setState({\n            selectedPath: path\n          });\n        }\n      }))), _react[\"default\"].createElement(\"div\", {\n        className: \"panel facetsPanel\"\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"panelHeading\"\n      }, _react[\"default\"].createElement(_reactComponentComponent[\"default\"], {\n        initialState: {\n          value: searchTerm || ''\n        }\n      }, function (_ref5) {\n        var value = _ref5.state.value,\n            setState = _ref5.setState;\n        return _react[\"default\"].createElement(InputComponent, {\n          icon: _react[\"default\"].createElement(_filter[\"default\"], null),\n          \"aria-label\": \"Data filter\",\n          rightIcon: _react[\"default\"].createElement(_timesCircleO[\"default\"], {\n            onClick: function onClick() {\n              setState({\n                value: null\n              }, function () {\n                _this2.setState({\n                  searchTerm: null\n                });\n              });\n            }\n          }),\n          className: \"filterInput\",\n          type: \"text\",\n          placeholder: \"Filter\",\n          value: value || '',\n          onChange: function onChange(_ref6) {\n            var value = _ref6.target.value;\n            setState({\n              value: value\n            }, function () {\n              _this2.setSearchTerm(value);\n            });\n          }\n        });\n      }), statsConfig && _react[\"default\"].createElement(\"div\", {\n        className:\n        /*#__PURE__*/\n\n        /*#__PURE__*/\n        (0, _emotion.css)(\"display:flex;flex:1;height:100%;\")\n      }, _react[\"default\"].createElement(_Stats[\"default\"], _extends({\n        small: true,\n        transparent: true\n      }, props, {\n        sqon: sqon\n      }, {\n        stats: statsConfig,\n        className:\n        /*#__PURE__*/\n\n        /*#__PURE__*/\n        (0, _emotion.css)(\"flex-grow:1;\")\n      })))), _react[\"default\"].createElement(\"div\", {\n        className: \"facets\"\n      }, _react[\"default\"].createElement(_FacetView[\"default\"], {\n        extendedMapping: extendedMapping,\n        constructEntryId: this.constructFilterId,\n        ref: function ref(view) {\n          return _this2.facetView = view;\n        },\n        sqon: sqon,\n        onValueChange: this.handleSqonChange,\n        aggregations: aggregations,\n        searchString: searchTerm,\n        displayTreeData: (0, _utils.filterDisplayTreeDataBySearchTerm)({\n          displayTree: visibleDisplayTreeData,\n          aggregations: aggregations,\n          searchTerm: searchTerm\n        }),\n        onTermSelected: onTermSelected\n      }))))), isLoading && _react[\"default\"].createElement(_LoadingScreen[\"default\"], null));\n    }\n  }]);\n\n  return AdvancedFacetView;\n}(_react[\"default\"].Component);\n\nexports[\"default\"] = AdvancedFacetView;","map":null,"metadata":{},"sourceType":"script"}