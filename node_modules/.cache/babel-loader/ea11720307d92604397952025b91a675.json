{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.esToColumnType = void 0;\n\nvar _lodash = require(\"lodash\");\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar esToColumnType = {\n  string: 'string',\n  object: 'string',\n  text: 'string',\n  \"boolean\": 'boolean',\n  date: 'date',\n  keyword: 'string',\n  id: 'string',\n  \"long\": 'number',\n  \"double\": 'number',\n  integer: 'number',\n  \"float\": 'number'\n};\nexports.esToColumnType = esToColumnType;\n\nvar appendDot = function appendDot(x) {\n  return x ? x + '.' : '';\n};\n\nvar mappingToColumnsType = function mappingToColumnsType(properties) {\n  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var isList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return (0, _lodash.flattenDeep)(Object.entries(properties).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        field = _ref2[0],\n        data = _ref2[1];\n\n    return !data.properties ? {\n      type: isList ? 'list' : esToColumnType[data.type],\n      field: \"\".concat(appendDot(parent) + field)\n    } : [mappingToColumnsType(data.properties, \"\".concat(appendDot(parent)).concat(data.type === 'nested' ? \"\".concat(appendDot(field), \"hits.edges[0].node\") : field), data.type === 'nested' || isList)].concat(_toConsumableArray(data.type === 'nested' ? [{\n      type: 'number',\n      field: \"\".concat(appendDot(parent)).concat(appendDot(field), \"hits.total\")\n    }] : []));\n  }));\n};\n\nvar _default = mappingToColumnsType;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}