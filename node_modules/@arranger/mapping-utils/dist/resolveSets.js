"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveSet = void 0;

var _lodash = require("lodash");

var _v = _interopRequireDefault(require("uuid/v4"));

var _middleware = require("@arranger/middleware");

var _esSearch = _interopRequireDefault(require("./utils/esSearch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var retrieveSetIds =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(_ref) {
    var es, index, query, path, sort, _ref$BULK_SIZE, BULK_SIZE, search, handleResult;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            es = _ref.es, index = _ref.index, query = _ref.query, path = _ref.path, sort = _ref.sort, _ref$BULK_SIZE = _ref.BULK_SIZE, BULK_SIZE = _ref$BULK_SIZE === void 0 ? 1000 : _ref$BULK_SIZE;

            search =
            /*#__PURE__*/
            function () {
              var _ref3 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee() {
                var _ref4,
                    searchAfter,
                    body,
                    response,
                    ids,
                    nextSearchAfter,
                    _args = arguments;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _ref4 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, searchAfter = _ref4.searchAfter;
                        body = _objectSpread({}, !(0, _lodash.isEmpty)(query) && {
                          query: query
                        }, {}, searchAfter && {
                          search_after: searchAfter
                        });
                        _context.next = 4;
                        return (0, _esSearch["default"])(es)({
                          index: index,
                          sort: sort.map(function (_ref5) {
                            var field = _ref5.field,
                                order = _ref5.order;
                            return "".concat(field, ":").concat(order || 'asc');
                          }),
                          size: BULK_SIZE,
                          body: body
                        });

                      case 4:
                        response = _context.sent;
                        ids = response.hits.hits.map(function (x) {
                          return (0, _lodash.get)(x, "_source.".concat(path.split('__').join('.')), x._id || '');
                        });
                        nextSearchAfter = sort.map(function (_ref6) {
                          var field = _ref6.field;
                          return response.hits.hits.map(function (x) {
                            return x._source[field] || x[field];
                          });
                        }).reduce(function (acc, vals) {
                          return [].concat(_toConsumableArray(acc), _toConsumableArray(vals.slice(-1)));
                        }, []);
                        return _context.abrupt("return", {
                          ids: ids,
                          searchAfter: nextSearchAfter,
                          total: response.hits.total.value
                        });

                      case 8:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function search() {
                return _ref3.apply(this, arguments);
              };
            }();

            handleResult =
            /*#__PURE__*/
            function () {
              var _ref8 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee2(_ref7) {
                var searchAfter, total, _ref7$ids, ids, _ref9, newIds, response;

                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        searchAfter = _ref7.searchAfter, total = _ref7.total, _ref7$ids = _ref7.ids, ids = _ref7$ids === void 0 ? [] : _ref7$ids;

                        if (!(ids.length === total)) {
                          _context2.next = 3;
                          break;
                        }

                        return _context2.abrupt("return", (0, _lodash.uniq)(ids));

                      case 3:
                        _context2.next = 5;
                        return search({
                          searchAfter: searchAfter
                        });

                      case 5:
                        _ref9 = _context2.sent;
                        newIds = _ref9.ids;
                        response = _objectWithoutProperties(_ref9, ["ids"]);
                        return _context2.abrupt("return", handleResult(_objectSpread({}, response, {
                          ids: [].concat(_toConsumableArray(ids), _toConsumableArray(newIds))
                        })));

                      case 9:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              return function handleResult(_x2) {
                return _ref8.apply(this, arguments);
              };
            }();

            _context3.t0 = handleResult;
            _context3.next = 6;
            return search();

          case 6:
            _context3.t1 = _context3.sent;
            return _context3.abrupt("return", (0, _context3.t0)(_context3.t1));

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function retrieveSetIds(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var saveSet = function saveSet(_ref10) {
  var types = _ref10.types;
  return (
    /*#__PURE__*/
    function () {
      var _ref13 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4(obj, _ref11, _ref12) {
        var type, userId, sqon, path, sort, _ref11$refresh, refresh, es, projectId, _types$find$, nestedFields, index, query, ids, body;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                type = _ref11.type, userId = _ref11.userId, sqon = _ref11.sqon, path = _ref11.path, sort = _ref11.sort, _ref11$refresh = _ref11.refresh, refresh = _ref11$refresh === void 0 ? 'WAIT_FOR' : _ref11$refresh;
                es = _ref12.es, projectId = _ref12.projectId;
                _types$find$ = types.find(function (_ref14) {
                  var _ref15 = _slicedToArray(_ref14, 2),
                      x = _ref15[1];

                  return x.name === type;
                })[1], nestedFields = _types$find$.nested_fields, index = _types$find$.index;
                query = (0, _middleware.buildQuery)({
                  nestedFields: nestedFields,
                  filters: sqon || {}
                });
                _context4.next = 6;
                return retrieveSetIds({
                  es: es,
                  index: index,
                  query: query,
                  path: path,
                  sort: sort && sort.length ? sort : [{
                    field: '_id',
                    order: 'asc'
                  }]
                });

              case 6:
                ids = _context4.sent;
                body = {
                  setId: (0, _v["default"])(),
                  createdAt: Date.now(),
                  ids: ids,
                  type: type,
                  path: path,
                  sqon: sqon,
                  userId: userId,
                  size: ids.length
                };
                _context4.next = 10;
                return es.index({
                  index: _middleware.CONSTANTS.ES_ARRANGER_SET_INDEX,
                  id: body.setId,
                  refresh: refresh.toLowerCase(),
                  body: body
                });

              case 10:
                return _context4.abrupt("return", body);

              case 11:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x3, _x4, _x5) {
        return _ref13.apply(this, arguments);
      };
    }()
  );
};

exports.saveSet = saveSet;