"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.esToColumnType = void 0;

var _lodash = require("lodash");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var esToColumnType = {
  string: 'string',
  object: 'string',
  text: 'string',
  "boolean": 'boolean',
  date: 'date',
  keyword: 'string',
  id: 'string',
  "long": 'number',
  "double": 'number',
  integer: 'number',
  "float": 'number'
};
exports.esToColumnType = esToColumnType;

var appendDot = function appendDot(x) {
  return x ? x + '.' : '';
};

var mappingToColumnsType = function mappingToColumnsType(properties) {
  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var isList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return (0, _lodash.flattenDeep)(Object.entries(properties).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        field = _ref2[0],
        data = _ref2[1];

    return !data.properties ? {
      type: isList ? 'list' : esToColumnType[data.type],
      field: "".concat(appendDot(parent) + field)
    } : [mappingToColumnsType(data.properties, "".concat(appendDot(parent)).concat(data.type === 'nested' ? "".concat(appendDot(field), "hits.edges[0].node") : field), data.type === 'nested' || isList)].concat(_toConsumableArray(data.type === 'nested' ? [{
      type: 'number',
      field: "".concat(appendDot(parent)).concat(appendDot(field), "hits.total")
    }] : []));
  }));
};

var _default = mappingToColumnsType;
exports["default"] = _default;