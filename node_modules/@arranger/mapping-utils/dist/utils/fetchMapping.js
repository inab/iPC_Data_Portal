"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchMapping = void 0;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fetchMapping =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(_ref) {
    var _aliases$find;

    var index, es, aliases, alias;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            index = _ref.index, es = _ref.es;
            _context.next = 3;
            return es.cat.aliases({
              format: 'json'
            });

          case 3:
            aliases = _context.sent.body;
            alias = aliases === null || aliases === void 0 ? void 0 : (_aliases$find = aliases.find(function (x) {
              return x.alias === index;
            })) === null || _aliases$find === void 0 ? void 0 : _aliases$find.index;
            return _context.abrupt("return", es.indices.getMapping({
              index: alias || index
            })["catch"](function (err) {
              // TODO: return something more useful than false
              return false;
            }).then(function (response) {
              var mapping = response.body;
              return {
                index: index,
                mapping: mapping,
                alias: alias
              };
            }));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fetchMapping(_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports.fetchMapping = fetchMapping;