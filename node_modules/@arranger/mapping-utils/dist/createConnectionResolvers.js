"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = require("lodash");

var _resolveAggregations = _interopRequireDefault(require("./resolveAggregations"));

var _resolveHits = _interopRequireDefault(require("./resolveHits"));

var _fetchMapping = require("./utils/fetchMapping");

var _loadExtendedFields = _interopRequireDefault(require("./utils/loadExtendedFields"));

var _esSearch = _interopRequireDefault(require("./utils/esSearch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var createConnectionResolvers = function createConnectionResolvers(_ref) {
  var type = _ref.type,
      indexPrefix = _ref.indexPrefix,
      _ref$createStateResol = _ref.createStateResolvers,
      createStateResolvers = _ref$createStateResol === void 0 ? true : _ref$createStateResol,
      Parallel = _ref.Parallel;
  return _defineProperty({}, type.name, _objectSpread({
    mapping: function () {
      var _mapping = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(obj, _ref2, _ref3) {
        var indices, es, projectId, index, esType, _ref4, esMapping, mappings;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                indices = _ref2.indices;
                es = _ref3.es, projectId = _ref3.projectId;
                index = type.index, esType = type.es_type;
                _context.next = 5;
                return (0, _fetchMapping.fetchMapping)({
                  index: index,
                  esType: esType,
                  es: es
                });

              case 5:
                _ref4 = _context.sent;
                esMapping = _ref4.mapping;
                mappings = esMapping[Object.keys(esMapping)[0]].mappings.properties;
                return _context.abrupt("return", mappings);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function mapping(_x, _x2, _x3) {
        return _mapping.apply(this, arguments);
      }

      return mapping;
    }(),
    extended: function () {
      var _extended = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2(obj, _ref5, _ref6) {
        var fields, es, projectId, index, extendedFields;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                fields = _ref5.fields;
                es = _ref6.es, projectId = _ref6.projectId;
                index = type.index;
                _context2.next = 5;
                return (0, _loadExtendedFields["default"])({
                  es: es,
                  projectId: projectId,
                  index: index
                });

              case 5:
                extendedFields = _context2.sent;
                return _context2.abrupt("return", fields ? extendedFields.filter(function (x) {
                  return fields.includes(x.field);
                }) : extendedFields);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function extended(_x4, _x5, _x6) {
        return _extended.apply(this, arguments);
      }

      return extended;
    }()
  }, createStateResolvers ? {
    aggsState: function () {
      var _aggsState = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3(obj, _ref7, _ref8) {
        var indices, es, projectId, index, esType, data, metaData, projectIndexData;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                indices = _ref7.indices;
                es = _ref8.es, projectId = _ref8.projectId;
                index = type.index, esType = type.es_type;
                _context3.prev = 3;
                _context3.next = 6;
                return (0, _esSearch["default"])(es)({
                  index: "".concat(type.indexPrefix, "-aggs-state"),
                  body: {
                    sort: [{
                      timestamp: {
                        order: 'desc'
                      }
                    }],
                    size: 1
                  }
                });

              case 6:
                data = _context3.sent;
                return _context3.abrupt("return", (0, _lodash.get)(data, 'hits.hits[0]._source', null));

              case 10:
                _context3.prev = 10;
                _context3.t0 = _context3["catch"](3);
                _context3.next = 14;
                return (0, _esSearch["default"])(es)({
                  index: "arranger-projects-".concat(projectId)
                });

              case 14:
                metaData = _context3.sent;
                projectIndexData = (0, _lodash.get)(metaData, 'hits.hits').find(function (_ref9) {
                  var _source = _ref9._source;
                  return _source.index === index && _source.esType === esType;
                })._source;
                return _context3.abrupt("return", projectIndexData.config['aggs-state']);

              case 17:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[3, 10]]);
      }));

      function aggsState(_x7, _x8, _x9) {
        return _aggsState.apply(this, arguments);
      }

      return aggsState;
    }(),
    columnsState: function () {
      var _columnsState = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4(obj, t, _ref10) {
        var es, projectId, index, esType, data, metaData, projectIndexData;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                es = _ref10.es, projectId = _ref10.projectId;
                index = type.index, esType = type.es_type;
                _context4.prev = 2;
                _context4.next = 5;
                return (0, _esSearch["default"])(es)({
                  index: "".concat(type.indexPrefix, "-columns-state"),
                  body: {
                    sort: [{
                      timestamp: {
                        order: 'desc'
                      }
                    }],
                    size: 1
                  }
                });

              case 5:
                data = _context4.sent;
                return _context4.abrupt("return", (0, _lodash.get)(data, 'hits.hits[0]._source', null));

              case 9:
                _context4.prev = 9;
                _context4.t0 = _context4["catch"](2);
                _context4.next = 13;
                return (0, _esSearch["default"])(es)({
                  index: "arranger-projects-".concat(projectId)
                });

              case 13:
                metaData = _context4.sent;
                projectIndexData = (0, _lodash.get)(metaData, 'hits.hits').find(function (_ref11) {
                  var _source = _ref11._source;
                  return _source.index === index && _source.esType === esType;
                })._source;
                return _context4.abrupt("return", projectIndexData.config['columns-state']);

              case 16:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[2, 9]]);
      }));

      function columnsState(_x10, _x11, _x12) {
        return _columnsState.apply(this, arguments);
      }

      return columnsState;
    }(),
    matchBoxState: function () {
      var _matchBoxState = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5(obj, t, _ref12) {
        var es, projectId, index, esType, data, metaData, projectIndexData;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                es = _ref12.es, projectId = _ref12.projectId;
                index = type.index, esType = type.es_type;
                _context5.prev = 2;
                _context5.next = 5;
                return (0, _esSearch["default"])(es)({
                  index: "".concat(type.indexPrefix, "-matchbox-state"),
                  body: {
                    sort: [{
                      timestamp: {
                        order: 'desc'
                      }
                    }],
                    size: 1
                  }
                });

              case 5:
                data = _context5.sent;
                return _context5.abrupt("return", (0, _lodash.get)(data, 'hits.hits[0]._source', null));

              case 9:
                _context5.prev = 9;
                _context5.t0 = _context5["catch"](2);
                _context5.next = 13;
                return (0, _esSearch["default"])(es)({
                  index: "arranger-projects-".concat(projectId)
                });

              case 13:
                metaData = _context5.sent;
                projectIndexData = (0, _lodash.get)(metaData, 'hits.hits').find(function (_ref13) {
                  var _source = _ref13._source;
                  return _source.index === index && _source.esType === esType;
                })._source;
                return _context5.abrupt("return", projectIndexData.config['matchbox-state']);

              case 16:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[2, 9]]);
      }));

      function matchBoxState(_x13, _x14, _x15) {
        return _matchBoxState.apply(this, arguments);
      }

      return matchBoxState;
    }()
  } : {}, {
    hits: (0, _resolveHits["default"])({
      type: type,
      Parallel: Parallel
    }),
    aggregations: (0, _resolveAggregations["default"])(type)
  }));
};

var _default = createConnectionResolvers;
exports["default"] = _default;