"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = require("lodash");

var _mappingToNestedFields = _interopRequireDefault(require("./mappingToNestedFields"));

var _mappingToScalarFields = _interopRequireDefault(require("./mappingToScalarFields"));

var _mappingToNestedTypes = _interopRequireDefault(require("./mappingToNestedTypes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var mappingToObjectTypes = function mappingToObjectTypes(type, mapping, parent, extendedFields) {
  return Object.entries(mapping).filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        metadata = _ref2[1];

    return !metadata.type && metadata.properties;
  }).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        field = _ref4[0],
        metadata = _ref4[1];

    return "\n        ".concat(mappingToObjectTypes(type + (0, _lodash.capitalize)(field), metadata.properties, [parent, field].filter(Boolean).join('.'), extendedFields), ",\n        ").concat((0, _mappingToNestedTypes["default"])(type + (0, _lodash.capitalize)(field), metadata.properties, [parent, field].filter(Boolean).join('.'), extendedFields).join('\n'), "\n        type ").concat(type + (0, _lodash.capitalize)(field), " {\n          ").concat((0, _mappingToNestedFields["default"])(type + (0, _lodash.capitalize)(field), metadata.properties, [parent, field].filter(Boolean).join('.'), extendedFields), "\n          ").concat((0, _mappingToScalarFields["default"])(metadata.properties, extendedFields, [parent, field].filter(Boolean).join('.')), "\n        }\n      ");
  });
}; // TODO: figure out where this is making a dupe fiel
// let mappingToObjectTypes = (type, mapping) => {
//   return Object.entries(mapping)
//     .filter(([, metadata]) => !metadata.type)
//     .map(
//       ([field, metadata]) => `
//         ${mappingToFields({
//           type: {
//             name: type.name + capitalize(field),
//             mapping: metadata.properties,
//           },
//         })}
//         type ${type + capitalize(field)} {
//           ${mappingToScalarFields(metadata.properties, type.extendedFields)}
//         }
//       `,
//     )
// }


var _default = mappingToObjectTypes;
exports["default"] = _default;