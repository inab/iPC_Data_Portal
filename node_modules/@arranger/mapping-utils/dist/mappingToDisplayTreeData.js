"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MOCK_MAPPING = {
  "boolean": {
    type: 'boolean'
  },
  children: {
    properties: {
      key: {
        type: 'text',
        fields: {
          keyword: {
            type: 'keyword',
            ignore_above: 256
          }
        }
      }
    }
  },
  "float": {
    type: 'float'
  },
  "int": {
    type: 'long'
  },
  stringarray: {
    type: 'text',
    fields: {
      keyword: {
        type: 'keyword',
        ignore_above: 256
      }
    }
  },
  text: {
    type: 'text',
    fields: {
      keyword: {
        type: 'keyword',
        ignore_above: 256
      }
    }
  }
};

var elasticMappingToDisplayTreeData = function elasticMappingToDisplayTreeData(elasticMapping, parentPath) {
  var mappingKeys = Object.keys(elasticMapping);
  return mappingKeys.map(function (key) {
    var fieldProps = elasticMapping[key];
    var currentPath = parentPath ? "".concat(parentPath, ".").concat(key) : "".concat(key);
    return _objectSpread({
      title: key,
      path: currentPath,
      id: "".concat(key)
    }, fieldProps.properties ? {
      children: elasticMappingToDisplayTreeData(fieldProps.properties, currentPath)
    } : {});
  });
};

var _default = {
  MOCK_MAPPING: MOCK_MAPPING,
  elasticMappingToDisplayTreeData: elasticMappingToDisplayTreeData
};
exports["default"] = _default;