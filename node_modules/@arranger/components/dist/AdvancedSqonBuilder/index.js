"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "resolveSyntheticSqon", {
  enumerable: true,
  get: function get() {
    return _utils.resolveSyntheticSqon;
  }
});
Object.defineProperty(exports, "removeSqonAtIndex", {
  enumerable: true,
  get: function get() {
    return _utils.removeSqonAtIndex;
  }
});
Object.defineProperty(exports, "duplicateSqonAtIndex", {
  enumerable: true,
  get: function get() {
    return _utils.duplicateSqonAtIndex;
  }
});
Object.defineProperty(exports, "isReference", {
  enumerable: true,
  get: function get() {
    return _utils.isReference;
  }
});
Object.defineProperty(exports, "isValueObj", {
  enumerable: true,
  get: function get() {
    return _utils.isValueObj;
  }
});
Object.defineProperty(exports, "isBooleanOp", {
  enumerable: true,
  get: function get() {
    return _utils.isBooleanOp;
  }
});
Object.defineProperty(exports, "isFieldOp", {
  enumerable: true,
  get: function get() {
    return _utils.isFieldOp;
  }
});
Object.defineProperty(exports, "isIndexReferencedInSqon", {
  enumerable: true,
  get: function get() {
    return _utils.isIndexReferencedInSqon;
  }
});
Object.defineProperty(exports, "getDependentIndices", {
  enumerable: true,
  get: function get() {
    return _utils.getDependentIndices;
  }
});
Object.defineProperty(exports, "FieldOpModifier", {
  enumerable: true,
  get: function get() {
    return _index.default;
  }
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = require("lodash");

var _reactComponentComponent = _interopRequireDefault(require("react-component-component"));

var _config = require("../utils/config");

var _SqonEntry = _interopRequireDefault(require("./SqonEntry"));

var _utils = require("./utils");

require("./style.css");

var _api = _interopRequireDefault(require("../utils/api"));

var _clone = _interopRequireDefault(require("react-icons/lib/fa/clone"));

var _plusCircle = _interopRequireDefault(require("react-icons/lib/fa/plus-circle"));

var _index = _interopRequireDefault(require("./filterComponents/index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var newEmptySqon = function newEmptySqon() {
  return {
    op: _utils.AND_OP,
    content: []
  };
};

var defaultSqonDeletionHandler = function defaultSqonDeletionHandler(_ref) {
  var indexToRemove = _ref.indexToRemove,
      dependentIndices = _ref.dependentIndices,
      s = _ref.internalStateContainer;
  return new Promise(function (resolve, reject) {
    s.setState({
      deletingIndex: indexToRemove,
      onSqonDeleteConfirmed: function onSqonDeleteConfirmed() {
        var _s$setState;

        s.setState((_s$setState = {
          deletingIndex: null
        }, _defineProperty(_s$setState, "deletingIndex", null), _defineProperty(_s$setState, "onSqonDeleteConfirmed", null), _s$setState));
        resolve();
      },
      onSqonDeleteCancel: function onSqonDeleteCancel() {
        var _s$setState2;

        s.setState((_s$setState2 = {
          deletingIndex: null
        }, _defineProperty(_s$setState2, "deletingIndex", null), _defineProperty(_s$setState2, "onSqonDeleteConfirmed", null), _s$setState2));
        reject();
      }
    });
  });
};

var AdvancedSqonBuilder = function AdvancedSqonBuilder(props) {
  var _props$arrangerProjec = props.arrangerProjectId,
      arrangerProjectId = _props$arrangerProjec === void 0 ? _config.PROJECT_ID : _props$arrangerProjec,
      arrangerProjectIndex = props.arrangerProjectIndex,
      _props$syntheticSqons = props.syntheticSqons,
      syntheticSqons = _props$syntheticSqons === void 0 ? [] : _props$syntheticSqons,
      _props$activeSqonInde = props.activeSqonIndex,
      currentActiveSqonIndex = _props$activeSqonInde === void 0 ? 0 : _props$activeSqonInde,
      _props$FieldOpModifie = props.FieldOpModifierContainer,
      FieldOpModifierContainer = _props$FieldOpModifie === void 0 ? undefined : _props$FieldOpModifie,
      _props$SqonActionComp = props.SqonActionComponent,
      SqonActionComponent = _props$SqonActionComp === void 0 ? function (_ref2) {
    var sqonIndex = _ref2.sqonIndex,
        isActive = _ref2.isActive,
        isSelected = _ref2.isSelected,
        isHoverring = _ref2.isHoverring;
    return null;
  } : _props$SqonActionComp,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function (_ref3) {
    var newSyntheticSqons = _ref3.newSyntheticSqons;
  } : _props$onChange,
      _props$onActiveSqonSe = props.onActiveSqonSelect,
      onActiveSqonSelect = _props$onActiveSqonSe === void 0 ? function (_ref4) {
    var index = _ref4.index;
  } : _props$onActiveSqonSe,
      _props$fieldDisplayNa = props.fieldDisplayNameMap,
      fieldDisplayNameMap = _props$fieldDisplayNa === void 0 ? {} : _props$fieldDisplayNa,
      _props$ButtonComponen = props.ButtonComponent,
      ButtonComponent = _props$ButtonComponen === void 0 ? function (_ref5) {
    var className = _ref5.className,
        rest = _objectWithoutProperties(_ref5, ["className"]);

    return _react.default.createElement("button", _extends({
      className: "button ".concat(className)
    }, rest));
  } : _props$ButtonComponen,
      _props$getSqonDeleteC = props.getSqonDeleteConfirmation,
      getSqonDeleteConfirmation = _props$getSqonDeleteC === void 0 ? defaultSqonDeletionHandler : _props$getSqonDeleteC,
      _props$api = props.api,
      api = _props$api === void 0 ? _api.default : _props$api,
      _props$referenceColor = props.referenceColors,
      referenceColors = _props$referenceColor === void 0 ? ['#cbeefb', '#fce8d3', '#eed5e9', '#cbebf1', '#f9d3d4', '#d5d7e9', '#fad9ea', '#f3ebd0'] : _props$referenceColor,
      _props$emptyEntryMess = props.emptyEntryMessage,
      emptyEntryMessage = _props$emptyEntryMess === void 0 ? null : _props$emptyEntryMess;
  /**
   * "initialState" is used in 'react-component-component', which provides a
   * layer of state container, named 's', which consists of:
   * {state, setState}
   */

  var initialState = {
    selectedSqonIndices: [],
    // the followings are to support defaultSqonDeletionHandler
    deletingIndex: null,
    onSqonDeleteConfirmed: null,
    onSqonDeleteCancel: null
  };
  var selectedSyntheticSqon = syntheticSqons[currentActiveSqonIndex];
  var allowsNewSqon = !syntheticSqons.some(_utils.isEmptySqon);

  var getColorForReference = function getColorForReference(referenceIndex) {
    return referenceColors[referenceIndex % referenceColors.length];
  };

  var isSqonReferenced = function isSqonReferenced(sqonIndex) {
    return (0, _utils.isIndexReferencedInSqon)(selectedSyntheticSqon)(sqonIndex);
  };

  var clearSqonDeletion = function clearSqonDeletion(s) {
    s.setState({
      deletingIndex: null,
      onSqonDeleteConfirmed: null,
      onSqonDeleteCancel: null
    });
  };

  var dispatchSqonListChange = function dispatchSqonListChange(s) {
    return function (_ref6) {
      var eventKey = _ref6.eventKey,
          newSqonList = _ref6.newSqonList,
          eventDetails = _ref6.eventDetails;
      clearSqonDeletion(s); // wraps in promise to delay to allow delaying to next frame

      return Promise.resolve(onChange({
        eventKey: eventKey,
        eventDetails: eventDetails,
        newSyntheticSqons: newSqonList
      }));
    };
  };

  var onSelectedSqonIndicesChange = function onSelectedSqonIndicesChange(s) {
    return function (index) {
      return function () {
        if (!s.state.selectedSqonIndices.includes(index) && !(0, _utils.isEmptySqon)(syntheticSqons[index])) {
          s.setState({
            selectedSqonIndices: [].concat(_toConsumableArray(s.state.selectedSqonIndices), [index]).sort()
          });
        } else {
          s.setState({
            selectedSqonIndices: s.state.selectedSqonIndices.filter(function (i) {
              return i !== index;
            })
          });
        }
      };
    };
  };

  var removeSqon = function removeSqon(s) {
    return function (indexToRemove) {
      onActiveSqonSelect({
        index: Math.max(Math.min(syntheticSqons.length - 2, indexToRemove), 0)
      });
      var sqonListWithIndexRemoved = (0, _utils.removeSqonAtIndex)(indexToRemove, syntheticSqons);
      return dispatchSqonListChange(s)({
        eventKey: 'SQON_REMOVED',
        eventDetails: {
          removedIndex: indexToRemove
        },
        newSqonList: sqonListWithIndexRemoved.length ? sqonListWithIndexRemoved : [newEmptySqon()]
      });
    };
  };

  var onSqonRemove = function onSqonRemove(s) {
    return function (indexToRemove) {
      return function () {
        return getSqonDeleteConfirmation({
          internalStateContainer: s,
          indexToRemove: indexToRemove,
          dependentIndices: (0, _utils.getDependentIndices)(syntheticSqons)(indexToRemove)
        }).then(function () {
          return removeSqon(s)(indexToRemove);
        }).catch(function () {});
      };
    };
  };

  var onSqonDuplicate = function onSqonDuplicate(s) {
    return function (indexToDuplicate) {
      return function () {
        dispatchSqonListChange(s)({
          eventKey: 'SQON_DUPLICATED',
          eventDetails: {
            duplicatedIndex: indexToDuplicate
          },
          newSqonList: [].concat(_toConsumableArray(syntheticSqons), [(0, _lodash.cloneDeep)(syntheticSqons[indexToDuplicate])])
        }).then(function () {
          return onActiveSqonSelect({
            index: syntheticSqons.length
          });
        });
      };
    };
  };

  var createUnionSqon = function createUnionSqon(s) {
    return function () {
      dispatchSqonListChange(s)({
        eventKey: 'NEW_UNION_COMBINATION',
        eventDetails: {
          referencedIndices: s.state.selectedSqonIndices
        },
        newSqonList: [].concat(_toConsumableArray(syntheticSqons), [{
          op: _utils.OR_OP,
          content: s.state.selectedSqonIndices
        }])
      }).then(function () {
        return onActiveSqonSelect({
          index: syntheticSqons.length
        });
      }).then(function () {
        s.setState({
          selectedSqonIndices: []
        });
        clearSqonDeletion(s);
      });
    };
  };

  var createIntersectSqon = function createIntersectSqon(s) {
    return function () {
      dispatchSqonListChange(s)({
        eventKey: 'NEW_INTERSECTION_COMBINATION',
        eventDetails: {
          referencedIndices: s.state.selectedSqonIndices
        },
        newSqonList: [].concat(_toConsumableArray(syntheticSqons), [{
          op: _utils.AND_OP,
          content: s.state.selectedSqonIndices
        }])
      }).then(function () {
        return onActiveSqonSelect({
          index: syntheticSqons.length
        });
      }).then(function () {
        s.setState({
          selectedSqonIndices: []
        });
        clearSqonDeletion(s);
      });
    };
  };

  var onNewQueryClick = function onNewQueryClick(s) {
    return function () {
      if (allowsNewSqon) {
        dispatchSqonListChange(s)({
          eventKey: 'NEW_SQON',
          eventDetails: {},
          newSqonList: [].concat(_toConsumableArray(syntheticSqons), [newEmptySqon()])
        }).then(function () {
          return onActiveSqonSelect({
            index: syntheticSqons.length
          });
        }).then(function () {
          s.setState({
            selectedSqonIndices: []
          });
          clearSqonDeletion(s);
        });
      }
    };
  };

  var onClearAllClick = function onClearAllClick(s) {
    return function () {
      dispatchSqonListChange(s)({
        eventKey: 'CLEAR_ALL',
        eventDetails: {},
        newSqonList: [newEmptySqon()]
      });
      s.setState({
        selectedSqonIndices: []
      });
      clearSqonDeletion(s);
      onActiveSqonSelect({
        index: 0
      });
    };
  };

  var onSqonEntryActivate = function onSqonEntryActivate(s) {
    return function (nextActiveSqonIndex) {
      return function () {
        if (nextActiveSqonIndex !== currentActiveSqonIndex) {
          onActiveSqonSelect({
            index: nextActiveSqonIndex
          });
        }
      };
    };
  };

  var onSqonChange = function onSqonChange(s) {
    return function (sqonIndex) {
      return function (newSqon) {
        dispatchSqonListChange(s)({
          eventKey: 'SQON_CHANGE',
          eventDetails: {
            updatedIndex: sqonIndex
          },
          newSqonList: syntheticSqons.map(function (sq, i) {
            return i === sqonIndex ? newSqon : sq;
          })
        });

        if (!newSqon.content.length) {
          removeSqon(s)(sqonIndex);
        }
      };
    };
  };

  var getActiveExecutableSqon = function getActiveExecutableSqon() {
    return (0, _utils.resolveSyntheticSqon)(syntheticSqons)(selectedSyntheticSqon);
  };

  return _react.default.createElement(_utils.DisplayNameMapContext.Provider, {
    value: fieldDisplayNameMap
  }, _react.default.createElement(_reactComponentComponent.default, {
    initialState: initialState
  }, function (s) {
    return _react.default.createElement("div", {
      className: "sqonBuilder"
    }, _react.default.createElement("div", {
      className: "actionHeaderContainer"
    }, _react.default.createElement("div", null, _react.default.createElement("span", null, "Combine Queries: "), _react.default.createElement("span", null, _react.default.createElement(ButtonComponent, {
      className: "and",
      disabled: !s.state.selectedSqonIndices.length,
      onClick: createIntersectSqon(s)
    }, "and"), _react.default.createElement(ButtonComponent, {
      className: "or",
      disabled: !s.state.selectedSqonIndices.length,
      onClick: createUnionSqon(s)
    }, "or"))), _react.default.createElement("div", null, _react.default.createElement(ButtonComponent, {
      onClick: onClearAllClick(s)
    }, "CLEAR ALL"))), syntheticSqons.map(function (sq, i) {
      return _react.default.createElement(_SqonEntry.default, {
        key: i,
        index: i,
        api: api,
        arrangerProjectId: arrangerProjectId,
        arrangerProjectIndex: arrangerProjectIndex,
        syntheticSqon: sq,
        isActiveSqon: i === currentActiveSqonIndex,
        isSelected: s.state.selectedSqonIndices.includes(i),
        isReferenced: isSqonReferenced(i),
        isIndexReferenced: (0, _utils.isIndexReferencedInSqon)(selectedSyntheticSqon),
        isDeleting: s.state.deletingIndex === i,
        disabled: (0, _utils.isEmptySqon)(sq),
        SqonActionComponent: SqonActionComponent,
        FieldOpModifierContainer: FieldOpModifierContainer,
        getActiveExecutableSqon: getActiveExecutableSqon,
        getColorForReference: getColorForReference,
        dependentIndices: (0, _utils.getDependentIndices)(syntheticSqons)(i),
        onSqonChange: onSqonChange(s)(i),
        onSqonCheckedChange: onSelectedSqonIndicesChange(s)(i),
        onSqonDuplicate: onSqonDuplicate(s)(i),
        onSqonRemove: onSqonRemove(s)(i),
        onActivate: onSqonEntryActivate(s)(i),
        onDeleteConfirmed: s.state.onSqonDeleteConfirmed || function () {},
        onDeleteCanceled: s.state.onSqonDeleteCancel || function () {},
        emptyEntryMessage: emptyEntryMessage
      });
    }), _react.default.createElement("div", null, _react.default.createElement("button", {
      className: "sqonListActionButton removeButton",
      disabled: !allowsNewSqon,
      onClick: onNewQueryClick(s)
    }, _react.default.createElement(_plusCircle.default, null), " ", "Start new query"), _react.default.createElement("button", {
      className: "sqonListActionButton duplicateButton",
      disabled: selectedSyntheticSqon ? !selectedSyntheticSqon.content.length : false,
      onClick: onSqonDuplicate(s)(currentActiveSqonIndex)
    }, _react.default.createElement(_clone.default, null), " ", "Duplicate Query")));
  }));
};

AdvancedSqonBuilder.propTypes = {
  arrangerProjectId: _propTypes.default.string,
  arrangerProjectIndex: _propTypes.default.string.isRequired,
  syntheticSqons: _propTypes.default.arrayOf(_propTypes.default.object),
  activeSqonIndex: _propTypes.default.number,
  FieldOpModifierContainer: _propTypes.default.any,
  SqonActionComponent: _propTypes.default.any,
  onChange: _propTypes.default.func,
  onActiveSqonSelect: _propTypes.default.func,
  fieldDisplayNameMap: _propTypes.default.objectOf(_propTypes.default.string),
  ButtonComponent: _propTypes.default.any,
  getSqonDeleteConfirmation: _propTypes.default.func,
  api: _propTypes.default.func,
  referenceColors: _propTypes.default.arrayOf(_propTypes.default.string),
  emptyEntryMessage: _propTypes.default.node
};
var _default = AdvancedSqonBuilder;
exports.default = _default;