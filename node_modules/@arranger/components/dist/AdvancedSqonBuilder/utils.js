"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DisplayNameMapContext = exports.setSqonAtPath = exports.getDependentIndices = exports.doesContainReference = exports.isIndexReferencedInSqon = exports.removeSqonPath = exports.getOperationAtPath = exports.duplicateSqonAtIndex = exports.removeSqonAtIndex = exports.resolveSyntheticSqon = exports.isFieldOp = exports.isBooleanOp = exports.isValueObj = exports.isReference = exports.isEmptySqon = exports.FIELD_OP_DISPLAY_NAME = exports.BOOLEAN_OPS = exports.NOT_OP = exports.OR_OP = exports.AND_OP = exports.TERM_OPS = exports.RANGE_OPS = exports.FIELD_OP = exports.ALL_OP = exports.NOT_IN_OP = exports.IN_OP = exports.LTE_OP = exports.GTE_OP = exports.BETWEEN_OP = exports.LT_OP = exports.GT_OP = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = require("lodash");

var _ramda = require("ramda");

var _FIELD_OP_DISPLAY_NAM;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * todo: these magic sqon values should be centralized across Arranger
 */
var GT_OP = '>';
exports.GT_OP = GT_OP;
var LT_OP = '<';
exports.LT_OP = LT_OP;
var BETWEEN_OP = 'between';
exports.BETWEEN_OP = BETWEEN_OP;
var GTE_OP = '>=';
exports.GTE_OP = GTE_OP;
var LTE_OP = '<=';
exports.LTE_OP = LTE_OP;
var IN_OP = 'in';
exports.IN_OP = IN_OP;
var NOT_IN_OP = 'not-in';
exports.NOT_IN_OP = NOT_IN_OP;
var ALL_OP = 'all';
exports.ALL_OP = ALL_OP;
var FIELD_OP = [GT_OP, LT_OP, BETWEEN_OP, GTE_OP, LTE_OP, IN_OP, NOT_IN_OP, ALL_OP];
exports.FIELD_OP = FIELD_OP;
var RANGE_OPS = [GT_OP, LT_OP, BETWEEN_OP, GTE_OP, LTE_OP];
exports.RANGE_OPS = RANGE_OPS;
var TERM_OPS = [IN_OP, ALL_OP, NOT_IN_OP];
exports.TERM_OPS = TERM_OPS;
var AND_OP = 'and';
exports.AND_OP = AND_OP;
var OR_OP = 'or';
exports.OR_OP = OR_OP;
var NOT_OP = 'not';
exports.NOT_OP = NOT_OP;
var BOOLEAN_OPS = [AND_OP, OR_OP, NOT_OP];
exports.BOOLEAN_OPS = BOOLEAN_OPS;
var FIELD_OP_DISPLAY_NAME = (_FIELD_OP_DISPLAY_NAM = {}, _defineProperty(_FIELD_OP_DISPLAY_NAM, IN_OP, 'any of'), _defineProperty(_FIELD_OP_DISPLAY_NAM, NOT_IN_OP, 'not'), _defineProperty(_FIELD_OP_DISPLAY_NAM, ALL_OP, 'all of'), _defineProperty(_FIELD_OP_DISPLAY_NAM, GTE_OP, 'greater than or equal to'), _defineProperty(_FIELD_OP_DISPLAY_NAM, LTE_OP, 'less than or equal to'), _defineProperty(_FIELD_OP_DISPLAY_NAM, LT_OP, 'less than'), _defineProperty(_FIELD_OP_DISPLAY_NAM, GT_OP, 'greater than'), _defineProperty(_FIELD_OP_DISPLAY_NAM, BETWEEN_OP, 'between'), _FIELD_OP_DISPLAY_NAM);
/**
 * Utilities for determining the type of sqon object
 */

exports.FIELD_OP_DISPLAY_NAME = FIELD_OP_DISPLAY_NAME;

var isEmptySqon = function isEmptySqon(sqonObj) {
  return !sqonObj ? true : BOOLEAN_OPS.includes(sqonObj.op) && !Boolean(sqonObj.content.length);
};

exports.isEmptySqon = isEmptySqon;

var isReference = function isReference(syntheticSqon) {
  return !isNaN(syntheticSqon);
};

exports.isReference = isReference;

var isValueObj = function isValueObj(sqonObj) {
  return _typeof(sqonObj) === 'object' && !isEmptySqon(sqonObj) && 'value' in sqonObj && 'field' in sqonObj;
};

exports.isValueObj = isValueObj;

var isBooleanOp = function isBooleanOp(sqonObj) {
  return _typeof(sqonObj) === 'object' && !isEmptySqon(sqonObj) && BOOLEAN_OPS.includes(sqonObj.op);
};

exports.isBooleanOp = isBooleanOp;

var isFieldOp = function isFieldOp(sqonObj) {
  return _typeof(sqonObj) === 'object' && !isEmptySqon(sqonObj) && FIELD_OP.includes(sqonObj.op);
};
/**
 * A synthetic sqon may look like: { "op": "and", "content": [1, 0, 2] }
 * where [1, 0, 2] is a list of index references to other sqons in a list
 * of given sqons. resolveSyntheticSqon resolves a synthetic sqon to an
 * executable sqon.
 **/


exports.isFieldOp = isFieldOp;

var resolveSyntheticSqon = function resolveSyntheticSqon(allSqons) {
  return function (syntheticSqon) {
    if (isEmptySqon(syntheticSqon)) {
      return syntheticSqon;
    } else if (isBooleanOp(syntheticSqon)) {
      return _objectSpread({}, syntheticSqon, {
        content: syntheticSqon.content.map(function (c) {
          return !isNaN(c) ? allSqons[c] : c;
        }).map(resolveSyntheticSqon(allSqons))
      });
    } else {
      return syntheticSqon;
    }
  };
};
/**
 * Non-mutative removal of the entry at "indexToRemove" from a list of
 * synthetic sqons "sqonList" and updates references.
 **/


exports.resolveSyntheticSqon = resolveSyntheticSqon;

var removeSqonAtIndex = function removeSqonAtIndex(indexToRemove, sqonList) {
  return sqonList.filter(function (s, i) {
    return i !== indexToRemove;
  }) // takes out the removed sqon
  .map(function (sqon) {
    return isEmptySqon(sqon) ? sqon : _objectSpread({}, sqon, {
      content: sqon.content.filter( // removes references
      function (content) {
        return content !== indexToRemove;
      }).map( // shifts references to indices greater than the removed one
      function (s) {
        return !isNaN(s) ? s > indexToRemove ? s - 1 : s : s;
      })
    });
  });
};
/**
 * Non-mutative duplication of the entry at "indexToRemove" from a list of
 * synthetic sqons "sqonList" and updates references.
 **/


exports.removeSqonAtIndex = removeSqonAtIndex;

var duplicateSqonAtIndex = function duplicateSqonAtIndex(indexToDuplicate, sqonList) {
  return [].concat(_toConsumableArray(sqonList.slice(0, indexToDuplicate)), [(0, _lodash.cloneDeep)(sqonList[indexToDuplicate])], _toConsumableArray(sqonList.slice(indexToDuplicate, sqonList.length))).map(function (sqon) {
    return isEmptySqon(sqon) ? sqon : _objectSpread({}, sqon, {
      content: sqon.content.map(function (s) {
        return !isNaN(s) ? s > indexToDuplicate ? s + 1 : s : s;
      })
    });
  });
};
/**
 * Paths are in the format [1, 3, 4, ...] where each number is a
 * "content" index of the obj of interest in the sqon tree.
 **/


exports.duplicateSqonAtIndex = duplicateSqonAtIndex;

var getOperationAtPath = function getOperationAtPath(paths) {
  return function (sqon) {
    var _paths = _toArray(paths),
        currentPath = _paths[0],
        rest = _paths.slice(1);

    return isBooleanOp(sqon) ? sqon.content.filter(function (c, i) {
      return i === currentPath;
    }).map(getOperationAtPath(rest))[0] : sqon;
  };
};
/**
 * Non-mutative removal of an object at location 'paths' in 'sqon', using lens (refer to https://ramdajs.com/docs/#lens)
 * @param {[Number]} paths
 * @param {*} sqon
 */


exports.getOperationAtPath = getOperationAtPath;

var removeSqonPath = function removeSqonPath(paths) {
  return function (sqon) {
    // creates the target lens
    var lensPath = (0, _lodash.flattenDeep)(paths.map(function (path) {
      return ['content', path];
    }));
    var targetLens = (0, _ramda.lensPath)(lensPath); // creates lens to the immediate parent of target

    var parentPath = (0, _lodash.flattenDeep)(paths.slice(0, paths.length - 1).map(function (path) {
      return ['content', path];
    }));
    var parentLens = (0, _ramda.lensPath)(parentPath); // get reference to target and its immediate parent

    var removeTarget = (0, _ramda.view)(targetLens, sqon);
    var parent = (0, _ramda.view)(parentLens, sqon); // returns the modified structure with removeTarget filtered out

    return (0, _ramda.set)(parentLens, _objectSpread({}, parent, {
      content: parent.content.filter(function (c) {
        return c !== removeTarget;
      })
    }), sqon);
  };
};

exports.removeSqonPath = removeSqonPath;

var isIndexReferencedInSqon = function isIndexReferencedInSqon(syntheticSqon) {
  return function (indexReference) {
    if (isBooleanOp(syntheticSqon)) {
      return syntheticSqon.content.reduce(function (acc, contentSqon) {
        return acc || isIndexReferencedInSqon(contentSqon)(indexReference);
      }, false);
    } else {
      return syntheticSqon === indexReference;
    }
  };
};

exports.isIndexReferencedInSqon = isIndexReferencedInSqon;

var doesContainReference = function doesContainReference(sqon) {
  if (isBooleanOp(sqon)) {
    return sqon.content.some(doesContainReference);
  } else {
    return isReference(sqon);
  }
};

exports.doesContainReference = doesContainReference;

var getDependentIndices = function getDependentIndices(syntheticSqons) {
  return function (index) {
    return syntheticSqons.reduce(function (acc, sq, i) {
      if (sq && isIndexReferencedInSqon(sq)(index)) {
        acc.push(i);
      }

      return acc;
    }, []);
  };
};

exports.getDependentIndices = getDependentIndices;

var setSqonAtPath = function setSqonAtPath(paths, newSqon) {
  return function (sqon) {
    var lensPath = (0, _lodash.flattenDeep)(paths.map(function (path) {
      return ['content', path];
    }));
    var targetLens = (0, _ramda.lensPath)(lensPath);
    return (0, _ramda.set)(targetLens, newSqon, sqon);
  };
};

exports.setSqonAtPath = setSqonAtPath;

var DisplayNameMapContext = _react["default"].createContext({});

exports.DisplayNameMapContext = DisplayNameMapContext;