"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactComponentComponent = _interopRequireDefault(require("react-component-component"));

var _chevronDown = _interopRequireDefault(require("react-icons/lib/fa/chevron-down"));

var _chevronUp = _interopRequireDefault(require("react-icons/lib/fa/chevron-up"));

var _utils = require("../utils");

var _FieldOp = _interopRequireDefault(require("./FieldOp"));

var _ClickAwayListener = _interopRequireDefault(require("../../utils/ClickAwayListener.js"));

var _common = require("./common");

var _config = require("../../utils/config");

var _api = _interopRequireDefault(require("../../utils/api"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var SqonReference = function SqonReference(props) {
  var refIndex = props.refIndex,
      _props$onRemoveClick = props.onRemoveClick,
      onRemoveClick = _props$onRemoveClick === void 0 ? function () {} : _props$onRemoveClick,
      highlightColor = props.highlightColor,
      isHighlighted = props.isHighlighted;
  return _react.default.createElement("span", {
    className: "sqonReference pill"
  }, _react.default.createElement("span", {
    className: 'content sqonReferenceIndex',
    style: !isHighlighted ? {} : {
      background: highlightColor
    }
  }, "#", refIndex + 1), _react.default.createElement(_common.PillRemoveButton, {
    onClick: onRemoveClick
  }));
};

var LogicalOpSelector = function LogicalOpSelector(props) {
  var opName = props.opName,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function (newOpName) {} : _props$onChange;
  var initialState = {
    isOpen: false
  };
  var selectionOptions = ['and', 'or'];

  var onClickAway = function onClickAway(s) {
    return function () {
      s.setState({
        isOpen: false
      });
    };
  };

  var onClick = function onClick(s) {
    return function () {
      return s.setState({
        isOpen: !s.state.isOpen
      });
    };
  };

  var onselect = function onselect(option) {
    return function () {
      return onChange(option);
    };
  };

  return _react.default.createElement(_reactComponentComponent.default, {
    initialState: initialState
  }, function (s) {
    return _react.default.createElement(_ClickAwayListener.default, {
      handler: onClickAway(s)
    }, _react.default.createElement("span", {
      className: "pill logicalOpSelector",
      role: "button",
      tabIndex: 0,
      onClick: onClick(s),
      onKeyPress: onClick(s)
    }, _react.default.createElement("span", {
      className: 'content',
      style: {
        pointerEvents: 'none'
      }
    }, _react.default.createElement("span", {
      className: 'opName'
    }, opName), ' ', s.state.isOpen ? _react.default.createElement(_chevronUp.default, null) : _react.default.createElement(_chevronDown.default, null)), s.state.isOpen && _react.default.createElement("div", {
      className: "menuContainer"
    }, selectionOptions.map(function (option) {
      return _react.default.createElement("div", {
        key: option,
        className: "menuOption",
        onClick: onselect(option),
        onKeyPress: onselect(option)
      }, option);
    }))));
  });
};
/**
 * BooleanOp handles nested sqons through recursive rendering.
 * This will be useful for supporting brackets later.
 */


var BooleanOp = function BooleanOp(props) {
  var _props$arrangerProjec = props.arrangerProjectId,
      arrangerProjectId = _props$arrangerProjec === void 0 ? _config.PROJECT_ID : _props$arrangerProjec,
      arrangerProjectIndex = props.arrangerProjectIndex,
      _props$contentPath = props.contentPath,
      contentPath = _props$contentPath === void 0 ? [] : _props$contentPath,
      _props$onFieldOpRemov = props.onFieldOpRemove,
      onFieldOpRemove = _props$onFieldOpRemov === void 0 ? function (path) {} : _props$onFieldOpRemov,
      _props$onChange2 = props.onChange,
      onChange = _props$onChange2 === void 0 ? function (changedPath, newOp) {} : _props$onChange2,
      sqon = props.sqon,
      _props$fullSyntheticS = props.fullSyntheticSqon,
      fullSyntheticSqon = _props$fullSyntheticS === void 0 ? sqon : _props$fullSyntheticS,
      _props$FieldOpModifie = props.FieldOpModifierContainer,
      FieldOpModifierContainer = _props$FieldOpModifie === void 0 ? undefined : _props$FieldOpModifie,
      _props$api = props.api,
      api = _props$api === void 0 ? _api.default : _props$api,
      getActiveExecutableSqon = props.getActiveExecutableSqon,
      _props$getColorForRef = props.getColorForReference,
      getColorForReference = _props$getColorForRef === void 0 ? function () {
    return '';
  } : _props$getColorForRef,
      _props$isIndexReferen = props.isIndexReferenced,
      isIndexReferenced = _props$isIndexReferen === void 0 ? function () {
    return false;
  } : _props$isIndexReferen,
      _props$referencesShou = props.referencesShouldHighlight,
      referencesShouldHighlight = _props$referencesShou === void 0 ? false : _props$referencesShou;
  var op = sqon.op,
      content = sqon.content;

  var onOpChange = function onOpChange(newOpName) {
    return onChange(contentPath, {
      op: newOpName,
      content: content
    });
  };

  var onNewSqonSubmit = function onNewSqonSubmit(newSqon) {
    return onChange([], newSqon);
  }; // FieldOp dispatches a full sqon on change


  var onRemove = function onRemove(path) {
    return function () {
      return onFieldOpRemove(path);
    };
  };

  return _react.default.createElement("span", {
    className: "booleanOp"
  }, content.map(function (c, i) {
    var currentPath = [].concat(_toConsumableArray(contentPath), [i]);
    return _react.default.createElement("span", {
      key: i
    }, (0, _utils.isBooleanOp)(c) ? _react.default.createElement("span", null, _react.default.createElement("span", {
      className: "nestedOpBracket"
    }, "("), _react.default.createElement(BooleanOp, _extends({}, props, {
      sqon: c,
      fullSyntheticSqon: fullSyntheticSqon,
      contentPath: currentPath
    })), _react.default.createElement("span", {
      className: "nestedOpBracket"
    }, ")")) : (0, _utils.isFieldOp)(c) ? _react.default.createElement("span", null, _react.default.createElement(_FieldOp.default, {
      arrangerProjectId: arrangerProjectId,
      arrangerProjectIndex: arrangerProjectIndex,
      sqonPath: currentPath,
      fullSyntheticSqon: fullSyntheticSqon,
      onContentRemove: onRemove(currentPath),
      onSqonChange: onNewSqonSubmit,
      FieldOpModifierContainer: FieldOpModifierContainer,
      api: api,
      getActiveExecutableSqon: getActiveExecutableSqon
    })) : (0, _utils.isReference)(c) ? _react.default.createElement(SqonReference, {
      refIndex: c,
      onRemoveClick: onRemove(currentPath),
      highlightColor: getColorForReference(c),
      isHighlighted: referencesShouldHighlight && isIndexReferenced(c)
    }) : (0, _utils.isEmptySqon)(c) ? _react.default.createElement("span", null, "empty sqon is not yet supported here") : null, i < content.length - 1 && _react.default.createElement(LogicalOpSelector, {
      opName: op,
      onChange: onOpChange
    }));
  }));
};

var _default = BooleanOp;
exports.default = _default;