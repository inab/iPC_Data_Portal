"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.decorateFieldWithColumnsState = void 0;

var _lodash = require("lodash");

var _recompose = require("recompose");

var _jsonpath = _interopRequireDefault(require("jsonpath/jsonpath.min"));

var _Query = require("../../Query");

var _splitString = _interopRequireDefault(require("../../utils/splitString"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isValidValue = function isValidValue(value) {
  var _value$trim;

  return (value === null || value === void 0 ? void 0 : (_value$trim = value.trim()) === null || _value$trim === void 0 ? void 0 : _value$trim.length) > 1;
};

var decorateFieldWithColumnsState = function decorateFieldWithColumnsState(_ref) {
  var _columnsState$columns;

  var columnsState = _ref.columnsState,
      field = _ref.field;
  var columnsStateField = columnsState === null || columnsState === void 0 ? void 0 : (_columnsState$columns = columnsState.columns) === null || _columnsState$columns === void 0 ? void 0 : _columnsState$columns.find(function (y) {
    return y.field === field;
  });
  return columnsStateField ? _objectSpread({}, columnsStateField, {
    gqlField: field.split('.').join('__'),
    query: columnsStateField.query || field,
    jsonPath: columnsStateField.jsonPath || "$.".concat(field)
  }) : {};
};

exports.decorateFieldWithColumnsState = decorateFieldWithColumnsState;

var isMatching = function isMatching(_ref2) {
  var _ref2$value = _ref2.value,
      value = _ref2$value === void 0 ? '' : _ref2$value,
      _ref2$searchText = _ref2.searchText,
      searchText = _ref2$searchText === void 0 ? '' : _ref2$searchText,
      _ref2$exact = _ref2.exact,
      exact = _ref2$exact === void 0 ? false : _ref2$exact;
  return exact ? value === searchText : value.toLowerCase().includes(searchText.toLowerCase());
};

var enhance = (0, _recompose.compose)((0, _recompose.withProps)(function (_ref3) {
  var exact = _ref3.exact,
      quickSearchFields = _ref3.quickSearchFields,
      searchTextDelimiters = _ref3.searchTextDelimiters,
      searchText = _ref3.searchText,
      _ref3$searchTextParts = _ref3.searchTextParts,
      searchTextParts = _ref3$searchTextParts === void 0 ? (0, _splitString["default"])({
    str: searchText,
    split: searchTextDelimiters
  }) : _ref3$searchTextParts;
  return {
    searchTextParts: searchTextParts,
    sqon: {
      op: 'or',
      content: exact ? quickSearchFields === null || quickSearchFields === void 0 ? void 0 : quickSearchFields.map(function (_ref4) {
        var field = _ref4.field;
        return {
          op: 'in',
          content: {
            field: field,
            value: searchTextParts
          }
        };
      }) : searchTextParts.map(function (x) {
        return {
          op: 'filter',
          content: {
            value: x,
            fields: quickSearchFields === null || quickSearchFields === void 0 ? void 0 : quickSearchFields.map(function (x) {
              return x.field;
            })
          }
        };
      })
    }
  };
}), (0, _Query.withQuery)(function (_ref5) {
  var _quickSearchFields$ma;

  var projectId = _ref5.projectId,
      index = _ref5.index,
      primaryKeyField = _ref5.primaryKeyField,
      quickSearchFields = _ref5.quickSearchFields,
      searchText = _ref5.searchText,
      searchTextParts = _ref5.searchTextParts,
      _ref5$size = _ref5.size,
      size = _ref5$size === void 0 ? 5 : _ref5$size,
      sqon = _ref5.sqon;
  return {
    debounceTime: 300,
    shouldFetch: isValidValue(searchText) && (quickSearchFields || []).length,
    projectId: projectId,
    key: 'rawSearchResults',
    query: "\n        query ".concat((0, _lodash.capitalize)(index), "QuickSearchResults($sqon: JSON, $size: Int) {\n          ").concat(index, " {\n            hits(filters: $sqon, first: $size) {\n              total\n              edges {\n                node {\n                  primaryKey: ").concat(primaryKeyField === null || primaryKeyField === void 0 ? void 0 : primaryKeyField.query, "\n                  ").concat(quickSearchFields === null || quickSearchFields === void 0 ? void 0 : (_quickSearchFields$ma = quickSearchFields.map(function (f) {
      return "".concat(f.gqlField, ": ").concat(f.query);
    })) === null || _quickSearchFields$ma === void 0 ? void 0 : _quickSearchFields$ma.join('\n'), "\n                }\n              }\n            }\n          }\n        }\n      "),
    variables: {
      size: size,
      sqon: sqon
    }
  };
}), (0, _recompose.withProps)(function (_ref6) {
  var _searchResultsByEntit;

  var index = _ref6.index,
      exact = _ref6.exact,
      searchText = _ref6.searchText,
      searchTextParts = _ref6.searchTextParts,
      primaryKeyField = _ref6.primaryKeyField,
      quickSearchFields = _ref6.quickSearchFields,
      _ref6$rawSearchResult = _ref6.rawSearchResults,
      data = _ref6$rawSearchResult.data,
      loading = _ref6$rawSearchResult.loading,
      _ref6$searchResultsBy = _ref6.searchResultsByEntity,
      searchResultsByEntity = _ref6$searchResultsBy === void 0 ? (quickSearchFields === null || quickSearchFields === void 0 ? void 0 : quickSearchFields.map(function (x) {
    var _data$index, _data$index$hits, _data$index$hits$edge, _data$index$hits$edge2;

    return _objectSpread({}, x, {
      results: data === null || data === void 0 ? void 0 : (_data$index = data[index]) === null || _data$index === void 0 ? void 0 : (_data$index$hits = _data$index.hits) === null || _data$index$hits === void 0 ? void 0 : (_data$index$hits$edge = _data$index$hits.edges) === null || _data$index$hits$edge === void 0 ? void 0 : (_data$index$hits$edge2 = _data$index$hits$edge.map(function (_ref7) {
        var node = _ref7.node,
            _ref7$primaryKey = _ref7.primaryKey,
            primaryKey = _ref7$primaryKey === void 0 ? _jsonpath["default"].query(_defineProperty({}, primaryKeyField.field.split('.')[0], node.primaryKey), primaryKeyField.jsonPath)[0] : _ref7$primaryKey,
            _ref7$result = _ref7.result,
            result = _ref7$result === void 0 ? _jsonpath["default"].query(_defineProperty({}, x.field.split('.')[0], node[x.gqlField]), x.jsonPath)[0] : _ref7$result;
        return _objectSpread({
          primaryKey: primaryKey,
          entityName: x.entityName
        }, searchTextParts.reduce(function (acc, part) {
          if ((0, _lodash.isArray)(result)) {
            var r = result.find(function (r) {
              return isMatching({
                value: r,
                searchText: part,
                exact: exact
              });
            });

            if (r) {
              return {
                input: part,
                result: r
              };
            }

            return acc;
          }

          if (isMatching({
            value: result,
            searchText: part,
            exact: exact
          })) {
            return {
              input: part,
              result: result
            };
          }

          return acc;
        }, {
          input: '',
          result: ''
        }));
      })) === null || _data$index$hits$edge2 === void 0 ? void 0 : _data$index$hits$edge2.filter(function (x) {
        return isValidValue(searchText) && x.input;
      })
    });
  })) || [] : _ref6$searchResultsBy;
  return {
    searchResultsByEntity: searchResultsByEntity,
    searchResultsLoading: loading,
    searchResults: (0, _lodash.flatMap)(searchResultsByEntity === null || searchResultsByEntity === void 0 ? void 0 : (_searchResultsByEntit = searchResultsByEntity.filter(function (x) {
      var _x$results;

      return x === null || x === void 0 ? void 0 : (_x$results = x.results) === null || _x$results === void 0 ? void 0 : _x$results.length;
    })) === null || _searchResultsByEntit === void 0 ? void 0 : _searchResultsByEntit.map(function (_ref8) {
      var entityName = _ref8.entityName,
          field = _ref8.field,
          results = _ref8.results;
      return results === null || results === void 0 ? void 0 : results.map(function (_ref9) {
        var input = _ref9.input,
            primaryKey = _ref9.primaryKey,
            result = _ref9.result;
        return {
          entityName: entityName,
          field: field,
          input: input,
          primaryKey: primaryKey,
          result: result
        };
      });
    }))
  };
}));

var QuickSearchQuery = function QuickSearchQuery(_ref10) {
  var render = _ref10.render,
      _ref10$mapResults = _ref10.mapResults,
      mapResults = _ref10$mapResults === void 0 ? function () {
    return {};
  } : _ref10$mapResults,
      sqon = _ref10.sqon,
      searchResults = _ref10.searchResults,
      searchResultsByEntity = _ref10.searchResultsByEntity,
      searchResultsLoading = _ref10.searchResultsLoading,
      searchTextParts = _ref10.searchTextParts,
      _ref10$props = _ref10.props,
      props = _ref10$props === void 0 ? {
    searchTextParts: searchTextParts,
    sqon: sqon,
    results: searchResults,
    resultsByEntity: searchResultsByEntity,
    loading: searchResultsLoading
  } : _ref10$props;
  return render(_objectSpread({}, props, {}, mapResults(props)));
};

var _default = enhance(QuickSearchQuery);

exports["default"] = _default;