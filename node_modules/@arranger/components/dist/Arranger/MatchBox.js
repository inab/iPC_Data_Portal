"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _recompose = require("recompose");

var _emotion = require("emotion");

var _Input = _interopRequireDefault(require("../Input"));

var _Tabs = _interopRequireWildcard(require("../Tabs"));

var _MatchBox = require("../MatchBox");

var _QuickSearchQuery = _interopRequireDefault(require("./QuickSearch/QuickSearchQuery"));

var _saveSet3 = _interopRequireDefault(require("../utils/saveSet"));

var _formatNumber = _interopRequireDefault(require("../utils/formatNumber"));

var _parseInputFiles = _interopRequireDefault(require("../utils/parseInputFiles"));

var _utils = require("../SQONView/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var layoutStyle =
/*#__PURE__*/
(0, _emotion.css)("&.match-box{display:flex;flex-direction:column;.match-box-results-table{display:flex;flex-direction:column;}.tabs{display:flex;flex-direction:column;}.tabs .tabs-content{display:flex;flex-direction:column;}.tabs .tabs-titles{display:block;}.tabs .tabs-titles .tabs-title{float:left;}}");
var enhance = (0, _recompose.compose)((0, _recompose.withState)('activeEntityField', 'setActiveEntityField', null), (0, _recompose.withState)('searchTextLoading', 'setSearchTextLoading', false), (0, _recompose.withState)('searchText', 'setSearchText', ''), (0, _recompose.withHandlers)({
  onEntityChange: function onEntityChange(_ref) {
    var setActiveEntityField = _ref.setActiveEntityField;
    return function (_ref2) {
      var value = _ref2.target.value;
      return setActiveEntityField(value);
    };
  },
  onTextChange: function onTextChange(_ref3) {
    var setSearchText = _ref3.setSearchText;
    return function (_ref4) {
      var value = _ref4.target.value;
      return setSearchText(value);
    };
  },
  onFileUpload: function onFileUpload(_ref5) {
    var setSearchText = _ref5.setSearchText,
        setSearchTextLoading = _ref5.setSearchTextLoading;
    return (
      /*#__PURE__*/
      function () {
        var _ref6 = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee(_ref7) {
          var files, contents;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  files = _ref7.target.files;
                  setSearchTextLoading(true);
                  _context.next = 4;
                  return (0, _parseInputFiles.default)({
                    files: files
                  });

                case 4:
                  contents = _context.sent;
                  setSearchText((contents || []).map(function (f) {
                    return f.content;
                  }).reduce(function (str, c) {
                    return "".concat(str).concat(c, "\n");
                  }, ""));
                  setSearchTextLoading(false);

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x) {
          return _ref6.apply(this, arguments);
        };
      }()
    );
  }
}));

var EntitySelectionSection = function EntitySelectionSection(_ref8) {
  var entitySelectText = _ref8.entitySelectText,
      onEntityChange = _ref8.onEntityChange,
      entitySelectPlaceholder = _ref8.entitySelectPlaceholder,
      activeFields = _ref8.activeFields,
      uploadableFields = _ref8.uploadableFields;
  return _react.default.createElement("div", {
    className: "match-box-select-entity-form"
  }, _react.default.createElement("div", {
    className: "match-box-entity-select-text"
  }, entitySelectText), _react.default.createElement("select", {
    onChange: onEntityChange
  }, _react.default.createElement("option", {
    value: null
  }, entitySelectPlaceholder), activeFields.filter(function (_ref9) {
    var field = _ref9.keyField.field;
    return uploadableFields ? uploadableFields.includes(field) : true;
  }).map(function (_ref10) {
    var field = _ref10.field,
        displayName = _ref10.displayName;
    return _react.default.createElement("option", {
      key: field,
      value: field
    }, (0, _lodash.capitalize)(displayName));
  })));
};

var inputRef = _react.default.createRef();

var MatchBox = function MatchBox(_ref11) {
  var sqon = _ref11.sqon,
      setSQON = _ref11.setSQON,
      matchHeaderText = _ref11.matchHeaderText,
      _ref11$instructionTex = _ref11.instructionText,
      instructionText = _ref11$instructionTex === void 0 ? "Type or copy-and-paste a list of comma delimited identifiers" : _ref11$instructionTex,
      _ref11$placeholderTex = _ref11.placeholderText,
      placeholderText = _ref11$placeholderTex === void 0 ? "e.g. Id\ne.g. Id" : _ref11$placeholderTex,
      _ref11$entitySelectTe = _ref11.entitySelectText,
      entitySelectText = _ref11$entitySelectTe === void 0 ? "Select the entity to upload" : _ref11$entitySelectTe,
      _ref11$entitySelectPl = _ref11.entitySelectPlaceholder,
      entitySelectPlaceholder = _ref11$entitySelectPl === void 0 ? "Select an Entity" : _ref11$entitySelectPl,
      _ref11$matchedTabTitl = _ref11.matchedTabTitle,
      matchedTabTitle = _ref11$matchedTabTitl === void 0 ? "Matched" : _ref11$matchedTabTitl,
      _ref11$unmatchedTabTi = _ref11.unmatchedTabTitle,
      unmatchedTabTitle = _ref11$unmatchedTabTi === void 0 ? "Unmatched" : _ref11$unmatchedTabTi,
      _ref11$matchTableColu = _ref11.matchTableColumnHeaders,
      matchTableColumnHeaders = _ref11$matchTableColu === void 0 ? {
    inputId: "Input Id",
    matchedEntity: "Matched Entity",
    entityId: "Entity Id"
  } : _ref11$matchTableColu,
      _ref11$browseButtonTe = _ref11.browseButtonText,
      browseButtonText = _ref11$browseButtonTe === void 0 ? "Browse" : _ref11$browseButtonTe,
      _ref11$ButtonComponen = _ref11.ButtonComponent,
      ButtonComponent = _ref11$ButtonComponen === void 0 ? 'button' : _ref11$ButtonComponen,
      _ref11$LoadingCompone = _ref11.LoadingComponent,
      LoadingComponent = _ref11$LoadingCompone === void 0 ? _react.default.createElement("div", null, "...") : _ref11$LoadingCompone,
      children = _ref11.children,
      searchText = _ref11.searchText,
      searchTextParts = _ref11.searchTextParts,
      searchTextLoading = _ref11.searchTextLoading,
      _ref11$uploadInstruct = _ref11.uploadInstructionText,
      uploadInstructionText = _ref11$uploadInstruct === void 0 ? 'Or choose file to upload' : _ref11$uploadInstruct,
      onTextChange = _ref11.onTextChange,
      onFileUpload = _ref11.onFileUpload,
      onEntityChange = _ref11.onEntityChange,
      activeEntityField = _ref11.activeEntityField,
      _ref11$uploadableFiel = _ref11.uploadableFields,
      uploadableFields = _ref11$uploadableFiel === void 0 ? null : _ref11$uploadableFiel,
      setActiveEntityField = _ref11.setActiveEntityField,
      props = _objectWithoutProperties(_ref11, ["sqon", "setSQON", "matchHeaderText", "instructionText", "placeholderText", "entitySelectText", "entitySelectPlaceholder", "matchedTabTitle", "unmatchedTabTitle", "matchTableColumnHeaders", "browseButtonText", "ButtonComponent", "LoadingComponent", "children", "searchText", "searchTextParts", "searchTextLoading", "uploadInstructionText", "onTextChange", "onFileUpload", "onEntityChange", "activeEntityField", "uploadableFields", "setActiveEntityField"]);

  var selectableEntityType = !(uploadableFields && (uploadableFields || []).length === 1);
  return _react.default.createElement("div", {
    className: "match-box ".concat(layoutStyle)
  }, _react.default.createElement(_MatchBox.MatchBoxState, _extends({}, props, {
    onInitialLoaded: function onInitialLoaded(_ref12) {
      var activeFields = _ref12.activeFields;

      if (!selectableEntityType) {
        var activeFieldToSet = activeFields.find(function (_ref13) {
          var field = _ref13.keyField.field;
          return uploadableFields[0] === field;
        });

        if (activeFieldToSet) {
          setActiveEntityField(activeFieldToSet.field);
        } else {
          throw new Error("no no active field found by the path ".concat(uploadableFields[0]));
        }
      }
    },
    render: function render(_ref14) {
      var primaryKeyField = _ref14.primaryKeyField,
          activeFields = _ref14.activeFields,
          _ref14$activeField = _ref14.activeField,
          activeField = _ref14$activeField === void 0 ? activeFields.find(function (x) {
        return x.field === activeEntityField;
      }) : _ref14$activeField;
      return _react.default.createElement(_react.Fragment, null, !selectableEntityType ? null : _react.default.createElement(EntitySelectionSection, {
        entitySelectText: entitySelectText,
        onEntityChange: onEntityChange,
        entitySelectPlaceholder: entitySelectPlaceholder,
        activeFields: activeFields,
        uploadableFields: uploadableFields
      }), _react.default.createElement("div", {
        className: "match-box-id-form"
      }, _react.default.createElement("div", {
        className: "match-box-selection-text"
      }, instructionText), _react.default.createElement(_Input.default, {
        disabled: !activeField,
        Component: "textarea",
        placeholder: placeholderText,
        value: searchText,
        onChange: onTextChange,
        "aria-label": "Match box"
      }), _react.default.createElement("div", {
        className: "match-box-upload-instruction-text"
      }, uploadInstructionText), _react.default.createElement("div", {
        className:
        /*#__PURE__*/

        /*#__PURE__*/
        (0, _emotion.css)("display:flex;")
      }, _react.default.createElement("input", {
        type: "file",
        className:
        /*#__PURE__*/

        /*#__PURE__*/
        (0, _emotion.css)("position:absolute;top:-10000px;left:0px;"),
        "aria-label": "File upload",
        accept: ".tsv,.csv,text/*",
        ref: inputRef,
        multiple: true,
        onChange: onFileUpload
      }), _react.default.createElement(ButtonComponent, {
        disabled: !activeField,
        type: "submit",
        onClick: function onClick() {
          return inputRef.current.click();
        }
      }, searchTextLoading ? LoadingComponent : browseButtonText))), _react.default.createElement(_QuickSearchQuery.default, _extends({
        exact: true,
        size: 9999999 // TODO: pagination - this will currently choke on large input

      }, props, {
        searchText: searchText,
        primaryKeyField: activeField === null || activeField === void 0 ? void 0 : activeField.keyField,
        quickSearchFields: activeField === null || activeField === void 0 ? void 0 : activeField.searchFields,
        mapResults: function mapResults(_ref15) {
          var results = _ref15.results,
              searchTextParts = _ref15.searchTextParts;
          return {
            results: (0, _lodash.uniqBy)(results, 'primaryKey'),
            unmatchedKeys: (0, _lodash.difference)(searchTextParts, results.map(function (x) {
              return x.input;
            }))
          };
        },
        render: function render(_ref16) {
          var results = _ref16.results,
              unmatchedKeys = _ref16.unmatchedKeys,
              quickSearchSqon = _ref16.sqon;
          return _react.default.createElement("div", {
            className: "match-box-results-table"
          }, !!searchText.length && _react.default.createElement(_react.Fragment, null, matchHeaderText, _react.default.createElement(_Tabs.default, {
            tabs: [{
              key: 'matched',
              title: "".concat(matchedTabTitle, " (").concat((0, _formatNumber.default)(results.length), ")"),
              content: _react.default.createElement(_Tabs.TabsTable, {
                columns: ['inputId', 'matchedEntity', 'entityId'].map(function (x) {
                  return {
                    Header: matchTableColumnHeaders[x],
                    accessor: x
                  };
                }),
                data: results.length ? results.map(function (_ref17) {
                  var input = _ref17.input,
                      entityName = _ref17.entityName,
                      primaryKey = _ref17.primaryKey;
                  return {
                    inputId: input,
                    matchedEntity: entityName,
                    entityId: primaryKey
                  };
                }) : [{
                  inputId: '',
                  matchedEntity: '',
                  entityId: ''
                }]
              })
            }, {
              key: 'unmatched',
              title: "".concat(unmatchedTabTitle, " (").concat((0, _formatNumber.default)(unmatchedKeys.length), ")"),
              content: _react.default.createElement(_Tabs.TabsTable, {
                columns: [{
                  Header: matchTableColumnHeaders.inputId,
                  accessor: 'inputId'
                }],
                data: (unmatchedKeys === null || unmatchedKeys === void 0 ? void 0 : unmatchedKeys.length) ? unmatchedKeys.map(function (x) {
                  return {
                    inputId: x
                  };
                }) : [{
                  inputId: ''
                }]
              })
            }]
          })), children({
            hasResults: results === null || results === void 0 ? void 0 : results.length,
            saveSet: function () {
              var _saveSet2 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee2(_ref18) {
                var userId, api, _ref18$dataPath, dataPath, data, nextSQON;

                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        userId = _ref18.userId, api = _ref18.api, _ref18$dataPath = _ref18.dataPath, dataPath = _ref18$dataPath === void 0 ? 'data.data.saveSet' : _ref18$dataPath;
                        _context2.t0 = _lodash.get;
                        _context2.next = 4;
                        return (0, _saveSet3.default)({
                          sqon: quickSearchSqon,
                          type: props.graphqlField,
                          userId: userId,
                          path: primaryKeyField.field,
                          api: api
                        });

                      case 4:
                        _context2.t1 = _context2.sent;
                        _context2.t2 = dataPath;
                        data = (0, _context2.t0)(_context2.t1, _context2.t2);
                        nextSQON = (0, _utils.toggleSQON)({
                          op: 'and',
                          content: [{
                            op: 'in',
                            content: {
                              field: primaryKeyField === null || primaryKeyField === void 0 ? void 0 : primaryKeyField.field,
                              value: ["set_id:".concat(data.setId)]
                            }
                          }]
                        }, sqon);
                        setSQON === null || setSQON === void 0 ? void 0 : setSQON(nextSQON);
                        return _context2.abrupt("return", _objectSpread({}, data, {
                          nextSQON: nextSQON
                        }));

                      case 10:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              function saveSet(_x2) {
                return _saveSet2.apply(this, arguments);
              }

              return saveSet;
            }()
          }));
        }
      })));
    }
  })));
};

var _default = enhance(MatchBox);

exports.default = _default;