"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _DataTable = _interopRequireWildcard(require("../DataTable"));

var _reactSpinkit = _interopRequireDefault(require("react-spinkit"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Table = function Table(_ref) {
  var _ref$onFilterChange = _ref.onFilterChange,
      _onFilterChange = _ref$onFilterChange === void 0 ? function () {} : _ref$onFilterChange,
      projectId = _ref.projectId,
      graphqlField = _ref.graphqlField,
      fetchData = _ref.fetchData,
      setSQON = _ref.setSQON,
      sqon = _ref.sqon,
      _ref$fieldTypesForFil = _ref.fieldTypesForFilter,
      fieldTypesForFilter = _ref$fieldTypesForFil === void 0 ? ['text', 'keyword'] : _ref$fieldTypesForFil,
      api = _ref.api,
      InputComponent = _ref.InputComponent,
      _ref$showFilterInput = _ref.showFilterInput,
      showFilterInput = _ref$showFilterInput === void 0 ? true : _ref$showFilterInput,
      _ref$customHeaderCont = _ref.customHeaderContent,
      customHeaderContent = _ref$customHeaderCont === void 0 ? null : _ref$customHeaderCont,
      props = _objectWithoutProperties(_ref, ["onFilterChange", "projectId", "graphqlField", "fetchData", "setSQON", "sqon", "fieldTypesForFilter", "api", "InputComponent", "showFilterInput", "customHeaderContent"]);

  return _react["default"].createElement(_DataTable.ColumnsState, {
    projectId: projectId,
    graphqlField: graphqlField,
    api: api,
    render: function render(columnState) {
      return columnState.loading ? _react["default"].createElement(_reactSpinkit["default"], {
        fadeIn: "full",
        name: "circle"
      }) : _react["default"].createElement(_DataTable["default"], _extends({}, _objectSpread({}, props, {
        api: api,
        showFilterInput: showFilterInput,
        customHeaderContent: customHeaderContent
      }), {
        InputComponent: InputComponent,
        projectId: projectId,
        sqon: sqon,
        config: _objectSpread({}, columnState.state, {
          type: graphqlField
        }),
        fetchData: fetchData(projectId),
        onColumnsChange: columnState.toggle,
        onFilterChange: function onFilterChange(_ref2) {
          var generateNextSQON = _ref2.generateNextSQON,
              value = _ref2.value;

          _onFilterChange(value);

          setSQON(generateNextSQON({
            sqon: sqon,
            fields: columnState.state.columns.filter(function (x) {
              return fieldTypesForFilter.includes(x.extendedType) && x.show;
            }).map(function (x) {
              return x.field;
            })
          }));
        }
      }));
    }
  });
};

var _default = Table;
exports["default"] = _default;