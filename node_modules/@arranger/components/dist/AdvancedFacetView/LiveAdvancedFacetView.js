"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _mappingUtils = require("@arranger/mapping-utils");

var _ = _interopRequireDefault(require("./"));

var _lodash = require("lodash");

var _api = _interopRequireDefault(require("../utils/api"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fetchGraphqlQuery =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(_ref) {
    var query, projectId, _ref$variables, variables, _ref$api, api;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            query = _ref.query, projectId = _ref.projectId, _ref$variables = _ref.variables, variables = _ref$variables === void 0 ? null : _ref$variables, _ref$api = _ref.api, api = _ref$api === void 0 ? _api["default"] : _ref$api;
            return _context.abrupt("return", api({
              endpoint: "/".concat(projectId, "/graphql"),
              body: {
                query: query,
                variables: variables
              }
            }).then(function (data) {
              return data.data;
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fetchGraphqlQuery(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var fetchMappingData =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(fetchConfig) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", fetchGraphqlQuery(_objectSpread({
              query: "{\n      ".concat(fetchConfig.index, " {\n        mapping,\n        extended,\n        aggsState {\n          state {\n            field, active\n          }\n        }\n      }\n    }")
            }, fetchConfig)).then(function (data) {
              return data[fetchConfig.index];
            }));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function fetchMappingData(_x2) {
    return _ref3.apply(this, arguments);
  };
}();

var fetchAggregationData =
/*#__PURE__*/
function () {
  var _ref5 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(_ref4) {
    var sqon, extended, projectId, index, api, fetchConfig, serializeToGraphQl, serializeToPath, allAggsNames, getAggregationQuery, query;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            sqon = _ref4.sqon, extended = _ref4.extended, projectId = _ref4.projectId, index = _ref4.index, api = _ref4.api;
            fetchConfig = {
              projectId: projectId,
              index: index,
              api: api
            };

            serializeToGraphQl = function serializeToGraphQl(aggName) {
              return aggName.split('.').join('__');
            };

            serializeToPath = function serializeToPath(aggName) {
              return aggName.split('__').join('.');
            };

            allAggsNames = extended.map(function (entry) {
              return entry.field;
            }).map(serializeToGraphQl);

            getAggregationQuery = function getAggregationQuery() {
              return allAggsNames.map(function (aggName) {
                var aggType = extended.find(function (entry) {
                  return serializeToGraphQl(entry.field) === aggName;
                }).type;
                return "\n          ".concat(aggName, " {\n            ").concat(_mappingUtils.esToAggTypeMap[aggType] === 'Aggregations' ? "buckets { key key_as_string doc_count }" : "stats { max min avg sum }", "\n          }");
              }).join('');
            };

            query = "\n    query ($sqon: JSON){\n      ".concat(index, " {\n        aggregations (\n          aggregations_filter_themselves: false\n          filters: $sqon\n        ) { ").concat(getAggregationQuery(), " }\n      }\n    }");
            return _context3.abrupt("return", fetchGraphqlQuery(_objectSpread({
              query: query,
              variables: {
                sqon: sqon
              }
            }, fetchConfig)).then(function (data) {
              return {
                aggregations: Object.keys(data[index].aggregations || {}).reduce(function (agg, key) {
                  return _objectSpread({}, agg, _defineProperty({}, serializeToPath(key), data[index].aggregations[key]));
                }, {})
              };
            }));

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function fetchAggregationData(_x3) {
    return _ref5.apply(this, arguments);
  };
}();

var removeFieldTypesFromMapping = function removeFieldTypesFromMapping(_ref6) {
  var mapping = _ref6.mapping,
      extended = _ref6.extended,
      _ref6$parentField = _ref6.parentField,
      parentField = _ref6$parentField === void 0 ? null : _ref6$parentField,
      _ref6$fieldTypesToExc = _ref6.fieldTypesToExclude,
      fieldTypesToExclude = _ref6$fieldTypesToExc === void 0 ? [] : _ref6$fieldTypesToExc;

  var output = _objectSpread({}, Object.entries(mapping).reduce(function (acc, _ref7) {
    var _ref8 = _slicedToArray(_ref7, 2),
        key = _ref8[0],
        val = _ref8[1];

    var currentField = "".concat(parentField ? "".concat(parentField, ".") : '').concat(key);
    var isId = fieldTypesToExclude.some(function (type) {
      var _extended$find;

      return type === ((_extended$find = extended.find(function (ex) {
        return ex.field === currentField;
      })) === null || _extended$find === void 0 ? void 0 : _extended$find.type);
    });
    var toSpread = !isId ? _objectSpread({}, val.properties ? _defineProperty({}, key, _objectSpread({}, val, {
      properties: removeFieldTypesFromMapping({
        mapping: val.properties,
        extended: extended,
        parentField: currentField,
        fieldTypesToExclude: fieldTypesToExclude
      })
    })) : _defineProperty({}, key, val)) : {};
    return _objectSpread({}, acc, {}, toSpread);
  }, {}));

  return output;
};

var defaultFieldTypesToExclude = ['id', 'text'];

var LiveAdvancedFacetView =
/*#__PURE__*/
function (_React$Component) {
  _inherits(LiveAdvancedFacetView, _React$Component);

  function LiveAdvancedFacetView(props) {
    var _this;

    _classCallCheck(this, LiveAdvancedFacetView);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LiveAdvancedFacetView).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "filterExtendedForFetchingAggs", function (_ref11) {
      var extended = _ref11.extended,
          aggsState = _ref11.aggsState;
      return extended.filter(function (e) {
        var _aggsState$state$find;

        return !_this.blackListedAggTypes.includes(e.type) && ((_aggsState$state$find = aggsState.state.find(function (s) {
          return s.field.split('__').join('.') === e.field;
        })) === null || _aggsState$state$find === void 0 ? void 0 : _aggsState$state$find.active);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onSqonFieldChange", function (_ref12) {
      var sqon = _ref12.sqon;
      var _this$props$onSqonCha = _this.props.onSqonChange,
          onSqonChange = _this$props$onSqonCha === void 0 ? function () {} : _this$props$onSqonCha;
      var aggsState = _this.state.aggsState;
      fetchAggregationData(_objectSpread({}, _this.props, {
        extended: _this.filterExtendedForFetchingAggs({
          extended: _this.state.extended,
          aggsState: aggsState
        }),
        sqon: sqon
      })).then(function (_ref13) {
        var aggregations = _ref13.aggregations;
        return _this.setState({
          sqon: sqon,
          aggregations: aggregations
        }, function () {
          return onSqonChange({
            sqon: sqon
          });
        });
      });
    });

    var _sqon = props.sqon,
        _props$fieldTypesToEx = props.fieldTypesToExclude,
        fieldTypesToExclude = _props$fieldTypesToEx === void 0 ? defaultFieldTypesToExclude : _props$fieldTypesToEx;
    _this.state = {
      mapping: {},
      extended: [],
      aggsState: {},
      aggregations: null,
      sqon: _sqon || null
    };
    _this.blackListedAggTypes = ['object', 'nested'].concat(fieldTypesToExclude);
    return _this;
  }

  _createClass(LiveAdvancedFacetView, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          projectId = _this$props.projectId,
          index = _this$props.index,
          api = _this$props.api;
      var sqon = this.state.sqon;
      var fetchConfig = {
        projectId: projectId,
        index: index,
        sqon: sqon,
        api: api
      };
      fetchMappingData(fetchConfig).then(function (_ref14) {
        var extended = _ref14.extended,
            mapping = _ref14.mapping,
            aggsState = _ref14.aggsState;
        return fetchAggregationData(_objectSpread({
          extended: _this2.filterExtendedForFetchingAggs({
            extended: extended,
            aggsState: aggsState
          })
        }, fetchConfig)).then(function (_ref15) {
          var aggregations = _ref15.aggregations;
          var _this2$props$fieldTyp = _this2.props.fieldTypesToExclude,
              fieldTypesToExclude = _this2$props$fieldTyp === void 0 ? defaultFieldTypesToExclude : _this2$props$fieldTyp;

          _this2.setState({
            mapping: removeFieldTypesFromMapping({
              mapping: mapping,
              extended: extended,
              fieldTypesToExclude: fieldTypesToExclude
            }),
            aggsState: aggsState,
            extended: extended,
            aggregations: aggregations
          });
        });
      });
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(_ref16) {
      var sqon = _ref16.sqon;

      if (!(0, _lodash.isEqual)(sqon, this.state.sqon)) {
        this.setState({
          sqon: sqon
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          _this$props2$fieldTyp = _this$props2.fieldTypesToExclude,
          fieldTypesToExclude = _this$props2$fieldTyp === void 0 ? defaultFieldTypesToExclude : _this$props2$fieldTyp,
          props = _objectWithoutProperties(_this$props2, ["fieldTypesToExclude"]);

      return _react["default"].createElement(_["default"], _extends({}, props, {
        rootTypeName: props.graphqlField,
        elasticMapping: this.state.mapping,
        extendedMapping: this.state.extended.filter(function (ex) {
          return !fieldTypesToExclude.some(function (type) {
            return ex.type === type;
          });
        }),
        aggregations: this.state.aggregations,
        onSqonFieldChange: this.onSqonFieldChange,
        sqon: this.state.sqon
      }));
    }
  }]);

  return LiveAdvancedFacetView;
}(_react["default"].Component);

exports["default"] = LiveAdvancedFacetView;