"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = require("lodash");

var _emotion = require("emotion");

var _reactComponentComponent = _interopRequireDefault(require("react-component-component"));

var _timesCircleO = _interopRequireDefault(require("react-icons/lib/fa/times-circle-o"));

var _filter = _interopRequireDefault(require("react-icons/lib/fa/filter"));

var _NestedTreeView = _interopRequireDefault(require("../NestedTreeView"));

var _CurrentSQON = require("../Arranger/CurrentSQON");

var _FacetView = _interopRequireDefault(require("./FacetView"));

var _Input = _interopRequireDefault(require("../Input"));

var _LoadingScreen = _interopRequireDefault(require("../LoadingScreen"));

var _Stats = _interopRequireDefault(require("../Stats"));

var _utils = require("./utils");

require("./AdvancedFacetView.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var AdvancedFacetView =
/*#__PURE__*/
function (_React$Component) {
  _inherits(AdvancedFacetView, _React$Component);

  function AdvancedFacetView(props) {
    var _this;

    _classCallCheck(this, AdvancedFacetView);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdvancedFacetView).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "fieldMappingFromPath", function (path) {
      var _this$props$elasticMa = _this.props.elasticMapping,
          elasticMapping = _this$props$elasticMa === void 0 ? {} : _this$props$elasticMa;
      return path.split('.').reduce(function (parentNode, nextPath) {
        return parentNode[nextPath] ? parentNode[nextPath] : parentNode.properties ? parentNode.properties[nextPath] : {};
      }, elasticMapping) || {};
    });

    _defineProperty(_assertThisInitialized(_this), "constructFilterId", function (_ref) {
      var field = _ref.field,
          value = _ref.value;
      return value ? "".concat(field, "---").concat(value) : field;
    });

    _defineProperty(_assertThisInitialized(_this), "handleSqonChange", function (_ref2) {
      var sqon = _ref2.sqon;
      var _this$props$onSqonFie = _this.props.onSqonFieldChange,
          onSqonFieldChange = _this$props$onSqonFie === void 0 ? function () {} : _this$props$onSqonFie;

      _this.setState({
        isLoading: true
      }, function () {
        return onSqonFieldChange({
          sqon: sqon
        });
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setSearchTerm", (0, _lodash.debounce)(function (value) {
      var _this$props$onFilterC = _this.props.onFilterChange,
          onFilterChange = _this$props$onFilterC === void 0 ? function () {} : _this$props$onFilterC;
      onFilterChange(value);

      _this.setState({
        searchTerm: value
      });
    }, 500));

    _this.state = {
      selectedPath: null,
      withValueOnly: true,
      searchTerm: null,
      displayTreeData: null,
      isLoading: true
    };
    return _this;
  }

  _createClass(AdvancedFacetView, [{
    key: "getSnapshotBeforeUpdate",
    value: function getSnapshotBeforeUpdate(prevProps, prevState) {
      var aggChanged = !(0, _lodash.isEqual)(this.props.aggregations, prevProps.aggregations);
      var sqonChanged = !(0, _lodash.isEqual)(this.props.sqon, prevProps.sqon);
      return {
        shouldEndLoading: aggChanged || sqonChanged
      };
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState, _ref3) {
      var shouldEndLoading = _ref3.shouldEndLoading;
      var shouldRecomputeDisplayTree = !(0, _lodash.isEqual)((0, _lodash.pick)(this.props, ['elasticMapping', 'extendedMapping']), (0, _lodash.pick)(prevProps, ['elasticMapping', 'extendedMapping']));

      if (shouldRecomputeDisplayTree) {
        var _this$props = this.props,
            rootTypeName = _this$props.rootTypeName,
            elasticMapping = _this$props.elasticMapping,
            extendedMapping = _this$props.extendedMapping;
        this.setState({
          displayTreeData: (0, _utils.orderDisplayTreeData)((0, _utils.injectExtensionToElasticMapping)({
            rootTypeName: rootTypeName,
            elasticMapping: elasticMapping,
            extendedMapping: extendedMapping
          }))
        });
      }

      if (shouldEndLoading) {
        this.setState({
          isLoading: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          selectedPath = _this$state.selectedPath,
          withValueOnly = _this$state.withValueOnly,
          searchTerm = _this$state.searchTerm,
          displayTreeData = _this$state.displayTreeData,
          isLoading = _this$state.isLoading;

      var _this$props2 = this.props,
          _this$props2$extended = _this$props2.extendedMapping,
          extendedMapping = _this$props2$extended === void 0 ? [] : _this$props2$extended,
          _this$props2$aggregat = _this$props2.aggregations,
          aggregations = _this$props2$aggregat === void 0 ? {} : _this$props2$aggregat,
          sqon = _this$props2.sqon,
          statsConfig = _this$props2.statsConfig,
          translateSQONValue = _this$props2.translateSQONValue,
          _this$props2$onFacetN = _this$props2.onFacetNavigation,
          onFacetNavigation = _this$props2$onFacetN === void 0 ? function () {} : _this$props2$onFacetN,
          onTermSelected = _this$props2.onTermSelected,
          onClear = _this$props2.onClear,
          _this$props2$InputCom = _this$props2.InputComponent,
          InputComponent = _this$props2$InputCom === void 0 ? _Input.default : _this$props2$InputCom,
          props = _objectWithoutProperties(_this$props2, ["extendedMapping", "aggregations", "sqon", "statsConfig", "translateSQONValue", "onFacetNavigation", "onTermSelected", "onClear", "InputComponent"]);

      var scrollFacetViewToPath = function scrollFacetViewToPath(path) {
        _this2.facetView.scrollToPath({
          path: path
        });

        onFacetNavigation(path);
      };

      var visibleDisplayTreeData = withValueOnly ? (0, _utils.filterOutNonValue)({
        extendedMapping: extendedMapping,
        displayTreeData: displayTreeData,
        aggregations: aggregations
      }).displayTreeDataWithValue : displayTreeData;
      return _react.default.createElement("div", {
        className: "advancedFacetViewWrapper"
      }, displayTreeData && _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", null, _react.default.createElement(_CurrentSQON.CurrentSQON, _extends({
        sqon: sqon,
        extendedMapping: extendedMapping,
        translateSQONValue: translateSQONValue,
        onClear: onClear
      }, {
        setSQON: function setSQON(sqon) {
          return _this2.handleSqonChange({
            sqon: sqon
          });
        }
      }))), _react.default.createElement("div", {
        className: "facetViewWrapper"
      }, _react.default.createElement("div", {
        className: "panel treeViewPanel"
      }, _react.default.createElement("div", {
        className: "treeView"
      }, _react.default.createElement("div", {
        className: "panelHeading"
      }, _react.default.createElement("span", {
        className: "fieldsShown"
      }, withValueOnly ? (0, _lodash.keys)((0, _utils.filterOutNonValue)({
        aggregations: aggregations
      }).aggregationsWithValue).length : Object.keys(aggregations).length, ' ', "fields"), _react.default.createElement("span", {
        className: "valueOnlyCheck",
        style: {
          cursor: 'pointer'
        },
        onClick: function onClick() {
          var _displayTreeData$;

          return _this2.setState({
            selectedPath: (_displayTreeData$ = displayTreeData[0]) === null || _displayTreeData$ === void 0 ? void 0 : _displayTreeData$.path,
            withValueOnly: !withValueOnly
          });
        }
      }, _react.default.createElement("input", {
        type: "checkBox",
        checked: withValueOnly,
        "aria-label": "Show only fields with value"
      }), "Show only fields with value")), _react.default.createElement(_NestedTreeView.default, {
        searchString: searchTerm,
        defaultCollapsed: function defaultCollapsed(_ref4) {
          var depth = _ref4.depth;
          return depth !== 0;
        },
        shouldCollapse: function shouldCollapse() {
          // if there's a searchTerm, expand everything. Else, don't control
          return searchTerm && searchTerm.length ? false : undefined;
        },
        dataSource: visibleDisplayTreeData,
        selectedPath: selectedPath,
        onLeafSelect: function onLeafSelect(path) {
          scrollFacetViewToPath(path);

          _this2.setState({
            selectedPath: path
          });
        }
      }))), _react.default.createElement("div", {
        className: "panel facetsPanel"
      }, _react.default.createElement("div", {
        className: "panelHeading"
      }, _react.default.createElement(_reactComponentComponent.default, {
        initialState: {
          value: searchTerm || ''
        }
      }, function (_ref5) {
        var value = _ref5.state.value,
            setState = _ref5.setState;
        return _react.default.createElement(InputComponent, {
          icon: _react.default.createElement(_filter.default, null),
          "aria-label": "Data filter",
          rightIcon: _react.default.createElement(_timesCircleO.default, {
            onClick: function onClick() {
              setState({
                value: null
              }, function () {
                _this2.setState({
                  searchTerm: null
                });
              });
            }
          }),
          className: "filterInput",
          type: "text",
          placeholder: "Filter",
          value: value || '',
          onChange: function onChange(_ref6) {
            var value = _ref6.target.value;
            setState({
              value: value
            }, function () {
              _this2.setSearchTerm(value);
            });
          }
        });
      }), statsConfig && _react.default.createElement("div", {
        className:
        /*#__PURE__*/

        /*#__PURE__*/
        (0, _emotion.css)("display:flex;flex:1;height:100%;")
      }, _react.default.createElement(_Stats.default, _extends({
        small: true,
        transparent: true
      }, props, {
        sqon: sqon
      }, {
        stats: statsConfig,
        className:
        /*#__PURE__*/

        /*#__PURE__*/
        (0, _emotion.css)("flex-grow:1;")
      })))), _react.default.createElement("div", {
        className: "facets"
      }, _react.default.createElement(_FacetView.default, {
        extendedMapping: extendedMapping,
        constructEntryId: this.constructFilterId,
        ref: function ref(view) {
          return _this2.facetView = view;
        },
        sqon: sqon,
        onValueChange: this.handleSqonChange,
        aggregations: aggregations,
        searchString: searchTerm,
        displayTreeData: (0, _utils.filterDisplayTreeDataBySearchTerm)({
          displayTree: visibleDisplayTreeData,
          aggregations: aggregations,
          searchTerm: searchTerm
        }),
        onTermSelected: onTermSelected
      }))))), isLoading && _react.default.createElement(_LoadingScreen.default, null));
    }
  }]);

  return AdvancedFacetView;
}(_react.default.Component);

exports.default = AdvancedFacetView;