"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterDisplayTreeDataBySearchTerm = exports.orderDisplayTreeData = exports.elasticMappingToDisplayTreeData = exports.injectExtensionToElasticMapping = exports.filterOutNonValue = void 0;

var _lodash = require("lodash");

var _mappingUtils = require("@arranger/mapping-utils");

var _strToReg = _interopRequireDefault(require("../utils/strToReg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var elasticMappingToDisplayTreeData = _mappingUtils.mappingToDisplayTreeData.elasticMappingToDisplayTreeData;
exports.elasticMappingToDisplayTreeData = elasticMappingToDisplayTreeData;

var injectExtensionToElasticMapping = function injectExtensionToElasticMapping(_ref) {
  var elasticMapping = _ref.elasticMapping,
      extendedMapping = _ref.extendedMapping,
      rootTypeName = _ref.rootTypeName;
  var rawDisplayData = elasticMappingToDisplayTreeData(elasticMapping);

  var extend = function extend(node) {
    var extension = extendedMapping.find(function (x) {
      return x.field === node.path;
    });
    return _objectSpread({}, node, {}, extension && {
      title: extension.displayName || node.title,
      type: extension.type || node.title
    }, {}, node.children && {
      children: node.children.map(extend)
    });
  };

  var _partition = (0, _lodash.partition)(rawDisplayData.map(extend), function (x) {
    return !x.children;
  }),
      _partition2 = _slicedToArray(_partition, 2),
      rootFields = _partition2[0],
      nestedFields = _partition2[1];

  return [{
    title: rootTypeName || 'Root',
    children: rootFields,
    isRoot: true
  }].concat(_toConsumableArray(nestedFields));
};

exports.injectExtensionToElasticMapping = injectExtensionToElasticMapping;

var filterOutNonValue = function filterOutNonValue(_ref2) {
  var _extendedMapping$filt;

  var aggregations = _ref2.aggregations,
      displayTreeData = _ref2.displayTreeData,
      extendedMapping = _ref2.extendedMapping;
  var aggregationsWithValue = (0, _lodash.keys)(aggregations).reduce(function (a, key) {
    var _aggregations$key, _aggregations$key$buc, _aggregations$key$buc2, _aggregations$key2, _aggregations$key2$st, _aggregations$key3, _aggregations$key3$st;

    var keyHasValue = ((_aggregations$key = aggregations[key]) === null || _aggregations$key === void 0 ? void 0 : (_aggregations$key$buc = _aggregations$key.buckets) === null || _aggregations$key$buc === void 0 ? void 0 : (_aggregations$key$buc2 = _aggregations$key$buc.filter(function (x) {
      return (x.key_as_string || x.key) !== '__missing__';
    })) === null || _aggregations$key$buc2 === void 0 ? void 0 : _aggregations$key$buc2.length) > 0 || ((_aggregations$key2 = aggregations[key]) === null || _aggregations$key2 === void 0 ? void 0 : (_aggregations$key2$st = _aggregations$key2.stats) === null || _aggregations$key2$st === void 0 ? void 0 : _aggregations$key2$st.min) || ((_aggregations$key3 = aggregations[key]) === null || _aggregations$key3 === void 0 ? void 0 : (_aggregations$key3$st = _aggregations$key3.stats) === null || _aggregations$key3$st === void 0 ? void 0 : _aggregations$key3$st.max);
    return _objectSpread({}, a, {}, keyHasValue ? _defineProperty({}, key, aggregations[key]) : {});
  }, {});
  var keysWithValue = (0, _lodash.keys)(aggregationsWithValue);

  var doesDisplayNodeHaveValue = function doesDisplayNodeHaveValue(node) {
    return node.children ? node.children.filter(doesDisplayNodeHaveValue).length : keysWithValue.indexOf(node.path) > -1;
  };

  var applyFilterToDisplayNodeCollection = function applyFilterToDisplayNodeCollection(collection) {
    return collection.filter(doesDisplayNodeHaveValue).map(function (node) {
      return _objectSpread({}, node, {}, node.children && {
        children: applyFilterToDisplayNodeCollection(node.children)
      });
    });
  };

  return _objectSpread({
    aggregationsWithValue: aggregationsWithValue
  }, displayTreeData && {
    displayTreeDataWithValue: applyFilterToDisplayNodeCollection(displayTreeData)
  }, {}, extendedMapping && {
    extendedMappingWithValue: extendedMapping === null || extendedMapping === void 0 ? void 0 : (_extendedMapping$filt = extendedMapping.filter) === null || _extendedMapping$filt === void 0 ? void 0 : _extendedMapping$filt.call(extendedMapping, function (x) {
      return aggregationsWithValue[x.field];
    })
  });
};

exports.filterOutNonValue = filterOutNonValue;

var orderDisplayTreeData = function orderDisplayTreeData(displayTreeData) {
  return [].concat(_toConsumableArray((0, _lodash.orderBy)(displayTreeData.filter(function (x) {
    return !x.children || x.isRoot;
  }), 'title')), _toConsumableArray((0, _lodash.orderBy)(displayTreeData.filter(function (x) {
    return !!x.children && !x.isRoot;
  }).map(function (_ref4) {
    var children = _ref4.children,
        rest = _objectWithoutProperties(_ref4, ["children"]);

    return _objectSpread({}, rest, {
      children: orderDisplayTreeData(children)
    });
  }), 'title')));
};

exports.orderDisplayTreeData = orderDisplayTreeData;

var filterDisplayTreeDataBySearchTerm = function filterDisplayTreeDataBySearchTerm(_ref5) {
  var displayTree = _ref5.displayTree,
      searchTerm = _ref5.searchTerm,
      aggregations = _ref5.aggregations;

  var shouldBeIncluded = function shouldBeIncluded(_ref6) {
    var _aggregations$path, _aggregations$path$bu;

    var title = _ref6.title,
        path = _ref6.path,
        children = _ref6.children;
    var inTitle = title.match((0, _strToReg.default)(searchTerm));
    var inBuckets = (_aggregations$path = aggregations[path]) === null || _aggregations$path === void 0 ? void 0 : (_aggregations$path$bu = _aggregations$path.buckets) === null || _aggregations$path$bu === void 0 ? void 0 : _aggregations$path$bu.some(function (x) {
      return (x.key_as_string || x.key).match((0, _strToReg.default)(searchTerm));
    });
    var inChildren = children && children.some(shouldBeIncluded);
    return inTitle || inBuckets || inChildren;
  };

  return searchTerm && searchTerm.length ? displayTree === null || displayTree === void 0 ? void 0 : displayTree.filter(shouldBeIncluded).map(function (_ref7) {
    var children = _ref7.children,
        rest = _objectWithoutProperties(_ref7, ["children"]);

    return _objectSpread({}, rest, {
      children: filterDisplayTreeDataBySearchTerm({
        displayTree: children,
        searchTerm: searchTerm,
        aggregations: aggregations
      })
    });
  }) : displayTree;
};

exports.filterDisplayTreeDataBySearchTerm = filterDisplayTreeDataBySearchTerm;