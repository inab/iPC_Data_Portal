"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = require("lodash");

var _recompose = require("recompose");

var _jsonpath = _interopRequireDefault(require("jsonpath/jsonpath.min"));

var _reactScrollbarSize = _interopRequireDefault(require("react-scrollbar-size"));

var _style = _interopRequireDefault(require("./style"));

var _EnhancedReactTable = _interopRequireDefault(require("./EnhancedReactTable"));

var _CustomPagination = _interopRequireDefault(require("./CustomPagination"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var enhance = (0, _recompose.compose)((0, _recompose.defaultProps)({
  setSelectedTableRows: _lodash.noop,
  onPaginationChange: _lodash.noop,
  selectedTableRows: null
}));

var DataTable =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DataTable, _React$Component);

  function DataTable(props) {
    var _this;

    _classCallCheck(this, DataTable);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataTable).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "setSelectedTableRows", function (selectedTableRows) {
      _this.props.setSelectedTableRows(selectedTableRows);

      _this.setState({
        selectedTableRows: selectedTableRows
      });
    });

    _defineProperty(_assertThisInitialized(_this), "toggleSelectedTableRow", function (key) {
      // react-table does some weird stuff and passes `select-${}` for some reason
      var sanitizedKey = key.split('select-').join('');
      var selectedTableRows = (0, _lodash.xor)(_this.state.selectedTableRows, [sanitizedKey]);

      _this.setSelectedTableRows(selectedTableRows);
    });

    _defineProperty(_assertThisInitialized(_this), "toggleAll", function () {
      var selectedTableRows = _this.state.selectedTableRows.length === _this.state.data.length ? [] : _this.state.data.map(function (item) {
        return item[_this.props.config.keyField];
      });

      _this.setSelectedTableRows(selectedTableRows);
    });

    _defineProperty(_assertThisInitialized(_this), "isSelected", function (key) {
      return _this.state.selectedTableRows.includes(key);
    });

    _defineProperty(_assertThisInitialized(_this), "onFetchData", function (state) {
      var _this$props = _this.props,
          fetchData = _this$props.fetchData,
          config = _this$props.config,
          sqon = _this$props.sqon,
          _this$props$alwaysSor = _this$props.alwaysSorted,
          alwaysSorted = _this$props$alwaysSor === void 0 ? [] : _this$props$alwaysSor,
          keepSelectedOnPageChange = _this$props.keepSelectedOnPageChange;
      var selectedTableRows = _this.state.selectedTableRows;

      _this.setState({
        loading: true,
        lastState: state
      });

      fetchData === null || fetchData === void 0 ? void 0 : fetchData({
        config: config,
        sqon: sqon,
        queryName: 'Table',
        sort: [].concat(_toConsumableArray(state.sorted.map(function (sort) {
          return {
            field: sort.id,
            order: sort.desc ? 'desc' : 'asc'
          };
        })), _toConsumableArray(alwaysSorted)),
        offset: state.page * state.pageSize,
        first: state.pageSize
      }).then(function (_ref) {
        var total = _ref.total,
            data = _ref.data;

        if (total !== _this.state.total) {
          _this.props.onPaginationChange({
            total: total
          });
        }

        _this.setState({
          data: data,
          total: total,
          pages: Math.ceil(total / state.pageSize),
          loading: false
        });

        if (!keepSelectedOnPageChange) {
          _this.setSelectedTableRows((0, _lodash.intersection)(data.map(function (item) {
            return item[_this.props.config.keyField];
          }), selectedTableRows));
        }
      })["catch"](function (err) {
        console.error(err);

        _this.setState({
          loading: false
        });
      });
    });

    _this.state = {
      selectedTableRows: props.selectedTableRows || props.initalSelectedTableRows || [],
      data: [],
      pages: -1,
      loading: false,
      lastState: null,
      scrollbarSize: {}
    };
    return _this;
  }

  _createClass(DataTable, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(lastProps) {
      var _this2 = this;

      if (!this.state.loading && lastProps.config.columns.some(function (lastColumn, i) {
        return lastColumn.show !== _this2.props.config.columns[i].show;
      })) {
        this.onFetchData(this.state.lastState);
      } // TODO: in receive props? better if else ladder?


      if (this.props.sqon !== lastProps.sqon) {
        this.onFetchData(this.state.lastState);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var toggleSelectedTableRow = this.toggleSelectedTableRow,
          toggleAll = this.toggleAll,
          isSelected = this.isSelected,
          onFetchData = this.onFetchData;
      var _this$props2 = this.props,
          config = _this$props2.config,
          defaultPageSize = _this$props2.defaultPageSize,
          onSortedChange = _this$props2.onSortedChange,
          propsData = _this$props2.propsData,
          propsLoading = _this$props2.loading,
          style = _this$props2.style,
          maxPagesOptions = _this$props2.maxPagesOptions;
      var columns = config.columns,
          keyField = config.keyField,
          defaultSorted = config.defaultSorted;
      var _this$state = this.state,
          data = _this$state.data,
          selectedTableRows = _this$state.selectedTableRows,
          pages = _this$state.pages,
          loading = _this$state.loading,
          scrollbarSize = _this$state.scrollbarSize;
      var fetchFromServerProps = {
        pages: pages,
        loading: propsLoading !== null ? propsLoading : loading,
        manual: true,
        onFetchData: onFetchData
      };
      var checkboxProps = {
        selectAll: selectedTableRows.length === data.length,
        isSelected: isSelected,
        toggleSelection: toggleSelectedTableRow,
        toggleAll: toggleAll,
        selectType: 'checkbox',
        keyField: keyField
      };
      return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(_reactScrollbarSize["default"], {
        onLoad: function onLoad(scrollbarSize) {
          return _this3.setState({
            scrollbarSize: scrollbarSize
          });
        },
        onChange: function onChange(scrollbarSize) {
          return _this3.setState({
            scrollbarSize: scrollbarSize
          });
        }
      }), _react["default"].createElement(_EnhancedReactTable["default"], _extends({
        minRows: 0,
        className: "-striped -highlight ".concat((0, _style["default"])({
          scrollbarSize: scrollbarSize
        })),
        style: style,
        onSortedChange: onSortedChange,
        onPageChange: function onPageChange(page) {
          return _this3.props.onPaginationChange({
            page: page
          });
        },
        onPageSizeChange: function onPageSizeChange(pageSize, page) {
          return _this3.props.onPaginationChange({
            pageSize: pageSize,
            page: page
          });
        },
        data: (propsData === null || propsData === void 0 ? void 0 : propsData.data) || data,
        defaultSorted: defaultSorted,
        columns: columns.map(function (_ref2) {
          var Cell = _ref2.Cell,
              c = _objectWithoutProperties(_ref2, ["Cell"]);

          return _objectSpread({}, c, {}, !c.hasCustomType && !(0, _lodash.isEmpty)(c.extendedDisplayValues) ? {
            accessor: function accessor(x) {
              var values = c.accessor ? [(0, _lodash.get)(x, c.accessor)] : _jsonpath["default"].query(x, c.jsonPath);
              return values.map(function (x) {
                return c.extendedDisplayValues["".concat(x)] || x;
              }).join(', ');
            },
            id: c.field
          } : {
            Cell: Cell
          });
        }, {}),
        defaultPageSize: defaultPageSize,
        PaginationComponent: function PaginationComponent(props) {
          return _react["default"].createElement(_CustomPagination["default"], _extends({}, props, {
            maxPagesOptions: maxPagesOptions
          }));
        }
      }, checkboxProps, fetchFromServerProps)));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      return _objectSpread({}, prevState, {
        selectedTableRows: nextProps.selectedTableRows || prevState.selectedTableRows
      });
    }
  }]);

  return DataTable;
}(_react["default"].Component);

var _default = enhance(DataTable);

exports["default"] = _default;