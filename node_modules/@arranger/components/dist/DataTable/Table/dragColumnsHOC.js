"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _dragula = _interopRequireDefault(require("dragula"));

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = function _default(Component) {
  var _temp;

  var wrapper = (_temp =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(RTDragColumnTable, _React$Component);

    function RTDragColumnTable(props) {
      var _this;

      _classCallCheck(this, RTDragColumnTable);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(RTDragColumnTable).call(this, props));

      _defineProperty(_assertThisInitialized(_this), "dragulaDecorator", function (componentBackingInstance) {
        if (componentBackingInstance) {
          var options = {
            moves: function moves(el, container, handle) {
              return el.attributes.getNamedItem('data-accessor') != null;
            }
          };
          var drake = (0, _dragula["default"])([componentBackingInstance], options);
          drake.on('drop', function (el, target, source, sibling) {
            var movedColumnId = el.attributes.getNamedItem('data-accessor').value;
            var movedColumn;

            var newColumnsOrder = _this.state.columns.filter(function (column) {
              if (column.accessor === movedColumnId || column.id === movedColumnId) {
                movedColumn = column;
                return false;
              }

              return true;
            });

            if (sibling) {
              var siblingColumnId = sibling.attributes.getNamedItem('data-accessor').value;
              var siblingColumn = newColumnsOrder.filter(function (col) {
                return col.accessor === siblingColumnId || col.id === siblingColumnId;
              })[0];
              var siblingColumnIndex = newColumnsOrder.indexOf(siblingColumn);
              newColumnsOrder.splice(siblingColumnIndex, 0, movedColumn);
            } else {
              newColumnsOrder.push(movedColumn);
            }

            _this.setState({
              columns: newColumnsOrder
            });
          });
        }
      });

      _this.state = {
        columns: props.columns
      };
      return _this;
    }

    _createClass(RTDragColumnTable, [{
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (!(0, _lodash.isEqual)(nextProps.columns, this.props.columns)) {
          this.setState({
            columns: nextProps.columns
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var rest = _extends({}, this.props);

        var extra = {
          TrComponent: function TrComponent(_ref) {
            var children = _ref.children,
                className = _ref.className,
                rest = _objectWithoutProperties(_ref, ["children", "className"]);

            return _react["default"].createElement("div", _extends({
              ref: _this2.dragulaDecorator,
              className: 'rt-tr'
            }, rest), children);
          },
          getTheadThProps: function getTheadThProps(state, rowInfo, column, instance) {
            return {
              'data-accessor': column.id
            };
          },
          columns: this.state.columns
        };
        return _react["default"].createElement(Component, _extends({}, rest, extra));
      }
    }]);

    return RTDragColumnTable;
  }(_react["default"].Component), _temp);
  return wrapper;
};

exports["default"] = _default;