"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _formik = require("formik");

var _recompose = require("recompose");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var enhance = (0, _recompose.compose)((0, _formik.withFormik)({
  mapPropsToValues: function mapPropsToValues(_ref) {
    var dataTypes = _ref.dataTypes;
    return {
      query: '',
      type: '',
      id: '',
      accessor: ''
    };
  },
  handleSubmit: function () {
    var _handleSubmit = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(values, _ref2) {
      var addColumn, setSubmitting;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              addColumn = _ref2.props.addColumn, setSubmitting = _ref2.setSubmitting;
              _context.next = 3;
              return addColumn(_objectSpread({}, values, {
                id: values.field
              }));

            case 3:
              setSubmitting(false);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function handleSubmit(_x, _x2) {
      return _handleSubmit.apply(this, arguments);
    }

    return handleSubmit;
  }()
}));

var AddCustomColumn = function AddCustomColumn(_ref3) {
  var values = _ref3.values,
      submitForm = _ref3.submitForm,
      style = _ref3.style;
  return _react.default.createElement("div", {
    style: _objectSpread({
      display: 'flex',
      justifyContent: 'space-between',
      margin: 20
    }, style)
  }, _react.default.createElement(_formik.Field, {
    name: "field",
    placeholder: "field",
    value: values.field
  }), _react.default.createElement(_formik.Field, {
    name: "type",
    placeholder: "type",
    value: values.type
  }), _react.default.createElement(_formik.Field, {
    name: "query",
    placeholder: "query",
    value: values.query
  }), _react.default.createElement(_formik.Field, {
    name: "accessor",
    placeholder: "accessor",
    value: values.accessor
  }), _react.default.createElement("label", null, "show:", _react.default.createElement(_formik.Field, {
    type: "checkbox",
    value: values.show,
    name: "show"
  })), _react.default.createElement("label", null, "active:", _react.default.createElement(_formik.Field, {
    type: "checkbox",
    value: values.canChangeShow,
    name: "canChangeShow"
  })), _react.default.createElement("button", {
    onClick: submitForm
  }, "Add Custom Column"));
};

var _default = enhance(AddCustomColumn);

exports.default = _default;