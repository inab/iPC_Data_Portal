"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _recompose = require("recompose");

var _lodash = require("lodash");

var _pluralize = _interopRequireDefault(require("pluralize"));

var _utils = require("../../SQONView/utils");

var _TextFilter = _interopRequireWildcard(require("../../TextFilter"));

var _saveTSV = _interopRequireDefault(require("./saveTSV"));

var _DropDown = _interopRequireDefault(require("../../DropDown"));

require("./Toolbar.css");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var enhance = (0, _recompose.compose)((0, _recompose.withProps)(function (_ref) {
  var columns = _ref.columns;
  return {
    canChangeShowColumns: columns.filter(function (column) {
      return column.canChangeShow;
    })
  };
}), (0, _recompose.withPropsOnChange)(['onFilterChange'], function (_ref2) {
  var _ref2$onFilterChange = _ref2.onFilterChange,
      onFilterChange = _ref2$onFilterChange === void 0 ? function () {} : _ref2$onFilterChange;
  return {
    debouncedOnFilterChange: (0, _lodash.debounce)(onFilterChange, 300)
  };
}), (0, _recompose.withState)('filterVal', 'setFilterVal', ''), (0, _recompose.withPropsOnChange)(['sqon'], function (_ref3) {
  var sqon = _ref3.sqon,
      setFilterVal = _ref3.setFilterVal;
  if (!(0, _utils.currentFilterValue)(sqon)) setFilterVal('');
}));

var TableToolbar = function TableToolbar(_ref4) {
  var columns = _ref4.columns,
      canChangeShowColumns = _ref4.canChangeShowColumns,
      onColumnsChange = _ref4.onColumnsChange,
      filterVal = _ref4.filterVal,
      setFilterVal = _ref4.setFilterVal,
      onFilterChange = _ref4.onFilterChange,
      debouncedOnFilterChange = _ref4.debouncedOnFilterChange,
      _ref4$page = _ref4.page,
      page = _ref4$page === void 0 ? 0 : _ref4$page,
      _ref4$pageSize = _ref4.pageSize,
      pageSize = _ref4$pageSize === void 0 ? 0 : _ref4$pageSize,
      propsData = _ref4.propsData,
      _ref4$filterInputPlac = _ref4.filterInputPlaceholder,
      filterInputPlaceholder = _ref4$filterInputPlac === void 0 ? 'Filter' : _ref4$filterInputPlac,
      _ref4$total = _ref4.total,
      total = _ref4$total === void 0 ? (propsData === null || propsData === void 0 ? void 0 : propsData.total) || 0 : _ref4$total,
      _ref4$type = _ref4.type,
      type = _ref4$type === void 0 ? '' : _ref4$type,
      _ref4$allowTogglingCo = _ref4.allowTogglingColumns,
      allowTogglingColumns = _ref4$allowTogglingCo === void 0 ? true : _ref4$allowTogglingCo,
      _ref4$allowTSVExport = _ref4.allowTSVExport,
      allowTSVExport = _ref4$allowTSVExport === void 0 ? true : _ref4$allowTSVExport,
      _ref4$customActions = _ref4.customActions,
      customActions = _ref4$customActions === void 0 ? null : _ref4$customActions,
      style = _ref4.style,
      _ref4$columnDropdownT = _ref4.columnDropdownText,
      columnDropdownText = _ref4$columnDropdownT === void 0 ? 'Show columns' : _ref4$columnDropdownT,
      _ref4$exportTSVText = _ref4.exportTSVText,
      exportTSVText = _ref4$exportTSVText === void 0 ? 'Export TSV' : _ref4$exportTSVText,
      _ref4$exportTSVFilena = _ref4.exportTSVFilename,
      exportTSVFilename = _ref4$exportTSVFilena === void 0 ? "".concat(type, "-table.tsv") : _ref4$exportTSVFilena,
      _ref4$exporter = _ref4.exporter,
      exporter = _ref4$exporter === void 0 ? _saveTSV.default : _ref4$exporter,
      _ref4$transformParams = _ref4.transformParams,
      transformParams = _ref4$transformParams === void 0 ? function (params) {
    return params;
  } : _ref4$transformParams,
      sqon = _ref4.sqon,
      downloadUrl = _ref4.downloadUrl,
      InputComponent = _ref4.InputComponent,
      _ref4$showFilterInput = _ref4.showFilterInput,
      showFilterInput = _ref4$showFilterInput === void 0 ? true : _ref4$showFilterInput,
      _ref4$customHeaderCon = _ref4.customHeaderContent,
      customHeaderContent = _ref4$customHeaderCon === void 0 ? null : _ref4$customHeaderCon;
  var isPlural = total > 1 && pageSize > 1 && (Math.ceil(total / pageSize) !== page || total % pageSize > 1);
  return _react.default.createElement("div", {
    style: _objectSpread({
      display: 'flex',
      flex: 'none'
    }, style),
    className: "tableToolbar"
  }, _react.default.createElement("div", {
    style: {
      flexGrow: 1,
      display: 'flex',
      alignItems: 'center'
    }
  }, "Showing ", (page * pageSize + 1).toLocaleString(), " -", ' ', Math.min((page + 1) * pageSize, total).toLocaleString(), " of", ' ', total === null || total === void 0 ? void 0 : total.toLocaleString(), " ", (0, _pluralize.default)(type, isPlural ? 2 : 1)), !customHeaderContent ? null : customHeaderContent, _react.default.createElement("div", {
    className: "group"
  }, !showFilterInput ? null : _react.default.createElement(_TextFilter.default, {
    InputComponent: InputComponent,
    value: filterVal,
    placeholder: filterInputPlaceholder,
    onChange: function onChange(_ref5) {
      var value = _ref5.value,
          generateNextSQON = _ref5.generateNextSQON;
      setFilterVal(value);
      debouncedOnFilterChange({
        value: value,
        generateNextSQON: generateNextSQON
      });
    }
  })), _react.default.createElement("div", {
    className: "group"
  }, allowTogglingColumns && _react.default.createElement(_DropDown.default, {
    "aria-label": "Select columns",
    itemToString: function itemToString(i) {
      return i.Header;
    },
    items: canChangeShowColumns,
    onChange: function onChange(item) {
      setFilterVal('');
      onFilterChange({
        value: '',
        generateNextSQON: (0, _TextFilter.generateNextSQON)('')
      });
      onColumnsChange(_objectSpread({}, item, {
        show: !item.show
      }));
    }
  }, columnDropdownText), allowTSVExport && _react.default.createElement("div", {
    className: "buttonWrapper"
  }, _react.default.createElement("button", {
    style: {
      display: 'flex',
      cursor: 'pointer',
      whiteSpace: 'nowrap',
      minHeight: 16
    },
    onClick: function onClick() {
      exporter(transformParams({
        url: downloadUrl,
        files: [{
          fileName: exportTSVFilename,
          fileType: 'tsv',
          sqon: sqon,
          index: type,
          columns: columns
        }]
      }));
    }
  }, exportTSVText)), customActions));
};

var _default = enhance(TableToolbar);

exports.default = _default;