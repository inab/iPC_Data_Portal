"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _lodash = require("lodash");

var _api = _interopRequireDefault(require("../utils/api"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var columnFields = "\n  state {\n    type\n    keyField\n    defaultSorted {\n      id\n      desc\n    }\n    columns {\n      field\n      accessor\n      show\n      type\n      sortable\n      canChangeShow\n      query\n      jsonPath\n    }\n  }\n";

var _default =
/*#__PURE__*/
function (_Component) {
  _inherits(_default, _Component);

  function _default(props) {
    var _this;

    _classCallCheck(this, _default);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(_default).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "fetchColumnsState", (0, _lodash.debounce)(
    /*#__PURE__*/
    function () {
      var _ref2 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(_ref) {
        var graphqlField, _this$props$api, api, _ref3, data, config, _ref4, extended;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                graphqlField = _ref.graphqlField;
                _this$props$api = _this.props.api, api = _this$props$api === void 0 ? _api["default"] : _this$props$api;
                _context.prev = 2;
                _context.next = 5;
                return api({
                  endpoint: "/".concat(_this.props.projectId, "/graphql/columnsStateQuery"),
                  body: {
                    query: "query columnsStateQuery\n            {\n              ".concat(graphqlField, " {\n                columnsState {\n                  ").concat(columnFields, "\n                }\n              }\n            }\n          ")
                  }
                });

              case 5:
                _ref3 = _context.sent;
                data = _ref3.data;
                config = data[graphqlField].columnsState.state;
                _context.next = 10;
                return api({
                  endpoint: "/".concat(_this.props.projectId, "/graphql"),
                  body: {
                    query: "\n          query{\n            ".concat(_this.props.graphqlField, " {\n              extended\n            }\n          }\n        ")
                  }
                });

              case 10:
                _ref4 = _context.sent;
                extended = _ref4.data[_this.props.graphqlField].extended;

                _this.setState({
                  extended: extended,
                  config: config
                });

                _context.next = 18;
                break;

              case 15:
                _context.prev = 15;
                _context.t0 = _context["catch"](2);
                console.warn(_context.t0); // this.setState({ })

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[2, 15]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), 300));

    _defineProperty(_assertThisInitialized(_this), "save", (0, _lodash.debounce)(
    /*#__PURE__*/
    function () {
      var _ref5 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2(state) {
        var _this$props$api2, api, _ref6, data;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this$props$api2 = _this.props.api, api = _this$props$api2 === void 0 ? _api["default"] : _this$props$api2;
                _context2.next = 3;
                return api({
                  endpoint: "/".concat(_this.props.projectId, "/graphql"),
                  body: {
                    variables: {
                      state: state
                    },
                    query: "\n        mutation($state: JSON!) {\n          saveColumnsState(\n            state: $state\n            graphqlField: \"".concat(_this.props.graphqlField, "\"\n          ) {\n            ").concat(columnFields, "\n          }\n        }\n      ")
                  }
                });

              case 3:
                _ref6 = _context2.sent;
                data = _ref6.data;

                _this.setState({
                  config: data.saveColumnsState.state
                });

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref5.apply(this, arguments);
      };
    }(), 300));

    _defineProperty(_assertThisInitialized(_this), "update", function (_ref7) {
      var field = _ref7.field,
          key = _ref7.key,
          value = _ref7.value;

      var index = _this.state.config.columns.findIndex(function (x) {
        return x.field === field;
      });

      var column = _this.state.config.columns[index];

      var temp = _objectSpread({}, _this.state.config, {
        columns: Object.assign([], _this.state.config.columns, _defineProperty({}, index, _objectSpread({}, column, _defineProperty({}, key, value))))
      });

      _this.setState({
        temp: temp
      }, function () {
        return _this.save(temp);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "add", function (column) {
      var id = column.id;

      var existing = _this.state.config.columns.find(function (x) {
        return x.id === id;
      });

      if (existing) return;

      var temp = _objectSpread({}, _this.state.config, {
        columns: [].concat(_toConsumableArray(_this.state.config.columns), [column])
      });

      _this.setState({
        temp: temp
      }, function () {
        return _this.save(temp);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "toggle", function (_ref8) {
      var field = _ref8.field,
          show = _ref8.show;

      _this.setState({
        toggled: _objectSpread({}, _this.state.toggled, _defineProperty({}, field, show))
      });
    });

    _defineProperty(_assertThisInitialized(_this), "saveOrder", function (orderedFields) {
      var columns = _this.state.config.columns;

      if (orderedFields.every(function (field) {
        return columns.find(function (column) {
          return column.field === field;
        });
      }) && columns.every(function (column) {
        return orderedFields.find(function (field) {
          return field === column.field;
        });
      })) {
        _this.save(_objectSpread({}, _this.state.config, {
          columns: (0, _lodash.sortBy)(columns, function (_ref9) {
            var field = _ref9.field;
            return orderedFields.indexOf(field);
          })
        }));
      } else {
        console.warn('provided orderedFields are not clean: ', orderedFields);
      }
    });

    _this.state = {
      config: null,
      extended: [],
      toggled: {}
    };
    return _this;
  }

  _createClass(_default, [{
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.fetchColumnsState(this.props);

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }

      return componentDidMount;
    }()
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(next) {
      if (this.props.graphqlField !== next.graphqlField) {
        this.fetchColumnsState(next);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          config = _this$state.config,
          extended = _this$state.extended,
          toggled = _this$state.toggled;
      return config ? this.props.render({
        loading: false,
        update: this.update,
        add: this.add,
        toggle: this.toggle,
        saveOrder: this.saveOrder,
        state: _objectSpread({}, config, {
          columns: config.columns.map(function (column) {
            var extendedField = extended.find(function (e) {
              return e.field === column.field;
            });
            return _objectSpread({}, column, {
              Header: (extendedField === null || extendedField === void 0 ? void 0 : extendedField.displayName) || column.field,
              extendedType: extendedField === null || extendedField === void 0 ? void 0 : extendedField.type,
              show: column.field in toggled ? toggled[column.field] : column.show,
              extendedDisplayValues: extendedField === null || extendedField === void 0 ? void 0 : extendedField.displayValues
            });
          })
        })
      }) : this.props.render({
        loading: true,
        state: {
          config: null
        }
      });
    }
  }]);

  return _default;
}(_react.Component);

exports["default"] = _default;