"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSingleValue = getSingleValue;
exports.normalizeColumns = normalizeColumns;
exports.withNormalizedColumns = void 0;

var _columnTypes = _interopRequireDefault(require("./columnTypes"));

var _recompose = require("recompose");

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function getSingleValue(data) {
  if (_typeof(data) === 'object' && data) {
    return getSingleValue(Object.values(data)[0]);
  } else {
    return data;
  }
}

function normalizeColumns(_ref) {
  var _ref$columns = _ref.columns,
      columns = _ref$columns === void 0 ? [] : _ref$columns,
      customTypes = _ref.customTypes,
      _ref$customColumns = _ref.customColumns,
      customColumns = _ref$customColumns === void 0 ? [] : _ref$customColumns,
      _ref$customTypeConfig = _ref.customTypeConfigs,
      customTypeConfigs = _ref$customTypeConfig === void 0 ? {} : _ref$customTypeConfig;

  var types = _objectSpread({}, _columnTypes["default"], {}, customTypes);

  var mappedColumns = columns.map(function (column) {
    var _customColumns$find;

    var customCol = ((_customColumns$find = customColumns.find(function (cc) {
      return cc.content.field === column.field;
    })) === null || _customColumns$find === void 0 ? void 0 : _customColumns$find.content) || {};
    return _objectSpread({}, column, {
      show: typeof column.show === 'boolean' ? column.show : true,
      Cell: column.Cell || types[column.type],
      hasCustomType: (0, _lodash.isNil)(column.hasCustomType) ? !!(customTypes || {})[column.type] : column.hasCustomType
    }, !column.accessor && !column.id ? {
      id: column.field
    } : {}, {}, customTypeConfigs[column.type] || {}, {}, customCol);
  }).filter(function (x) {
    return x.show || x.canChangeShow;
  }); // filter out override columns

  var filteredCustomCols = customColumns.filter(function (cc) {
    return !mappedColumns.some(function (col) {
      return col.field === cc.content.field;
    });
  });
  return (0, _lodash.sortBy)(filteredCustomCols, 'index').reduce(function (arr, _ref2, i) {
    var index = _ref2.index,
        content = _ref2.content;
    return [].concat(_toConsumableArray(arr.slice(0, index + i)), [content], _toConsumableArray(arr.slice(index + i)));
  }, mappedColumns);
}

var withNormalizedColumns = (0, _recompose.withProps)(function (_ref3) {
  var _ref3$config = _ref3.config,
      config = _ref3$config === void 0 ? {} : _ref3$config,
      customTypes = _ref3.customTypes,
      customColumns = _ref3.customColumns,
      customTypeConfigs = _ref3.customTypeConfigs;
  return {
    config: _objectSpread({}, config, {
      columns: normalizeColumns({
        columns: config.columns,
        customTypes: customTypes,
        customColumns: customColumns,
        customTypeConfigs: customTypeConfigs
      })
    })
  };
});
exports.withNormalizedColumns = withNormalizedColumns;