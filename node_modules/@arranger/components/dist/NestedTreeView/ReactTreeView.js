"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TreeView =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(TreeView, _React$PureComponent);

  function TreeView(props) {
    var _this;

    _classCallCheck(this, TreeView);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TreeView).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "handleClick", function () {
      _this.setState({
        collapsed: !_this.state.collapsed
      });

      if (_this.props.onClick) {
        var _this$props;

        (_this$props = _this.props).onClick.apply(_this$props, arguments);
      }
    });

    _this.state = {
      collapsed: props.defaultCollapsed
    };
    return _this;
  }

  _createClass(TreeView, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          _this$props2$collapse = _this$props2.collapsed,
          collapsed = _this$props2$collapse === void 0 ? this.state.collapsed : _this$props2$collapse,
          _this$props2$classNam = _this$props2.className,
          className = _this$props2$classNam === void 0 ? '' : _this$props2$classNam,
          _this$props2$itemClas = _this$props2.itemClassName,
          itemClassName = _this$props2$itemClas === void 0 ? '' : _this$props2$itemClas,
          _this$props2$treeView = _this$props2.treeViewClassName,
          treeViewClassName = _this$props2$treeView === void 0 ? '' : _this$props2$treeView,
          _this$props2$children = _this$props2.childrenClassName,
          childrenClassName = _this$props2$children === void 0 ? '' : _this$props2$children,
          _this$props2$nodeLabe = _this$props2.nodeLabel,
          nodeLabel = _this$props2$nodeLabe === void 0 ? '' : _this$props2$nodeLabe,
          children = _this$props2.children,
          defaultCollapsed = _this$props2.defaultCollapsed,
          _this$props2$renderAr = _this$props2.renderArrow,
          renderArrow = _this$props2$renderAr === void 0 ? function (_ref) {
        var props = _ref.props,
            state = _ref.state;
      } : _this$props2$renderAr,
          rest = _objectWithoutProperties(_this$props2, ["collapsed", "className", "itemClassName", "treeViewClassName", "childrenClassName", "nodeLabel", "children", "defaultCollapsed", "renderArrow"]);

      var arrowClassName = 'tree-view_arrow';
      var containerClassName = 'tree-view_children';

      if (collapsed) {
        arrowClassName += ' tree-view_arrow-collapsed';
        containerClassName += ' tree-view_children-collapsed';
      }

      var arrow = renderArrow({
        props: _objectSpread({}, rest, {
          className: className + ' ' + arrowClassName
        }),
        state: this.state,
        handleClick: this.handleClick
      }) || _react.default.createElement("div", _extends({}, rest, {
        className: className + ' ' + arrowClassName,
        onClick: this.handleClick
      }));

      return _react.default.createElement("div", {
        className: 'tree-view ' + treeViewClassName
      }, _react.default.createElement("div", {
        className: 'tree-view_item ' + itemClassName
      }, arrow, nodeLabel({
        open: this.handleClick
      })), _react.default.createElement("div", {
        className: containerClassName + ' ' + childrenClassName
      }, collapsed ? null : children));
    }
  }]);

  return TreeView;
}(_react.default.PureComponent);

var _default = TreeView;
exports.default = _default;