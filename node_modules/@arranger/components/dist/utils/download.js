"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.addDownloadHttpHeaders = void 0;

var _uuid = _interopRequireDefault(require("uuid"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var httpHeaders = {};

function getIFrameBody(iframe) {
  var document = iframe.contentWindow || iframe.contentDocument;
  return (document.document || document).body;
}

function toHtml(key, value) {
  return "<input\n    type=\"hidden\"\n    name=\"".concat(key, "\"\n    aria-label=\"").concat(key, "\"\n    value=\"").concat(_typeof(value) === 'object' ? JSON.stringify(value).replace(/"/g, '&quot;') : value, "\"\n  />");
}

function createIFrame(_ref) {
  var method = _ref.method,
      url = _ref.url,
      fields = _ref.fields;
  var iFrame = document.createElement('iframe');
  iFrame.style.display = 'none';
  iFrame.src = 'about:blank';

  iFrame.onload = function () {
    this.__frame__loaded = true;
  }; // Appending to document body to allow navigation away from the current
  // page and downloads in the background


  document.body.appendChild(iFrame);
  iFrame.__frame__loaded = false;
  var form = document.createElement('form');
  form.method = method.toUpperCase();
  form.action = url;
  form.innerHTML = fields;
  getIFrameBody(iFrame).appendChild(form);
  form.submit();
  return iFrame;
}

function download(_ref2) {
  var url = _ref2.url,
      params = _ref2.params,
      _ref2$method = _ref2.method,
      method = _ref2$method === void 0 ? 'GET' : _ref2$method,
      _ref2$body = _ref2.body,
      body = _ref2$body === void 0 ? {} : _ref2$body;
  var downloadKey = (0, _uuid["default"])();

  var resolveOnDownload = function resolveOnDownload() {
    return Promise.resolve();
  };

  createIFrame({
    method: method,
    url: url,
    fields: Object.entries(_objectSpread({
      params: params,
      httpHeaders: httpHeaders
    }, body, {
      downloadKey: downloadKey
    })).map(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          key = _ref4[0],
          value = _ref4[1];

      return toHtml(key, value);
    }).join('\n')
  });
  return resolveOnDownload;
}

var addDownloadHttpHeaders = function addDownloadHttpHeaders(headers) {
  httpHeaders = _objectSpread({}, httpHeaders, {}, headers);
};

exports.addDownloadHttpHeaders = addDownloadHttpHeaders;
var _default = download;
exports["default"] = _default;