"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.removeSQON = exports.makeSQON = exports.getSQONValue = exports.fieldInCurrentSQON = exports.inCurrentSQON = exports.currentFieldValue = exports.setSQONContent = exports.setSQON = exports.mergeQuery = exports.currentFilterValue = exports.replaceFilterSQON = exports.addInSQON = exports.replaceSQON = exports.toggleSQON = exports.addInValue = exports.combineValues = void 0;

var _uri = require("../utils/uri");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function compareTerms(a, b) {
  return a.op.toLowerCase() === b.op.toLowerCase() && (a.content.field ? a.content.field === b.content.field : a.content.entity === b.content.entity);
}

var sortSQON = function sortSQON(a, b) {
  if (a.content.field && b.content.field) {
    return a.content.field.localeCompare(b.content.field);
  } else if (a.content.field || b.content.field) {
    return a.content.field ? -1 : 1;
  } else {
    return 0;
  }
};

var combineValues = function combineValues(x, y) {
  var xValue = [].concat(x.content.value || []);
  var yValue = [].concat(y.content.value || []);
  if (xValue.length === 0 && yValue.length === 0) return null;
  if (xValue.length === 0) return y;
  if (yValue.length === 0) return x;
  var merged = {
    op: x.op,
    content: {
      field: x.content.field,
      value: xValue.reduce(function (acc, v) {
        if (acc.includes(v)) return acc.filter(function (f) {
          return f !== v;
        });
        return [].concat(_toConsumableArray(acc), [v]);
      }, yValue).sort()
    }
  };
  return merged.content.value.length ? merged : null;
};

exports.combineValues = combineValues;

var addInValue = function addInValue(x, y) {
  var xValue = [].concat(x.content.value || []);
  var yValue = [].concat(y.content.value || []);
  if (xValue.length === 0 && yValue.length === 0) return null;
  if (xValue.length === 0) return y;
  if (yValue.length === 0) return x;
  var merged = {
    op: 'in',
    content: {
      field: x.content.field,
      value: xValue.reduce(function (acc, v) {
        if (acc.includes(v)) return acc;
        return [].concat(_toConsumableArray(acc), [v]);
      }, yValue).sort()
    }
  };
  return merged.content.value.length ? merged : null;
};

exports.addInValue = addInValue;

var toggleSQON = function toggleSQON(q, ctxq) {
  if (!ctxq && !q) return null;
  if (!ctxq) return q;
  if (!q) return ctxq;
  var merged = {
    op: 'and',
    content: ctxq.content.reduce(function (acc, ctx) {
      var found = acc.find(function (a) {
        return compareTerms(a, ctx);
      });
      if (!found) return [].concat(_toConsumableArray(acc), [ctx]);
      return [].concat(_toConsumableArray(acc.filter(function (y) {
        return !compareTerms(y, found);
      })), [combineValues(found, ctx)]).filter(Boolean);
    }, q.content).sort(sortSQON)
  };
  return merged.content.length ? merged : null;
};

exports.toggleSQON = toggleSQON;

var replaceSQON = function replaceSQON(q, ctxq) {
  if (!ctxq && !q) return null;
  if (!ctxq) return q;
  if (!q) return ctxq;
  var merged = {
    op: 'and',
    content: ctxq.content.reduce(function (acc, ctx) {
      var found = acc.find(function (a) {
        return compareTerms(a, ctx);
      });
      if (!found) return [].concat(_toConsumableArray(acc), [ctx]);
      return acc;
    }, q.content).sort(sortSQON)
  };
  return merged.content.length ? merged : null;
};

exports.replaceSQON = replaceSQON;

var addInSQON = function addInSQON(q, ctxq) {
  if (!ctxq && !q) return null;
  if (!ctxq) return q;
  if (!q) return ctxq;
  var merged = {
    op: 'and',
    content: ctxq.content.reduce(function (acc, ctx) {
      var found = acc.find(function (a) {
        return compareTerms(a, ctx);
      });
      if (!found) return [].concat(_toConsumableArray(acc), [ctx]);
      return [].concat(_toConsumableArray(acc.filter(function (y) {
        return y.content.field !== found.content.field;
      })), [addInValue(found, ctx)]).filter(Boolean);
    }, q.content).sort(sortSQON)
  };
  return merged.content.length ? merged : null;
};

exports.addInSQON = addInSQON;

var replaceFilterSQON = function replaceFilterSQON(q, ctxq) {
  var _q$content, _q$content$, _ctxq$content;

  var _ref = (q === null || q === void 0 ? void 0 : (_q$content = q.content) === null || _q$content === void 0 ? void 0 : (_q$content$ = _q$content[0]) === null || _q$content$ === void 0 ? void 0 : _q$content$.content) || {},
      entity = _ref.entity,
      fields = _ref.fields,
      value = _ref.value;

  var merged = {
    op: 'and',
    content: [].concat(_toConsumableArray((ctxq === null || ctxq === void 0 ? void 0 : (_ctxq$content = ctxq.content) === null || _ctxq$content === void 0 ? void 0 : _ctxq$content.filter(function (x) {
      return entity ? !(x.op === 'filter' && x.content.entity === entity) : x.op !== 'filter';
    })) || []), _toConsumableArray(!(fields === null || fields === void 0 ? void 0 : fields.length) || !(value === null || value === void 0 ? void 0 : value.length) ? [] : q.content)).sort(sortSQON)
  };
  return merged.content.length ? merged : null;
};

exports.replaceFilterSQON = replaceFilterSQON;

var currentFilterValue = function currentFilterValue(sqon) {
  var _sqon$content, _sqon$content$find, _sqon$content$find$co;

  var entity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return (sqon === null || sqon === void 0 ? void 0 : (_sqon$content = sqon.content) === null || _sqon$content === void 0 ? void 0 : (_sqon$content$find = _sqon$content.find(function (_ref2) {
    var op = _ref2.op,
        content = _ref2.content;
    return op === 'filter' && (!entity || entity === content.entity);
  })) === null || _sqon$content$find === void 0 ? void 0 : (_sqon$content$find$co = _sqon$content$find.content) === null || _sqon$content$find$co === void 0 ? void 0 : _sqon$content$find$co.value) || '';
};

exports.currentFilterValue = currentFilterValue;

var mergeFns = function mergeFns(v) {
  switch (v) {
    case 'toggle':
      return toggleSQON;

    case 'add':
      return addInSQON;

    default:
      return replaceSQON;
  }
};

var filterByWhitelist = function filterByWhitelist(obj, wls) {
  return Object.keys(obj || {}).reduce(function (acc, k) {
    return wls.includes(k) ? _objectSpread({}, acc, _defineProperty({}, k, obj[k])) : acc;
  }, {});
};

var mergeQuery = function mergeQuery(q, c, mergeType, whitelist) {
  var ctx = c || {};
  var query = q || {};
  var wlCtx = whitelist ? filterByWhitelist(ctx, whitelist) : ctx;

  var mQs = _objectSpread({}, wlCtx, {}, query);

  return _objectSpread({}, mQs, {
    sqon: mergeFns(mergeType)(query.sqon, (0, _uri.parseSQONParam)(wlCtx.sqon, null))
  });
};

exports.mergeQuery = mergeQuery;

var setSQON = function setSQON(_ref3) {
  var value = _ref3.value,
      field = _ref3.field;
  return {
    op: 'and',
    content: [{
      op: 'in',
      content: {
        field: field,
        value: [].concat(value || [])
      }
    }]
  };
};

exports.setSQON = setSQON;

var setSQONContent = function setSQONContent(sqonContent) {
  return sqonContent.length ? {
    op: 'and',
    content: sqonContent
  } : null;
}; // returns current value for a given field / operation


exports.setSQONContent = setSQONContent;

var currentFieldValue = function currentFieldValue(_ref4) {
  var _sqon$content2, _sqon$content2$find;

  var sqon = _ref4.sqon,
      dotField = _ref4.dotField,
      op = _ref4.op;
  return sqon === null || sqon === void 0 ? void 0 : (_sqon$content2 = sqon.content) === null || _sqon$content2 === void 0 ? void 0 : (_sqon$content2$find = _sqon$content2.find(function (content) {
    var _content$content;

    return ((_content$content = content.content) === null || _content$content === void 0 ? void 0 : _content$content.field) === dotField && content.op === op;
  })) === null || _sqon$content2$find === void 0 ? void 0 : _sqon$content2$find.content.value;
}; // true if field and value in


exports.currentFieldValue = currentFieldValue;

var inCurrentSQON = function inCurrentSQON(_ref5) {
  var currentSQON = _ref5.currentSQON,
      value = _ref5.value,
      dotField = _ref5.dotField;
  var content = currentSQON === null || currentSQON === void 0 ? void 0 : currentSQON.content;
  return (Array.isArray(content) ? content : [].concat(currentSQON || [])).some(function (f) {
    var _f$content;

    return ((_f$content = f.content) === null || _f$content === void 0 ? void 0 : _f$content.field) === dotField && [].concat(f.content.value || []).includes(value);
  });
}; // true if field in


exports.inCurrentSQON = inCurrentSQON;

var fieldInCurrentSQON = function fieldInCurrentSQON(_ref6) {
  var currentSQON = _ref6.currentSQON,
      field = _ref6.field;
  return currentSQON.some(function (f) {
    return f.content.field === field;
  });
};

exports.fieldInCurrentSQON = fieldInCurrentSQON;

var getSQONValue = function getSQONValue(_ref7) {
  var currentSQON = _ref7.currentSQON,
      dotField = _ref7.dotField;
  return currentSQON.find(function (f) {
    return f.content.field === dotField;
  });
};

exports.getSQONValue = getSQONValue;

var makeSQON = function makeSQON(fields) {
  if (!fields.length) return {};
  return {
    op: 'and',
    content: fields.map(function (item) {
      return {
        op: 'in',
        content: {
          field: item.field,
          value: [].concat(item.value || [])
        }
      };
    })
  };
};

exports.makeSQON = makeSQON;

var removeSQON = function removeSQON(field, sqon) {
  if (!sqon) return null;
  if (!field) return sqon;
  if (Object.keys(sqon).length === 0) return sqon;

  if (!Array.isArray(sqon.content)) {
    var fieldFilter = typeof field === 'function' ? field : function (f) {
      return f === field;
    };
    return fieldFilter(sqon.content.field) ? null : sqon;
  }

  var filteredContent = sqon.content.map(function (q) {
    return removeSQON(field, q);
  }).filter(Boolean);
  return filteredContent.length ? _objectSpread({}, sqon, {
    content: filteredContent
  }) : null;
};

exports.removeSQON = removeSQON;
var _default = makeSQON;
exports["default"] = _default;