"use strict";

var _utils = require("../utils");

var _uri = require("../../utils/uri");

var baseFilter = {
  op: 'and',
  content: [{
    op: 'in',
    content: {
      field: 'file.file_id',
      value: ['fileA']
    }
  }]
};
var fileBFilter = {
  op: 'and',
  content: [{
    op: 'in',
    content: {
      field: 'file.file_id',
      value: ['fileB']
    }
  }]
};
var caseFilter = {
  op: 'and',
  content: [{
    op: 'in',
    content: {
      field: 'case.case_id',
      value: ['somecase']
    }
  }]
};
var rangeFromFilter = {
  op: '>=',
  content: {
    field: 'cases.diagnoses.age_at_diagnosis',
    value: [5113]
  }
};
var rangeToFilter = {
  op: '<=',
  content: {
    field: 'cases.diagnoses.age_at_diagnosis',
    value: [33236]
  }
};
var primarySiteFilter = {
  op: 'in',
  content: {
    field: 'cases.primary_site',
    value: ['Lung']
  }
};
describe('addInSQON', function () {
  it('should return the base sqon if no query', function () {
    var result = (0, _utils.addInSQON)(undefined, baseFilter);
    expect(result).toEqual(baseFilter);
  });
  it('should return the query if no base sqon', function () {
    expect(false).toBe(false);
  });
  it('should add a value to base', function () {
    var result = (0, _utils.addInSQON)(fileBFilter, baseFilter);
    expect(result).toEqual({
      op: 'and',
      content: [{
        op: 'in',
        content: {
          field: 'file.file_id',
          value: ['fileA', 'fileB']
        }
      }]
    });
  });
  it('should keep other fields in the filter when adding', function () {
    var result = (0, _utils.addInSQON)(fileBFilter, (0, _utils.addInSQON)(caseFilter, baseFilter));
    expect(result).toMatchObject({
      op: 'and',
      content: [{
        op: 'in',
        content: {
          field: 'case.case_id',
          value: ['somecase']
        }
      }, {
        op: 'in',
        content: {
          field: 'file.file_id',
          value: ['fileA', 'fileB']
        }
      }]
    });
  });
  it('should not remove an existing value', function () {
    var result = (0, _utils.addInSQON)(baseFilter, baseFilter);
    expect(result).toEqual(result);
  });
});
describe('toggleSQON', function () {
  it('should add a value to base', function () {
    var result = (0, _utils.toggleSQON)(fileBFilter, baseFilter);
    expect(result).toEqual({
      op: 'and',
      content: [{
        op: 'in',
        content: {
          field: 'file.file_id',
          value: ['fileA', 'fileB']
        }
      }]
    });
  });
  it('should remove an existing value', function () {
    var result = (0, _utils.toggleSQON)(baseFilter, baseFilter);
    expect(result).toEqual(null);
  });
  var q = {
    op: 'and',
    content: [primarySiteFilter]
  };
  var ctxq = {
    op: 'and',
    content: [rangeFromFilter, rangeToFilter, primarySiteFilter]
  };
  it('should not change the range filter if an unrelated filter was removed', function () {
    var result = (0, _utils.toggleSQON)(q, ctxq);
    expect(result).toEqual({
      op: 'and',
      content: [rangeFromFilter, rangeToFilter]
    });
  });
  it('should not change the range filter if an unrelated filter was removed, regardless of order', function () {
    var result = (0, _utils.toggleSQON)(ctxq, q);
    expect(result).toEqual({
      op: 'and',
      content: [rangeFromFilter, rangeToFilter]
    });
  });
});
describe('mergeQuery', function () {
  it('should not change the range filter if an unrelated filter was removed', function () {
    var q = {
      offset: 0,
      sqon: {
        op: 'and',
        content: [primarySiteFilter]
      }
    };
    var c = {
      sqon: (0, _uri.stringifyJSONParam)({
        op: 'and',
        content: [rangeFromFilter, rangeToFilter, primarySiteFilter]
      })
    };
    var result = (0, _utils.mergeQuery)(q, c, 'toggle', null);
    var expectedResult = {
      offset: 0,
      sqon: {
        op: 'and',
        content: [rangeFromFilter, rangeToFilter]
      }
    };
    expect(result).toEqual(expectedResult);
  });
});