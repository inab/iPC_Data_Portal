"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = require("lodash");

var _Aggs = require("../Aggs");

var _Query = _interopRequireDefault(require("../Query"));

var _Stats = require("./Stats");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CombinedStatsQuery = function CombinedStatsQuery(_ref) {
  var api = _ref.api,
      projectId = _ref.projectId,
      graphqlField = _ref.graphqlField,
      sqon = _ref.sqon,
      stats = _ref.stats,
      _render = _ref.render;
  return _react.default.createElement(_Aggs.AggsState, _extends({
    api: api,
    projectId: projectId,
    graphqlField: graphqlField
  }, {
    render: function render(_ref2) {
      var aggs = _ref2.aggs;
      var decoratedStats = stats.map(function (s, i) {
        return _objectSpread({
          key: "q".concat(i),
          formatResult: function formatResult(x) {
            return x;
          },
          aggsField: aggs.find(function (x) {
            return x.field === (0, _Stats.underscoreField)(s.field);
          })
        }, s);
      });
      return _react.default.createElement(_Query.default, _extends({
        api: api,
        projectId: projectId,
        graphqlField: graphqlField
      }, {
        renderError: true,
        name: "CombinedStatsQuery",
        shouldFetch: aggs.length,
        variables: {
          sqon: sqon
        },
        query: "\n            query($sqon: JSON) {\n              data: ".concat(graphqlField, " {\n                ").concat(decoratedStats.map(function (_ref3) {
          var key = _ref3.key,
              aggsField = _ref3.aggsField,
              isRoot = _ref3.isRoot;
          return "".concat(key, ": ").concat(isRoot ? "hits(filters: $sqon) {\n                            total\n                          }" : "aggregations(filters: $sqon, aggregations_filter_themselves: true) {\n                            ".concat((aggsField === null || aggsField === void 0 ? void 0 : aggsField.query) || "", "\n                          }"));
        }), "\n              }\n            }\n          "),
        render: function render(_ref4) {
          var data = _ref4.data,
              loading = _ref4.loading;
          return _render({
            loading: loading,
            data: decoratedStats.reduce(function (acc, x) {
              acc[x.label] = x.formatResult((0, _lodash.get)(data, "data.".concat(x.key, ".").concat(x.isRoot ? "total" : (0, _Stats.accessor)(x)), null));
              return acc;
            }, {})
          });
        }
      }));
    }
  }));
};

var _default = CombinedStatsQuery;
exports.default = _default;