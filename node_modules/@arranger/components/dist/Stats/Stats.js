"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.accessor = exports.underscoreField = void 0;

var _emotion = require("emotion");

var _react = _interopRequireWildcard(require("react"));

var _reactSpinkit = _interopRequireDefault(require("react-spinkit"));

var _lodash = require("lodash");

var _Query = _interopRequireDefault(require("../Query"));

var _Aggs = require("../Aggs");

var _formatNumber = _interopRequireDefault(require("../utils/formatNumber"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var underscoreField = function underscoreField(str) {
  return (str || '').split('.').join('__');
};

exports.underscoreField = underscoreField;

var accessor = function accessor(_ref) {
  var aggsField = _ref.aggsField,
      dataAccessor = _ref.dataAccessor;
  return "".concat(underscoreField(aggsField === null || aggsField === void 0 ? void 0 : aggsField.field), ".").concat(dataAccessor || ((aggsField === null || aggsField === void 0 ? void 0 : aggsField.isTerms) ? "buckets.length" : "stats.count"));
};

exports.accessor = accessor;

var constructQuery = function constructQuery(_ref2) {
  var graphqlField = _ref2.graphqlField,
      query = _ref2.query,
      _ref2$resolver = _ref2.resolver,
      resolver = _ref2$resolver === void 0 ? 'aggregations' : _ref2$resolver;
  return "\n  query($sqon: JSON) {\n    data: ".concat(graphqlField, " {\n      ").concat(resolver, "(\n        filters: $sqon\n        ").concat(resolver === 'aggregations' ? 'include_missing: false' : '', "\n        ").concat(resolver === 'aggregations' ? 'aggregations_filter_themselves: true' : '', "\n      ) {\n        ").concat(query, "\n      }\n    }\n  }\n");
};

var LoadingSpinner = function LoadingSpinner() {
  return _react["default"].createElement(_reactSpinkit["default"], {
    fadeIn: "none",
    name: "circle",
    color: "#a9adc0",
    style: {
      width: 15,
      height: 15,
      marginRight: 9
    }
  });
};

var RootQuery = function RootQuery(_ref3) {
  var graphqlField = _ref3.graphqlField,
      _render = _ref3.render,
      sqon = _ref3.sqon,
      props = _objectWithoutProperties(_ref3, ["graphqlField", "render", "sqon"]);

  return _react["default"].createElement(_Query["default"], _extends({}, props, {
    shouldFetch: true,
    renderError: true,
    variables: {
      sqon: sqon
    },
    name: "StatsRootQuery",
    query: constructQuery({
      graphqlField: graphqlField,
      resolver: 'hits',
      query: 'total'
    }),
    render: function render(_ref4) {
      var data = _ref4.data,
          error = _ref4.error,
          loading = _ref4.loading,
          value = _ref4.value;
      return _render({
        loading: loading,
        value: (0, _lodash.get)(data, "data.hits.total", '')
      });
    }
  }));
};

var FieldQuery = function FieldQuery(_ref5) {
  var aggs = _ref5.aggsState.aggs,
      field = _ref5.field,
      _render2 = _ref5.render,
      sqon = _ref5.sqon,
      graphqlField = _ref5.graphqlField,
      dataAccessor = _ref5.dataAccessor,
      _ref5$formatResult = _ref5.formatResult,
      formatResult = _ref5$formatResult === void 0 ? function (x) {
    return x;
  } : _ref5$formatResult,
      _ref5$aggsField = _ref5.aggsField,
      aggsField = _ref5$aggsField === void 0 ? aggs.find(function (x) {
    return x.field === underscoreField(field);
  }) : _ref5$aggsField,
      props = _objectWithoutProperties(_ref5, ["aggsState", "field", "render", "sqon", "graphqlField", "dataAccessor", "formatResult", "aggsField"]);

  return _react["default"].createElement(_Query["default"], _extends({}, props, {
    renderError: true,
    name: "StatsFieldQuery",
    shouldFetch: aggs.length,
    variables: {
      sqon: sqon
    },
    query: constructQuery({
      graphqlField: graphqlField,
      query: aggsField === null || aggsField === void 0 ? void 0 : aggsField.query
    }),
    render: function render(_ref6) {
      var data = _ref6.data,
          loading = _ref6.loading;
      return _render2({
        loading: loading,
        value: formatResult((0, _lodash.get)(data, "data.aggregations.".concat(accessor({
          aggsField: aggsField,
          dataAccessor: dataAccessor
        })), ''))
      });
    }
  }));
};

var Stat = function Stat(_ref7) {
  var _ref7$icon = _ref7.icon,
      icon = _ref7$icon === void 0 ? '' : _ref7$icon,
      _ref7$label = _ref7.label,
      label = _ref7$label === void 0 ? '' : _ref7$label,
      _ref7$isRoot = _ref7.isRoot,
      isRoot = _ref7$isRoot === void 0 ? false : _ref7$isRoot,
      LoadingSpinnerComponent = _ref7.LoadingSpinnerComponent,
      _ref7$QueryComponent = _ref7.QueryComponent,
      QueryComponent = _ref7$QueryComponent === void 0 ? isRoot ? RootQuery : FieldQuery : _ref7$QueryComponent,
      props = _objectWithoutProperties(_ref7, ["icon", "label", "isRoot", "LoadingSpinnerComponent", "QueryComponent"]);

  return _react["default"].createElement("div", {
    className: "stat-container"
  }, icon, _react["default"].createElement("div", {
    className: "stat-content"
  }, _react["default"].createElement(QueryComponent, _extends({}, props, {
    render: function render(x) {
      return x.loading ? _react["default"].createElement(LoadingSpinnerComponent, null) : (0, _formatNumber["default"])(x.value);
    }
  }))), _react["default"].createElement("div", {
    className: "stat-label"
  }, label));
};

var _default = function _default(_ref8) {
  var api = _ref8.api,
      projectId = _ref8.projectId,
      graphqlField = _ref8.graphqlField,
      stats = _ref8.stats,
      className = _ref8.className,
      render = _ref8.render,
      small = _ref8.small,
      transparent = _ref8.transparent,
      _ref8$LoadingSpinnerC = _ref8.LoadingSpinnerComponent,
      LoadingSpinnerComponent = _ref8$LoadingSpinnerC === void 0 ? LoadingSpinner : _ref8$LoadingSpinnerC,
      props = _objectWithoutProperties(_ref8, ["api", "projectId", "graphqlField", "stats", "className", "render", "small", "transparent", "LoadingSpinnerComponent"]);

  return _react["default"].createElement("div", {
    className: (0, _emotion.merge)(
    /*#__PURE__*/
    (0, _emotion.css)("display:flex;align-items:center;", className, ";") + (" " + "\n      stats-container\n      ".concat(small ? "small" : "", "\n      ").concat(transparent ? "transparent" : "", "\n    ")))
  }, _react["default"].createElement(_Aggs.AggsState, _extends({
    api: api,
    projectId: projectId,
    graphqlField: graphqlField
  }, {
    render: function render(aggsState) {
      return stats.map(function (stat, i) {
        return _react["default"].createElement(_react.Fragment, {
          key: stat.label
        }, i > 0 && _react["default"].createElement("div", {
          key: i,
          className: "stats-line"
        }), _react["default"].createElement(Stat, _extends({
          aggsState: aggsState,
          api: api,
          projectId: projectId,
          graphqlField: graphqlField,
          LoadingSpinnerComponent: LoadingSpinnerComponent
        }, props, stat)));
      });
    }
  })));
};

exports["default"] = _default;