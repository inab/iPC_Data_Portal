"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _State = _interopRequireDefault(require("../State"));

require("./Input.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var _default = function _default(_ref) {
  var className = _ref.className,
      style = _ref.style,
      icon = _ref.icon,
      rightIcon = _ref.rightIcon,
      componentRef = _ref.componentRef,
      _ref$Component = _ref.Component,
      Component = _ref$Component === void 0 ? 'input' : _ref$Component,
      props = _objectWithoutProperties(_ref, ["className", "style", "icon", "rightIcon", "componentRef", "Component"]);

  return _react["default"].createElement(_State["default"], {
    initial: {
      isFocused: false
    },
    render: function render(_ref2) {
      var update = _ref2.update,
          isFocused = _ref2.isFocused;
      return _react["default"].createElement("div", {
        style: _objectSpread({}, style, {
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          overflow: 'hidden'
        }),
        ref: componentRef,
        className: "inputWrapper ".concat(isFocused ? 'focused' : '', " ").concat(className)
      }, _react["default"].createElement("span", {
        className: "inputIcon"
      }, icon), _react["default"].createElement(Component, _extends({
        onFocus: function onFocus() {
          return update({
            isFocused: true
          });
        },
        onBlur: function onBlur() {
          return update({
            isFocused: false
          });
        },
        style: {
          border: 'none',
          flex: 1
        }
      }, props, {
        autoFocus: true
      })), _react["default"].createElement("span", {
        className: "inputRightIcon"
      }, rightIcon));
    }
  });
};

exports["default"] = _default;