"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;
exports.opSwitch = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../constants");

var _normalizeFilters = _interopRequireDefault(require("./normalizeFilters"));

var _esFilter = require("../utils/esFilter");

var _wrappers;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var wrapFilter = function wrapFilter(_ref) {
  var esFilter = _ref.esFilter,
      nestedFields = _ref.nestedFields,
      filter = _ref.filter,
      isNot = _ref.isNot;
  return filter.content.field.split('.').slice(0, -1).map(function (p, i, segments) {
    return segments.slice(0, i + 1).join('.');
  }).filter(function (p) {
    return nestedFields.includes(p);
  }).reverse().reduce(function (esFilter, path, i) {
    return (0, _esFilter.wrapNested)(esFilter, path);
  }, isNot ? (0, _esFilter.wrapMustNot)(esFilter) : esFilter);
};

function getRegexFilter(_ref2) {
  var nestedFields = _ref2.nestedFields,
      filter = _ref2.filter;

  var op = filter.op,
      _filter$content = filter.content,
      field = _filter$content.field,
      _filter$content$value = _slicedToArray(_filter$content.value, 1),
      value = _filter$content$value[0];

  var esFilter = wrapFilter({
    filter: filter,
    nestedFields: nestedFields,
    esFilter: {
      regexp: _defineProperty({}, field, value.replace('*', '.*'))
    },
    isNot: _constants.NOT_IN_OP === op
  });
  return op === _constants.SOME_NOT_IN_OP ? (0, _esFilter.wrapMustNot)(esFilter) : esFilter;
}

function getTermFilter(_ref3) {
  var _terms;

  var nestedFields = _ref3.nestedFields,
      filter = _ref3.filter;
  var op = filter.op,
      _filter$content2 = filter.content,
      value = _filter$content2.value,
      field = _filter$content2.field;
  var esFilter = wrapFilter({
    filter: filter,
    nestedFields: nestedFields,
    esFilter: {
      terms: (_terms = {}, _defineProperty(_terms, field, value.map(function (item) {
        return item || '';
      })), _defineProperty(_terms, "boost", 0), _terms)
    },
    isNot: _constants.NOT_IN_OP === op
  });
  return op === _constants.SOME_NOT_IN_OP ? (0, _esFilter.wrapMustNot)(esFilter) : esFilter;
}

function getFuzzyFilter(_ref4) {
  var nestedFields = _ref4.nestedFields,
      filter = _ref4.filter;
  var content = filter.content;
  var value = content.value,
      fields = content.fields; // group queries by their nesting level

  var sortedNested = nestedFields.slice().sort(function (a, b) {
    return b.length - a.length;
  });
  var nestedMap = fields.reduce(function (acc, field) {
    var group = sortedNested.find(function (y) {
      return field.includes(y);
    }) || '';

    if (acc[group]) {
      acc[group].push(field);
    } else {
      acc[group] = [field];
    }

    return acc;
  }, {}); // construct one multi match per nested group

  return (0, _esFilter.wrapShould)(Object.values(nestedMap).map(function (fields) {
    return wrapFilter({
      filter: _objectSpread({}, filter, {
        content: _objectSpread({}, content, {
          field: fields[0]
        })
      }),
      nestedFields: nestedFields,
      esFilter: (0, _esFilter.wrapShould)(fields.map(function (field) {
        return _defineProperty({}, _constants.ES_WILDCARD, _defineProperty({}, field, {
          value: "".concat(value)
        }));
      }))
    });
  }));
}

function getMissingFilter(_ref6) {
  var nestedFields = _ref6.nestedFields,
      filter = _ref6.filter;
  var field = filter.content.field;
  return wrapFilter({
    esFilter: {
      exists: {
        field: field,
        boost: 0
      }
    },
    nestedFields: nestedFields,
    filter: filter,
    isNot: true
  });
}

function getRangeFilter(_ref7) {
  var nestedFields = _ref7.nestedFields,
      filter = _ref7.filter;
  var op = filter.op,
      _filter$content3 = filter.content,
      field = _filter$content3.field,
      value = _filter$content3.value;
  return wrapFilter({
    filter: filter,
    nestedFields: nestedFields,
    esFilter: {
      range: _defineProperty({}, field, _defineProperty({
        boost: 0
      }, op, (0, _esFilter.toEsRangeValue)([_constants.GT_OP, _constants.GTE_OP].includes(op) ? _lodash["default"].max(value) : _lodash["default"].min(value))))
    }
  });
}

function collapseNestedFilters(_ref8) {
  var esFilter = _ref8.esFilter,
      bools = _ref8.bools;
  var filterIsNested = (0, _esFilter.isNested)(esFilter);
  var basePath = [].concat(_toConsumableArray(filterIsNested ? [_constants.ES_NESTED, _constants.ES_QUERY] : []), [_constants.ES_BOOL]);
  var path = [_constants.ES_MUST, _constants.ES_MUST_NOT].map(function (p) {
    return [].concat(_toConsumableArray(basePath), [p]);
  }).find(function (path) {
    return _lodash["default"].get(esFilter, path);
  });
  var found = path && bools.find(function (bool) {
    return filterIsNested ? (0, _esFilter.readPath)(bool) === (0, _esFilter.readPath)(esFilter) : _lodash["default"].get(bool, path);
  });
  return [].concat(_toConsumableArray(bools.filter(function (bool) {
    return bool !== found;
  })), [found ? (0, _esFilter.mergePath)(found, path, filterIsNested ? collapseNestedFilters({
    esFilter: _lodash["default"].get(esFilter, path)[0],
    bools: _lodash["default"].get(found, path, [])
  }) : [].concat(_toConsumableArray(_lodash["default"].get(found, path)), _toConsumableArray(_lodash["default"].get(esFilter, path)))) : esFilter]);
}

var wrappers = (_wrappers = {}, _defineProperty(_wrappers, _constants.AND_OP, _esFilter.wrapMust), _defineProperty(_wrappers, _constants.OR_OP, _esFilter.wrapShould), _defineProperty(_wrappers, _constants.NOT_OP, _esFilter.wrapMustNot), _wrappers);

function getGroupFilter(_ref9) {
  var _esFilters$, _esFilters$2;

  var nestedFields = _ref9.nestedFields,
      _ref9$filter = _ref9.filter,
      content = _ref9$filter.content,
      op = _ref9$filter.op,
      pivot = _ref9$filter.pivot;
  var applyBooleanWrapper = wrappers[op];
  var esFilters = content.map(function (filter) {
    return opSwitch({
      nestedFields: nestedFields,
      filter: filter
    });
  });
  var isNested = !!((_esFilters$ = esFilters[0]) === null || _esFilters$ === void 0 ? void 0 : _esFilters$.nested);

  if (isNested && pivot === ((_esFilters$2 = esFilters[0]) === null || _esFilters$2 === void 0 ? void 0 : _esFilters$2.nested.path)) {
    var flattned = esFilters.reduce(function (bools, esFilter) {
      return op === _constants.AND_OP || op === _constants.NOT_OP ? collapseNestedFilters({
        esFilter: esFilter,
        bools: bools
      }) : [].concat(_toConsumableArray(bools), [esFilter]);
    }, []);
    return applyBooleanWrapper(flattned);
  } else {
    return applyBooleanWrapper(esFilters);
  }
}

function getSetFilter(_ref10) {
  var nestedFields = _ref10.nestedFields,
      filter = _ref10.filter,
      _ref10$filter = _ref10.filter,
      content = _ref10$filter.content,
      op = _ref10$filter.op;
  return wrapFilter({
    isNot: op === _constants.NOT_IN_OP,
    filter: filter,
    nestedFields: nestedFields,
    esFilter: {
      terms: _defineProperty({
        boost: 0
      }, content.field, {
        index: _constants.ES_ARRANGER_SET_INDEX,
        type: _constants.ES_ARRANGER_SET_TYPE,
        id: _lodash["default"].flatMap([content.value])[0].replace('set_id:', ''),
        path: 'ids'
      })
    }
  });
}

var getBetweenFilter = function getBetweenFilter(_ref11) {
  var _field2;

  var nestedFields = _ref11.nestedFields,
      filter = _ref11.filter;
  var _filter$content4 = filter.content,
      field = _filter$content4.field,
      value = _filter$content4.value;
  return wrapFilter({
    filter: filter,
    nestedFields: nestedFields,
    esFilter: {
      range: _defineProperty({}, field, (_field2 = {
        boost: 0
      }, _defineProperty(_field2, _constants.GTE_OP, _lodash["default"].min(value)), _defineProperty(_field2, _constants.LTE_OP, _lodash["default"].max(value)), _field2))
    }
  });
};

var opSwitch = function opSwitch(_ref12) {
  var nestedFields = _ref12.nestedFields,
      filter = _ref12.filter;
  var op = filter.op,
      pivot = filter.pivot,
      value = filter.content.value; // we need a way to handle object fields before the following error is valid
  // if (pivot && pivot !== '.' && !nestedFields.includes(pivot)) {
  //   throw new Error(`Invalid pivot field "${pivot}", not a nested field`);
  // }

  if ([_constants.OR_OP, _constants.AND_OP, _constants.NOT_OP].includes(op)) {
    return getGroupFilter({
      nestedFields: nestedFields,
      filter: filter
    });
  } else if ([_constants.IN_OP, _constants.NOT_IN_OP, _constants.SOME_NOT_IN_OP].includes(op)) {
    if ("".concat(value[0]).includes(_constants.REGEX)) {
      return getRegexFilter({
        nestedFields: nestedFields,
        filter: filter
      });
    } else if ("".concat(value[0]).includes(_constants.SET_ID)) {
      return getSetFilter({
        nestedFields: nestedFields,
        filter: filter
      });
    } else if ("".concat(value[0]).includes(_constants.MISSING)) {
      return getMissingFilter({
        nestedFields: nestedFields,
        filter: filter
      });
    } else {
      return getTermFilter({
        nestedFields: nestedFields,
        filter: filter
      });
    }
  } else if ([_constants.ALL_OP].includes(op)) {
    return getGroupFilter({
      nestedFields: nestedFields,
      filter: {
        op: _constants.AND_OP,
        pivot: pivot || '.',
        content: filter.content.value.map(function (v) {
          return {
            op: _constants.IN_OP,
            content: {
              field: filter.content.field,
              value: [v]
            }
          };
        })
      }
    });
  } else if ([_constants.GT_OP, _constants.GTE_OP, _constants.LT_OP, _constants.LTE_OP].includes(op)) {
    return getRangeFilter({
      nestedFields: nestedFields,
      filter: filter
    });
  } else if ([_constants.BETWEEN_OP].includes(op)) {
    return getBetweenFilter({
      nestedFields: nestedFields,
      filter: filter
    });
  } else if (_constants.FILTER_OP === op) {
    return getFuzzyFilter({
      nestedFields: nestedFields,
      filter: filter
    });
  } else {
    throw new Error('unknown op');
  }
};

exports.opSwitch = opSwitch;

function _default(_ref13) {
  var nestedFields = _ref13.nestedFields,
      rawFilters = _ref13.filters;
  if (Object.keys(rawFilters || {}).length === 0) return {};
  return opSwitch({
    nestedFields: nestedFields,
    filter: (0, _normalizeFilters["default"])(rawFilters)
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,