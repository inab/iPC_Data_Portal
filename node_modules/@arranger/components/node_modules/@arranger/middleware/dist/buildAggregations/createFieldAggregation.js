"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = require("lodash");

var _constants = require("../constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MAX_AGGREGATION_SIZE = 300000;
var HISTOGRAM_INTERVAL_DEFAULT = 1000;

var createNumericAggregation = function createNumericAggregation(_ref) {
  var type = _ref.type,
      field = _ref.field,
      graphqlField = _ref.graphqlField;
  var args = (0, _lodash.get)(graphqlField, [type, '__arguments', 0]) || {};
  return _defineProperty({}, "".concat(field, ":").concat(type), _defineProperty({}, type, _objectSpread({
    field: field
  }, type === _constants.HISTOGRAM ? {
    interval: (0, _lodash.get)(args, 'interval.value') || HISTOGRAM_INTERVAL_DEFAULT
  } : {})));
};

var createTermAggregation = function createTermAggregation(_ref3) {
  var _ref4;

  var field = _ref3.field,
      isNested = _ref3.isNested;
  return _ref4 = {}, _defineProperty(_ref4, field, _objectSpread({}, isNested ? {
    aggs: {
      rn: {
        reverse_nested: {}
      }
    }
  } : {}, {
    terms: {
      field: field,
      size: MAX_AGGREGATION_SIZE
    }
  })), _defineProperty(_ref4, "".concat(field, ":missing"), _objectSpread({}, isNested ? {
    aggs: {
      rn: {
        reverse_nested: {}
      }
    }
  } : {}, {
    missing: {
      field: field
    }
  })), _ref4;
};
/**
 * graphqlFields: output from `graphql-fields` (https://github.com/robrichard/graphql-fields)
 */


var _default = function _default(_ref5) {
  var field = _ref5.field,
      _ref5$graphqlField = _ref5.graphqlField,
      graphqlField = _ref5$graphqlField === void 0 ? {} : _ref5$graphqlField,
      _ref5$isNested = _ref5.isNested,
      isNested = _ref5$isNested === void 0 ? false : _ref5$isNested;
  var types = [_constants.BUCKETS, _constants.STATS, _constants.HISTOGRAM].filter(function (t) {
    return graphqlField[t];
  });
  return types.reduce(function (acc, type) {
    if (type === _constants.BUCKETS) {
      return Object.assign(acc, createTermAggregation({
        field: field,
        isNested: isNested
      }));
    } else if ([_constants.STATS, _constants.HISTOGRAM].includes(type)) {
      return Object.assign(acc, createNumericAggregation({
        type: type,
        field: field,
        graphqlField: graphqlField
      }));
    } else {
      return acc;
    }
  }, {});
};

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZEFnZ3JlZ2F0aW9ucy9jcmVhdGVGaWVsZEFnZ3JlZ2F0aW9uLmpzIl0sIm5hbWVzIjpbIk1BWF9BR0dSRUdBVElPTl9TSVpFIiwiSElTVE9HUkFNX0lOVEVSVkFMX0RFRkFVTFQiLCJjcmVhdGVOdW1lcmljQWdncmVnYXRpb24iLCJ0eXBlIiwiZmllbGQiLCJncmFwaHFsRmllbGQiLCJhcmdzIiwiSElTVE9HUkFNIiwiaW50ZXJ2YWwiLCJjcmVhdGVUZXJtQWdncmVnYXRpb24iLCJpc05lc3RlZCIsImFnZ3MiLCJybiIsInJldmVyc2VfbmVzdGVkIiwidGVybXMiLCJzaXplIiwibWlzc2luZyIsInR5cGVzIiwiQlVDS0VUUyIsIlNUQVRTIiwiZmlsdGVyIiwidCIsInJlZHVjZSIsImFjYyIsIk9iamVjdCIsImFzc2lnbiIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7Ozs7O0FBRUEsSUFBTUEsb0JBQW9CLEdBQUcsTUFBN0I7QUFDQSxJQUFNQywwQkFBMEIsR0FBRyxJQUFuQzs7QUFFQSxJQUFNQyx3QkFBd0IsR0FBRyxTQUEzQkEsd0JBQTJCLE9BQW1DO0FBQUEsTUFBaENDLElBQWdDLFFBQWhDQSxJQUFnQztBQUFBLE1BQTFCQyxLQUEwQixRQUExQkEsS0FBMEI7QUFBQSxNQUFuQkMsWUFBbUIsUUFBbkJBLFlBQW1CO0FBQ2xFLE1BQU1DLElBQUksR0FBRyxpQkFBSUQsWUFBSixFQUFrQixDQUFDRixJQUFELEVBQU8sYUFBUCxFQUFzQixDQUF0QixDQUFsQixLQUErQyxFQUE1RDtBQUNBLHVDQUNNQyxLQUROLGNBQ2VELElBRGYsdUJBRUtBLElBRkw7QUFHTUMsSUFBQUEsS0FBSyxFQUFMQTtBQUhOLEtBSVVELElBQUksS0FBS0ksb0JBQVQsR0FDQTtBQUNFQyxJQUFBQSxRQUFRLEVBQ04saUJBQUlGLElBQUosRUFBVSxnQkFBVixLQUErQkw7QUFGbkMsR0FEQSxHQUtBLEVBVFY7QUFhRCxDQWZEOztBQWlCQSxJQUFNUSxxQkFBcUIsR0FBRyxTQUF4QkEscUJBQXdCLFFBQXlCO0FBQUE7O0FBQUEsTUFBdEJMLEtBQXNCLFNBQXRCQSxLQUFzQjtBQUFBLE1BQWZNLFFBQWUsU0FBZkEsUUFBZTtBQUNyRCw0Q0FDR04sS0FESCxvQkFFUU0sUUFBUSxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBRTtBQUFFQyxNQUFBQSxFQUFFLEVBQUU7QUFBRUMsUUFBQUEsY0FBYyxFQUFFO0FBQWxCO0FBQU47QUFBUixHQUFILEdBQThDLEVBRjlEO0FBR0lDLElBQUFBLEtBQUssRUFBRTtBQUFFVixNQUFBQSxLQUFLLEVBQUxBLEtBQUY7QUFBU1csTUFBQUEsSUFBSSxFQUFFZjtBQUFmO0FBSFgsd0NBS01JLEtBTE4saUNBTVFNLFFBQVEsR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUU7QUFBRUMsTUFBQUEsRUFBRSxFQUFFO0FBQUVDLFFBQUFBLGNBQWMsRUFBRTtBQUFsQjtBQUFOO0FBQVIsR0FBSCxHQUE4QyxFQU45RDtBQU9JRyxJQUFBQSxPQUFPLEVBQUU7QUFBRVosTUFBQUEsS0FBSyxFQUFFQTtBQUFUO0FBUGI7QUFVRCxDQVhEO0FBYUE7Ozs7O2VBR2UseUJBQW9EO0FBQUEsTUFBakRBLEtBQWlELFNBQWpEQSxLQUFpRDtBQUFBLGlDQUExQ0MsWUFBMEM7QUFBQSxNQUExQ0EsWUFBMEMsbUNBQTNCLEVBQTJCO0FBQUEsNkJBQXZCSyxRQUF1QjtBQUFBLE1BQXZCQSxRQUF1QiwrQkFBWixLQUFZO0FBQ2pFLE1BQU1PLEtBQUssR0FBRyxDQUFDQyxrQkFBRCxFQUFVQyxnQkFBVixFQUFpQlosb0JBQWpCLEVBQTRCYSxNQUE1QixDQUFtQyxVQUFBQyxDQUFDO0FBQUEsV0FBSWhCLFlBQVksQ0FBQ2dCLENBQUQsQ0FBaEI7QUFBQSxHQUFwQyxDQUFkO0FBQ0EsU0FBT0osS0FBSyxDQUFDSyxNQUFOLENBQWEsVUFBQ0MsR0FBRCxFQUFNcEIsSUFBTixFQUFlO0FBQ2pDLFFBQUlBLElBQUksS0FBS2Usa0JBQWIsRUFBc0I7QUFDcEIsYUFBT00sTUFBTSxDQUFDQyxNQUFQLENBQWNGLEdBQWQsRUFBbUJkLHFCQUFxQixDQUFDO0FBQUVMLFFBQUFBLEtBQUssRUFBTEEsS0FBRjtBQUFTTSxRQUFBQSxRQUFRLEVBQVJBO0FBQVQsT0FBRCxDQUF4QyxDQUFQO0FBQ0QsS0FGRCxNQUVPLElBQUksQ0FBQ1MsZ0JBQUQsRUFBUVosb0JBQVIsRUFBbUJtQixRQUFuQixDQUE0QnZCLElBQTVCLENBQUosRUFBdUM7QUFDNUMsYUFBT3FCLE1BQU0sQ0FBQ0MsTUFBUCxDQUNMRixHQURLLEVBRUxyQix3QkFBd0IsQ0FBQztBQUFFQyxRQUFBQSxJQUFJLEVBQUpBLElBQUY7QUFBUUMsUUFBQUEsS0FBSyxFQUFMQSxLQUFSO0FBQWVDLFFBQUFBLFlBQVksRUFBWkE7QUFBZixPQUFELENBRm5CLENBQVA7QUFJRCxLQUxNLE1BS0E7QUFDTCxhQUFPa0IsR0FBUDtBQUNEO0FBQ0YsR0FYTSxFQVdKLEVBWEksQ0FBUDtBQVlELEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgU1RBVFMsIEhJU1RPR1JBTSwgQlVDS0VUUyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmNvbnN0IE1BWF9BR0dSRUdBVElPTl9TSVpFID0gMzAwMDAwO1xuY29uc3QgSElTVE9HUkFNX0lOVEVSVkFMX0RFRkFVTFQgPSAxMDAwO1xuXG5jb25zdCBjcmVhdGVOdW1lcmljQWdncmVnYXRpb24gPSAoeyB0eXBlLCBmaWVsZCwgZ3JhcGhxbEZpZWxkIH0pID0+IHtcbiAgY29uc3QgYXJncyA9IGdldChncmFwaHFsRmllbGQsIFt0eXBlLCAnX19hcmd1bWVudHMnLCAwXSkgfHwge307XG4gIHJldHVybiB7XG4gICAgW2Ake2ZpZWxkfToke3R5cGV9YF06IHtcbiAgICAgIFt0eXBlXToge1xuICAgICAgICBmaWVsZCxcbiAgICAgICAgLi4uKHR5cGUgPT09IEhJU1RPR1JBTVxuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICBpbnRlcnZhbDpcbiAgICAgICAgICAgICAgICBnZXQoYXJncywgJ2ludGVydmFsLnZhbHVlJykgfHwgSElTVE9HUkFNX0lOVEVSVkFMX0RFRkFVTFQsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiB7fSksXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG59O1xuXG5jb25zdCBjcmVhdGVUZXJtQWdncmVnYXRpb24gPSAoeyBmaWVsZCwgaXNOZXN0ZWQgfSkgPT4ge1xuICByZXR1cm4ge1xuICAgIFtmaWVsZF06IHtcbiAgICAgIC4uLihpc05lc3RlZCA/IHsgYWdnczogeyBybjogeyByZXZlcnNlX25lc3RlZDoge30gfSB9IH0gOiB7fSksXG4gICAgICB0ZXJtczogeyBmaWVsZCwgc2l6ZTogTUFYX0FHR1JFR0FUSU9OX1NJWkUgfSxcbiAgICB9LFxuICAgIFtgJHtmaWVsZH06bWlzc2luZ2BdOiB7XG4gICAgICAuLi4oaXNOZXN0ZWQgPyB7IGFnZ3M6IHsgcm46IHsgcmV2ZXJzZV9uZXN0ZWQ6IHt9IH0gfSB9IDoge30pLFxuICAgICAgbWlzc2luZzogeyBmaWVsZDogZmllbGQgfSxcbiAgICB9LFxuICB9O1xufTtcblxuLyoqXG4gKiBncmFwaHFsRmllbGRzOiBvdXRwdXQgZnJvbSBgZ3JhcGhxbC1maWVsZHNgIChodHRwczovL2dpdGh1Yi5jb20vcm9icmljaGFyZC9ncmFwaHFsLWZpZWxkcylcbiAqL1xuZXhwb3J0IGRlZmF1bHQgKHsgZmllbGQsIGdyYXBocWxGaWVsZCA9IHt9LCBpc05lc3RlZCA9IGZhbHNlIH0pID0+IHtcbiAgY29uc3QgdHlwZXMgPSBbQlVDS0VUUywgU1RBVFMsIEhJU1RPR1JBTV0uZmlsdGVyKHQgPT4gZ3JhcGhxbEZpZWxkW3RdKTtcbiAgcmV0dXJuIHR5cGVzLnJlZHVjZSgoYWNjLCB0eXBlKSA9PiB7XG4gICAgaWYgKHR5cGUgPT09IEJVQ0tFVFMpIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjYywgY3JlYXRlVGVybUFnZ3JlZ2F0aW9uKHsgZmllbGQsIGlzTmVzdGVkIH0pKTtcbiAgICB9IGVsc2UgaWYgKFtTVEFUUywgSElTVE9HUkFNXS5pbmNsdWRlcyh0eXBlKSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIGFjYyxcbiAgICAgICAgY3JlYXRlTnVtZXJpY0FnZ3JlZ2F0aW9uKHsgdHlwZSwgZmllbGQsIGdyYXBocWxGaWVsZCB9KSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICB9LCB7fSk7XG59O1xuIl19