"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _buildQuery = require("../buildQuery");

var _normalizeFilters = _interopRequireDefault(require("../buildQuery/normalizeFilters"));

var _constants = require("../constants");

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*
 * due to this problem: https://github.com/kids-first/kf-portal-ui/issues/488
 * queries that are on a term that shares a parent with a aggregation field
 * needs to be dropped down to the aggregation level as a filter.
 */
var injectNestedFiltersToAggs = function injectNestedFiltersToAggs(_ref) {
  var aggs = _ref.aggs,
      nestedSqonFilters = _ref.nestedSqonFilters,
      aggregationsFilterThemselves = _ref.aggregationsFilterThemselves;
  return Object.entries(aggs).reduce(function (acc, _ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        aggName = _ref3[0],
        aggContent = _ref3[1];

    var skipToNextLevel = function skipToNextLevel() {
      acc[aggName] = _objectSpread({}, aggContent, {
        aggs: injectNestedFiltersToAggs({
          aggs: aggContent.aggs,
          nestedSqonFilters: nestedSqonFilters,
          aggregationsFilterThemselves: aggregationsFilterThemselves
        })
      });
      return acc;
    };

    var wrapInFilterAgg = function wrapInFilterAgg() {
      acc[aggName] = _objectSpread({}, aggContent, {
        aggs: _defineProperty({}, "".concat(aggContent.nested.path, ":").concat(_constants.AGGS_WRAPPER_FILTERED), {
          filter: {
            bool: {
              should: nestedSqonFilters[aggContent.nested.path].filter(function (sqonFilter) {
                return aggregationsFilterThemselves || aggName.split(':')[0] !== sqonFilter.content.field;
              }).map(function (sqonFilter) {
                return (0, _buildQuery.opSwitch)({
                  nestedFields: [],
                  filter: (0, _normalizeFilters["default"])(sqonFilter)
                });
              })
            }
          },
          aggs: injectNestedFiltersToAggs({
            aggs: aggContent.aggs,
            nestedSqonFilters: nestedSqonFilters,
            aggregationsFilterThemselves: aggregationsFilterThemselves
          })
        })
      });
      return acc;
    };

    if (aggContent.global || aggContent.filter) {
      return skipToNextLevel();
    } else if (aggContent.nested) {
      if (nestedSqonFilters[aggContent.nested.path]) {
        return wrapInFilterAgg();
      } else {
        return skipToNextLevel();
      }
    } else {
      return acc;
    }
  }, (0, _lodash.cloneDeep)(aggs));
};

var _default = injectNestedFiltersToAggs;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZEFnZ3JlZ2F0aW9ucy9pbmplY3ROZXN0ZWRGaWx0ZXJzVG9BZ2dzLmpzIl0sIm5hbWVzIjpbImluamVjdE5lc3RlZEZpbHRlcnNUb0FnZ3MiLCJhZ2dzIiwibmVzdGVkU3FvbkZpbHRlcnMiLCJhZ2dyZWdhdGlvbnNGaWx0ZXJUaGVtc2VsdmVzIiwiT2JqZWN0IiwiZW50cmllcyIsInJlZHVjZSIsImFjYyIsImFnZ05hbWUiLCJhZ2dDb250ZW50Iiwic2tpcFRvTmV4dExldmVsIiwid3JhcEluRmlsdGVyQWdnIiwibmVzdGVkIiwicGF0aCIsIkFHR1NfV1JBUFBFUl9GSUxURVJFRCIsImZpbHRlciIsImJvb2wiLCJzaG91bGQiLCJzcW9uRmlsdGVyIiwic3BsaXQiLCJjb250ZW50IiwiZmllbGQiLCJtYXAiLCJuZXN0ZWRGaWVsZHMiLCJnbG9iYWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7O0FBS0EsSUFBTUEseUJBQXlCLEdBQUcsU0FBNUJBLHlCQUE0QjtBQUFBLE1BQ2hDQyxJQURnQyxRQUNoQ0EsSUFEZ0M7QUFBQSxNQUVoQ0MsaUJBRmdDLFFBRWhDQSxpQkFGZ0M7QUFBQSxNQUdoQ0MsNEJBSGdDLFFBR2hDQSw0QkFIZ0M7QUFBQSxTQUtoQ0MsTUFBTSxDQUFDQyxPQUFQLENBQWVKLElBQWYsRUFBcUJLLE1BQXJCLENBQTRCLFVBQUNDLEdBQUQsU0FBZ0M7QUFBQTtBQUFBLFFBQXpCQyxPQUF5QjtBQUFBLFFBQWhCQyxVQUFnQjs7QUFDMUQsUUFBTUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixHQUFNO0FBQzVCSCxNQUFBQSxHQUFHLENBQUNDLE9BQUQsQ0FBSCxxQkFDS0MsVUFETDtBQUVFUixRQUFBQSxJQUFJLEVBQUVELHlCQUF5QixDQUFDO0FBQzlCQyxVQUFBQSxJQUFJLEVBQUVRLFVBQVUsQ0FBQ1IsSUFEYTtBQUU5QkMsVUFBQUEsaUJBQWlCLEVBQWpCQSxpQkFGOEI7QUFHOUJDLFVBQUFBLDRCQUE0QixFQUE1QkE7QUFIOEIsU0FBRDtBQUZqQztBQVFBLGFBQU9JLEdBQVA7QUFDRCxLQVZEOztBQVdBLFFBQU1JLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsR0FBTTtBQUM1QkosTUFBQUEsR0FBRyxDQUFDQyxPQUFELENBQUgscUJBQ0tDLFVBREw7QUFFRVIsUUFBQUEsSUFBSSxnQ0FDRVEsVUFBVSxDQUFDRyxNQUFYLENBQWtCQyxJQURwQixjQUM0QkMsZ0NBRDVCLEdBQ3NEO0FBQ3REQyxVQUFBQSxNQUFNLEVBQUU7QUFDTkMsWUFBQUEsSUFBSSxFQUFFO0FBQ0pDLGNBQUFBLE1BQU0sRUFBRWYsaUJBQWlCLENBQUNPLFVBQVUsQ0FBQ0csTUFBWCxDQUFrQkMsSUFBbkIsQ0FBakIsQ0FDTEUsTUFESyxDQUVKLFVBQUFHLFVBQVU7QUFBQSx1QkFDUmYsNEJBQTRCLElBQzVCSyxPQUFPLENBQUNXLEtBQVIsQ0FBYyxHQUFkLEVBQW1CLENBQW5CLE1BQTBCRCxVQUFVLENBQUNFLE9BQVgsQ0FBbUJDLEtBRnJDO0FBQUEsZUFGTixFQU1MQyxHQU5LLENBTUQsVUFBQUosVUFBVTtBQUFBLHVCQUNiLDBCQUFTO0FBQ1BLLGtCQUFBQSxZQUFZLEVBQUUsRUFEUDtBQUVQUixrQkFBQUEsTUFBTSxFQUFFLGtDQUFpQkcsVUFBakI7QUFGRCxpQkFBVCxDQURhO0FBQUEsZUFOVDtBQURKO0FBREEsV0FEOEM7QUFpQnREakIsVUFBQUEsSUFBSSxFQUFFRCx5QkFBeUIsQ0FBQztBQUM5QkMsWUFBQUEsSUFBSSxFQUFFUSxVQUFVLENBQUNSLElBRGE7QUFFOUJDLFlBQUFBLGlCQUFpQixFQUFqQkEsaUJBRjhCO0FBRzlCQyxZQUFBQSw0QkFBNEIsRUFBNUJBO0FBSDhCLFdBQUQ7QUFqQnVCLFNBRHREO0FBRk47QUE0QkEsYUFBT0ksR0FBUDtBQUNELEtBOUJEOztBQWdDQSxRQUFJRSxVQUFVLENBQUNlLE1BQVgsSUFBcUJmLFVBQVUsQ0FBQ00sTUFBcEMsRUFBNEM7QUFDMUMsYUFBT0wsZUFBZSxFQUF0QjtBQUNELEtBRkQsTUFFTyxJQUFJRCxVQUFVLENBQUNHLE1BQWYsRUFBdUI7QUFDNUIsVUFBSVYsaUJBQWlCLENBQUNPLFVBQVUsQ0FBQ0csTUFBWCxDQUFrQkMsSUFBbkIsQ0FBckIsRUFBK0M7QUFDN0MsZUFBT0YsZUFBZSxFQUF0QjtBQUNELE9BRkQsTUFFTztBQUNMLGVBQU9ELGVBQWUsRUFBdEI7QUFDRDtBQUNGLEtBTk0sTUFNQTtBQUNMLGFBQU9ILEdBQVA7QUFDRDtBQUNGLEdBdkRELEVBdURHLHVCQUFVTixJQUFWLENBdkRILENBTGdDO0FBQUEsQ0FBbEM7O2VBOERlRCx5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9wU3dpdGNoIH0gZnJvbSAnLi4vYnVpbGRRdWVyeSc7XG5pbXBvcnQgbm9ybWFsaXplRmlsdGVycyBmcm9tICcuLi9idWlsZFF1ZXJ5L25vcm1hbGl6ZUZpbHRlcnMnO1xuaW1wb3J0IHsgQUdHU19XUkFQUEVSX0ZJTFRFUkVEIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaCc7XG5cbi8qXG4gKiBkdWUgdG8gdGhpcyBwcm9ibGVtOiBodHRwczovL2dpdGh1Yi5jb20va2lkcy1maXJzdC9rZi1wb3J0YWwtdWkvaXNzdWVzLzQ4OFxuICogcXVlcmllcyB0aGF0IGFyZSBvbiBhIHRlcm0gdGhhdCBzaGFyZXMgYSBwYXJlbnQgd2l0aCBhIGFnZ3JlZ2F0aW9uIGZpZWxkXG4gKiBuZWVkcyB0byBiZSBkcm9wcGVkIGRvd24gdG8gdGhlIGFnZ3JlZ2F0aW9uIGxldmVsIGFzIGEgZmlsdGVyLlxuICovXG5jb25zdCBpbmplY3ROZXN0ZWRGaWx0ZXJzVG9BZ2dzID0gKHtcbiAgYWdncyxcbiAgbmVzdGVkU3FvbkZpbHRlcnMsXG4gIGFnZ3JlZ2F0aW9uc0ZpbHRlclRoZW1zZWx2ZXMsXG59KSA9PlxuICBPYmplY3QuZW50cmllcyhhZ2dzKS5yZWR1Y2UoKGFjYywgW2FnZ05hbWUsIGFnZ0NvbnRlbnRdKSA9PiB7XG4gICAgY29uc3Qgc2tpcFRvTmV4dExldmVsID0gKCkgPT4ge1xuICAgICAgYWNjW2FnZ05hbWVdID0ge1xuICAgICAgICAuLi5hZ2dDb250ZW50LFxuICAgICAgICBhZ2dzOiBpbmplY3ROZXN0ZWRGaWx0ZXJzVG9BZ2dzKHtcbiAgICAgICAgICBhZ2dzOiBhZ2dDb250ZW50LmFnZ3MsXG4gICAgICAgICAgbmVzdGVkU3FvbkZpbHRlcnMsXG4gICAgICAgICAgYWdncmVnYXRpb25zRmlsdGVyVGhlbXNlbHZlcyxcbiAgICAgICAgfSksXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9O1xuICAgIGNvbnN0IHdyYXBJbkZpbHRlckFnZyA9ICgpID0+IHtcbiAgICAgIGFjY1thZ2dOYW1lXSA9IHtcbiAgICAgICAgLi4uYWdnQ29udGVudCxcbiAgICAgICAgYWdnczoge1xuICAgICAgICAgIFtgJHthZ2dDb250ZW50Lm5lc3RlZC5wYXRofToke0FHR1NfV1JBUFBFUl9GSUxURVJFRH1gXToge1xuICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgIGJvb2w6IHtcbiAgICAgICAgICAgICAgICBzaG91bGQ6IG5lc3RlZFNxb25GaWx0ZXJzW2FnZ0NvbnRlbnQubmVzdGVkLnBhdGhdXG4gICAgICAgICAgICAgICAgICAuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICBzcW9uRmlsdGVyID0+XG4gICAgICAgICAgICAgICAgICAgICAgYWdncmVnYXRpb25zRmlsdGVyVGhlbXNlbHZlcyB8fFxuICAgICAgICAgICAgICAgICAgICAgIGFnZ05hbWUuc3BsaXQoJzonKVswXSAhPT0gc3FvbkZpbHRlci5jb250ZW50LmZpZWxkLFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgLm1hcChzcW9uRmlsdGVyID0+XG4gICAgICAgICAgICAgICAgICAgIG9wU3dpdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICBuZXN0ZWRGaWVsZHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcjogbm9ybWFsaXplRmlsdGVycyhzcW9uRmlsdGVyKSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFnZ3M6IGluamVjdE5lc3RlZEZpbHRlcnNUb0FnZ3Moe1xuICAgICAgICAgICAgICBhZ2dzOiBhZ2dDb250ZW50LmFnZ3MsXG4gICAgICAgICAgICAgIG5lc3RlZFNxb25GaWx0ZXJzLFxuICAgICAgICAgICAgICBhZ2dyZWdhdGlvbnNGaWx0ZXJUaGVtc2VsdmVzLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH07XG5cbiAgICBpZiAoYWdnQ29udGVudC5nbG9iYWwgfHwgYWdnQ29udGVudC5maWx0ZXIpIHtcbiAgICAgIHJldHVybiBza2lwVG9OZXh0TGV2ZWwoKTtcbiAgICB9IGVsc2UgaWYgKGFnZ0NvbnRlbnQubmVzdGVkKSB7XG4gICAgICBpZiAobmVzdGVkU3FvbkZpbHRlcnNbYWdnQ29udGVudC5uZXN0ZWQucGF0aF0pIHtcbiAgICAgICAgcmV0dXJuIHdyYXBJbkZpbHRlckFnZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHNraXBUb05leHRMZXZlbCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgfSwgY2xvbmVEZWVwKGFnZ3MpKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5qZWN0TmVzdGVkRmlsdGVyc1RvQWdncztcbiJdfQ==