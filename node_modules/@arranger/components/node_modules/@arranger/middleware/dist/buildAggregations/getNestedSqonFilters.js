"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

var _normalizeFilters = _interopRequireDefault(require("../buildQuery/normalizeFilters"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var getNestedSqonFilters = function getNestedSqonFilters(_ref) {
  var _ref$sqon = _ref.sqon,
      sqon = _ref$sqon === void 0 ? null : _ref$sqon,
      nestedFields = _ref.nestedFields,
      _ref$accumulator = _ref.accumulator,
      accumulator = _ref$accumulator === void 0 ? {} : _ref$accumulator,
      _ref$parentPivot = _ref.parentPivot,
      parentPivot = _ref$parentPivot === void 0 ? '.' : _ref$parentPivot;
  var op = sqon.op;

  if ([_constants.AND_OP, _constants.OR_OP, _constants.NOT_OP].includes(op)) {
    var _sqon$content = sqon.content,
        content = _sqon$content === void 0 ? [] : _sqon$content,
        pivot = sqon.pivot; // console.log('sqon: ', JSON.stringify(sqon, null, 2));

    content.forEach(function (c) {
      return getNestedSqonFilters({
        sqon: c,
        nestedFields: nestedFields,
        accumulator: accumulator,
        parentPivot: pivot
      });
    });
  } else {
    var _sqon$content2 = sqon.content,
        sqonField = _sqon$content2.field,
        sqonFields = _sqon$content2.fields;
    var fields = sqonFields || [sqonField];
    fields.forEach(function (field) {
      var splitted = field.split('.') || '';
      var parentPath = splitted.slice(0, splitted.length - 1).join('.');
      var isNested = nestedFields.includes(splitted.slice(0, splitted.length - 1).join('.'));

      if (splitted.length && isNested && parentPivot !== parentPath) {
        accumulator[parentPath] = [].concat(_toConsumableArray(accumulator[parentPath] || []), [sqon]);
      }
    });
  }

  return accumulator;
};

var _default = function _default(_ref2) {
  var _ref2$sqon = _ref2.sqon,
      sqon = _ref2$sqon === void 0 ? null : _ref2$sqon,
      nestedFields = _ref2.nestedFields;
  var normalized = (0, _normalizeFilters["default"])(sqon); // console.log('normalized: ', JSON.stringify(normalized, null, 2));

  return sqon ? getNestedSqonFilters({
    sqon: normalized,
    nestedFields: nestedFields
  }) : {};
};

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZEFnZ3JlZ2F0aW9ucy9nZXROZXN0ZWRTcW9uRmlsdGVycy5qcyJdLCJuYW1lcyI6WyJnZXROZXN0ZWRTcW9uRmlsdGVycyIsInNxb24iLCJuZXN0ZWRGaWVsZHMiLCJhY2N1bXVsYXRvciIsInBhcmVudFBpdm90Iiwib3AiLCJBTkRfT1AiLCJPUl9PUCIsIk5PVF9PUCIsImluY2x1ZGVzIiwiY29udGVudCIsInBpdm90IiwiZm9yRWFjaCIsImMiLCJzcW9uRmllbGQiLCJmaWVsZCIsInNxb25GaWVsZHMiLCJmaWVsZHMiLCJzcGxpdHRlZCIsInNwbGl0IiwicGFyZW50UGF0aCIsInNsaWNlIiwibGVuZ3RoIiwiam9pbiIsImlzTmVzdGVkIiwibm9ybWFsaXplZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLE9BS3ZCO0FBQUEsdUJBSkpDLElBSUk7QUFBQSxNQUpKQSxJQUlJLDBCQUpHLElBSUg7QUFBQSxNQUhKQyxZQUdJLFFBSEpBLFlBR0k7QUFBQSw4QkFGSkMsV0FFSTtBQUFBLE1BRkpBLFdBRUksaUNBRlUsRUFFVjtBQUFBLDhCQURKQyxXQUNJO0FBQUEsTUFESkEsV0FDSSxpQ0FEVSxHQUNWO0FBQUEsTUFDSUMsRUFESixHQUNXSixJQURYLENBQ0lJLEVBREo7O0FBRUosTUFBSSxDQUFDQyxpQkFBRCxFQUFTQyxnQkFBVCxFQUFnQkMsaUJBQWhCLEVBQXdCQyxRQUF4QixDQUFpQ0osRUFBakMsQ0FBSixFQUEwQztBQUFBLHdCQUNSSixJQURRLENBQ2hDUyxPQURnQztBQUFBLFFBQ2hDQSxPQURnQyw4QkFDdEIsRUFEc0I7QUFBQSxRQUNsQkMsS0FEa0IsR0FDUlYsSUFEUSxDQUNsQlUsS0FEa0IsRUFFeEM7O0FBQ0FELElBQUFBLE9BQU8sQ0FBQ0UsT0FBUixDQUFnQixVQUFBQyxDQUFDO0FBQUEsYUFDZmIsb0JBQW9CLENBQUM7QUFDbkJDLFFBQUFBLElBQUksRUFBRVksQ0FEYTtBQUVuQlgsUUFBQUEsWUFBWSxFQUFaQSxZQUZtQjtBQUduQkMsUUFBQUEsV0FBVyxFQUFYQSxXQUhtQjtBQUluQkMsUUFBQUEsV0FBVyxFQUFFTztBQUpNLE9BQUQsQ0FETDtBQUFBLEtBQWpCO0FBUUQsR0FYRCxNQVdPO0FBQUEseUJBR0RWLElBSEMsQ0FFSFMsT0FGRztBQUFBLFFBRWVJLFNBRmYsa0JBRVFDLEtBRlI7QUFBQSxRQUVrQ0MsVUFGbEMsa0JBRTBCQyxNQUYxQjtBQUlMLFFBQU1BLE1BQU0sR0FBR0QsVUFBVSxJQUFJLENBQUNGLFNBQUQsQ0FBN0I7QUFDQUcsSUFBQUEsTUFBTSxDQUFDTCxPQUFQLENBQWUsVUFBQUcsS0FBSyxFQUFJO0FBQ3RCLFVBQU1HLFFBQVEsR0FBR0gsS0FBSyxDQUFDSSxLQUFOLENBQVksR0FBWixLQUFvQixFQUFyQztBQUNBLFVBQU1DLFVBQVUsR0FBR0YsUUFBUSxDQUFDRyxLQUFULENBQWUsQ0FBZixFQUFrQkgsUUFBUSxDQUFDSSxNQUFULEdBQWtCLENBQXBDLEVBQXVDQyxJQUF2QyxDQUE0QyxHQUE1QyxDQUFuQjtBQUNBLFVBQU1DLFFBQVEsR0FBR3RCLFlBQVksQ0FBQ08sUUFBYixDQUNmUyxRQUFRLENBQUNHLEtBQVQsQ0FBZSxDQUFmLEVBQWtCSCxRQUFRLENBQUNJLE1BQVQsR0FBa0IsQ0FBcEMsRUFBdUNDLElBQXZDLENBQTRDLEdBQTVDLENBRGUsQ0FBakI7O0FBR0EsVUFBSUwsUUFBUSxDQUFDSSxNQUFULElBQW1CRSxRQUFuQixJQUErQnBCLFdBQVcsS0FBS2dCLFVBQW5ELEVBQStEO0FBQzdEakIsUUFBQUEsV0FBVyxDQUFDaUIsVUFBRCxDQUFYLGdDQUErQmpCLFdBQVcsQ0FBQ2lCLFVBQUQsQ0FBWCxJQUEyQixFQUExRCxJQUErRG5CLElBQS9EO0FBQ0Q7QUFDRixLQVREO0FBVUQ7O0FBQ0QsU0FBT0UsV0FBUDtBQUNELENBbkNEOztlQXFDZSx5QkFBbUM7QUFBQSx5QkFBaENGLElBQWdDO0FBQUEsTUFBaENBLElBQWdDLDJCQUF6QixJQUF5QjtBQUFBLE1BQW5CQyxZQUFtQixTQUFuQkEsWUFBbUI7QUFDaEQsTUFBTXVCLFVBQVUsR0FBRyxrQ0FBaUJ4QixJQUFqQixDQUFuQixDQURnRCxDQUVoRDs7QUFDQSxTQUFPQSxJQUFJLEdBQ1BELG9CQUFvQixDQUFDO0FBQ25CQyxJQUFBQSxJQUFJLEVBQUV3QixVQURhO0FBRW5CdkIsSUFBQUEsWUFBWSxFQUFaQTtBQUZtQixHQUFELENBRGIsR0FLUCxFQUxKO0FBTUQsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFORF9PUCwgT1JfT1AsIE5PVF9PUCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgbm9ybWFsaXplRmlsdGVycyBmcm9tICcuLi9idWlsZFF1ZXJ5L25vcm1hbGl6ZUZpbHRlcnMnO1xuXG5jb25zdCBnZXROZXN0ZWRTcW9uRmlsdGVycyA9ICh7XG4gIHNxb24gPSBudWxsLFxuICBuZXN0ZWRGaWVsZHMsXG4gIGFjY3VtdWxhdG9yID0ge30sXG4gIHBhcmVudFBpdm90ID0gJy4nLFxufSkgPT4ge1xuICBjb25zdCB7IG9wIH0gPSBzcW9uO1xuICBpZiAoW0FORF9PUCwgT1JfT1AsIE5PVF9PUF0uaW5jbHVkZXMob3ApKSB7XG4gICAgY29uc3QgeyBjb250ZW50ID0gW10sIHBpdm90IH0gPSBzcW9uO1xuICAgIC8vIGNvbnNvbGUubG9nKCdzcW9uOiAnLCBKU09OLnN0cmluZ2lmeShzcW9uLCBudWxsLCAyKSk7XG4gICAgY29udGVudC5mb3JFYWNoKGMgPT5cbiAgICAgIGdldE5lc3RlZFNxb25GaWx0ZXJzKHtcbiAgICAgICAgc3FvbjogYyxcbiAgICAgICAgbmVzdGVkRmllbGRzLFxuICAgICAgICBhY2N1bXVsYXRvcixcbiAgICAgICAgcGFyZW50UGl2b3Q6IHBpdm90LFxuICAgICAgfSksXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB7XG4gICAgICBjb250ZW50OiB7IGZpZWxkOiBzcW9uRmllbGQsIGZpZWxkczogc3FvbkZpZWxkcyB9LFxuICAgIH0gPSBzcW9uO1xuICAgIGNvbnN0IGZpZWxkcyA9IHNxb25GaWVsZHMgfHwgW3Nxb25GaWVsZF07XG4gICAgZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgY29uc3Qgc3BsaXR0ZWQgPSBmaWVsZC5zcGxpdCgnLicpIHx8ICcnO1xuICAgICAgY29uc3QgcGFyZW50UGF0aCA9IHNwbGl0dGVkLnNsaWNlKDAsIHNwbGl0dGVkLmxlbmd0aCAtIDEpLmpvaW4oJy4nKTtcbiAgICAgIGNvbnN0IGlzTmVzdGVkID0gbmVzdGVkRmllbGRzLmluY2x1ZGVzKFxuICAgICAgICBzcGxpdHRlZC5zbGljZSgwLCBzcGxpdHRlZC5sZW5ndGggLSAxKS5qb2luKCcuJyksXG4gICAgICApO1xuICAgICAgaWYgKHNwbGl0dGVkLmxlbmd0aCAmJiBpc05lc3RlZCAmJiBwYXJlbnRQaXZvdCAhPT0gcGFyZW50UGF0aCkge1xuICAgICAgICBhY2N1bXVsYXRvcltwYXJlbnRQYXRoXSA9IFsuLi4oYWNjdW11bGF0b3JbcGFyZW50UGF0aF0gfHwgW10pLCBzcW9uXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoeyBzcW9uID0gbnVsbCwgbmVzdGVkRmllbGRzIH0pID0+IHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZUZpbHRlcnMoc3Fvbik7XG4gIC8vIGNvbnNvbGUubG9nKCdub3JtYWxpemVkOiAnLCBKU09OLnN0cmluZ2lmeShub3JtYWxpemVkLCBudWxsLCAyKSk7XG4gIHJldHVybiBzcW9uXG4gICAgPyBnZXROZXN0ZWRTcW9uRmlsdGVycyh7XG4gICAgICAgIHNxb246IG5vcm1hbGl6ZWQsXG4gICAgICAgIG5lc3RlZEZpZWxkcyxcbiAgICAgIH0pXG4gICAgOiB7fTtcbn07XG4iXX0=