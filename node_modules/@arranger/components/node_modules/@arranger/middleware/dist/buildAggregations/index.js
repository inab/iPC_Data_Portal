"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _lodash = require("lodash");

var _injectNestedFiltersToAggs = _interopRequireDefault(require("./injectNestedFiltersToAggs"));

var _getNestedSqonFilters = _interopRequireDefault(require("./getNestedSqonFilters"));

var _constants = require("../constants");

var _createFieldAggregation = _interopRequireDefault(require("./createFieldAggregation"));

var _normalizeFilters = _interopRequireDefault(require("../buildQuery/normalizeFilters"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createGlobalAggregation(_ref) {
  var field = _ref.field,
      aggregation = _ref.aggregation;
  return _defineProperty({}, "".concat(field, ":").concat(_constants.AGGS_WRAPPER_GLOBAL), {
    global: {},
    aggs: aggregation
  });
}

function createFilteredAggregation(_ref3) {
  var field = _ref3.field,
      filter = _ref3.filter,
      aggregation = _ref3.aggregation;
  return Object.keys(filter || {}).length ? _defineProperty({}, "".concat(field, ":").concat(_constants.AGGS_WRAPPER_FILTERED), {
    filter: filter,
    aggs: aggregation
  }) : aggregation;
}

function removeFieldFromQuery(_ref5) {
  var field = _ref5.field,
      query = _ref5.query;
  var nested = (0, _lodash.get)(query, _constants.ES_NESTED);
  var nestedQuery = (0, _lodash.get)(nested, _constants.ES_QUERY);
  var bool = (0, _lodash.get)(query, _constants.ES_BOOL);

  if (['terms', 'range'].some(function (k) {
    return (0, _lodash.get)(query, [k, field]);
  }) || (0, _lodash.get)(query, ['exists', 'field']) === field) {
    return null;
  } else if (nestedQuery) {
    var cleaned = removeFieldFromQuery({
      field: field,
      query: nestedQuery
    });
    return cleaned && _objectSpread({}, query, _defineProperty({}, _constants.ES_NESTED, _objectSpread({}, nested, _defineProperty({}, _constants.ES_QUERY, cleaned))));
  } else if (bool) {
    var filtered = Object.entries(bool).reduce(function (acc, _ref6) {
      var _ref7 = _slicedToArray(_ref6, 2),
          type = _ref7[0],
          values = _ref7[1];

      var filteredValues = values.map(function (value) {
        return removeFieldFromQuery({
          field: field,
          query: value
        });
      }).filter(Boolean);

      if (filteredValues.length > 0) {
        acc[type] = filteredValues;
      }

      return acc;
    }, {});
    return Object.keys(filtered).length > 0 ? _defineProperty({}, _constants.ES_BOOL, filtered) : null;
  } else {
    return query;
  }
}

function getNestedPathsInField(_ref9) {
  var field = _ref9.field,
      nestedFields = _ref9.nestedFields;
  return field.split('.').map(function (s, i, arr) {
    return arr.slice(0, i + 1).join('.');
  }).filter(function (p) {
    return nestedFields.includes(p);
  });
}

function wrapWithFilters(_ref10) {
  var field = _ref10.field,
      query = _ref10.query,
      aggregationsFilterThemselves = _ref10.aggregationsFilterThemselves,
      aggregation = _ref10.aggregation;

  if (!aggregationsFilterThemselves) {
    var cleanedQuery = removeFieldFromQuery({
      field: field,
      query: query
    }); // TODO: better way to figure out that the field wasn't found

    if (!(0, _lodash.isEqual)(cleanedQuery || {}, query || {})) {
      return createGlobalAggregation({
        field: field,
        aggregation: createFilteredAggregation({
          field: field,
          filter: cleanedQuery,
          aggregation: aggregation
        })
      });
    }
  }

  return aggregation;
}
/**
 * graphqlFields: output from `graphql-fields` (https://github.com/robrichard/graphql-fields)
 */


function _default(_ref11) {
  var sqon = _ref11.sqon,
      graphqlFields = _ref11.graphqlFields,
      nestedFields = _ref11.nestedFields,
      aggregationsFilterThemselves = _ref11.aggregationsFilterThemselves,
      query = _ref11.query;
  var normalizedSqon = (0, _normalizeFilters["default"])(sqon);
  var nestedSqonFilters = (0, _getNestedSqonFilters["default"])({
    sqon: normalizedSqon,
    nestedFields: nestedFields
  });
  var aggs = Object.entries(graphqlFields).reduce(function (aggregations, _ref12) {
    var _ref13 = _slicedToArray(_ref12, 2),
        fieldKey = _ref13[0],
        graphqlField = _ref13[1];

    var field = fieldKey.replace(/__/g, '.');
    var nestedPaths = getNestedPathsInField({
      field: field,
      nestedFields: nestedFields
    });
    var fieldAggregation = (0, _createFieldAggregation["default"])({
      field: field,
      graphqlField: graphqlField,
      isNested: nestedPaths.length
    });
    var aggregation = nestedPaths.reverse().reduce(function (aggs, path) {
      return _defineProperty({}, "".concat(field, ":").concat(_constants.AGGS_WRAPPER_NESTED), {
        nested: {
          path: path
        },
        aggs: aggs
      });
    }, fieldAggregation);
    return Object.assign(aggregations, wrapWithFilters({
      query: query,
      field: field,
      aggregation: aggregation,
      aggregationsFilterThemselves: aggregationsFilterThemselves
    }));
  }, {});
  var filteredAggregations = (0, _injectNestedFiltersToAggs["default"])({
    aggs: aggs,
    nestedSqonFilters: nestedSqonFilters,
    aggregationsFilterThemselves: aggregationsFilterThemselves
  });
  return filteredAggregations;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZEFnZ3JlZ2F0aW9ucy9pbmRleC5qcyJdLCJuYW1lcyI6WyJjcmVhdGVHbG9iYWxBZ2dyZWdhdGlvbiIsImZpZWxkIiwiYWdncmVnYXRpb24iLCJBR0dTX1dSQVBQRVJfR0xPQkFMIiwiZ2xvYmFsIiwiYWdncyIsImNyZWF0ZUZpbHRlcmVkQWdncmVnYXRpb24iLCJmaWx0ZXIiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiQUdHU19XUkFQUEVSX0ZJTFRFUkVEIiwicmVtb3ZlRmllbGRGcm9tUXVlcnkiLCJxdWVyeSIsIm5lc3RlZCIsIkVTX05FU1RFRCIsIm5lc3RlZFF1ZXJ5IiwiRVNfUVVFUlkiLCJib29sIiwiRVNfQk9PTCIsInNvbWUiLCJrIiwiY2xlYW5lZCIsImZpbHRlcmVkIiwiZW50cmllcyIsInJlZHVjZSIsImFjYyIsInR5cGUiLCJ2YWx1ZXMiLCJmaWx0ZXJlZFZhbHVlcyIsIm1hcCIsInZhbHVlIiwiQm9vbGVhbiIsImdldE5lc3RlZFBhdGhzSW5GaWVsZCIsIm5lc3RlZEZpZWxkcyIsInNwbGl0IiwicyIsImkiLCJhcnIiLCJzbGljZSIsImpvaW4iLCJwIiwiaW5jbHVkZXMiLCJ3cmFwV2l0aEZpbHRlcnMiLCJhZ2dyZWdhdGlvbnNGaWx0ZXJUaGVtc2VsdmVzIiwiY2xlYW5lZFF1ZXJ5Iiwic3FvbiIsImdyYXBocWxGaWVsZHMiLCJub3JtYWxpemVkU3FvbiIsIm5lc3RlZFNxb25GaWx0ZXJzIiwiYWdncmVnYXRpb25zIiwiZmllbGRLZXkiLCJncmFwaHFsRmllbGQiLCJyZXBsYWNlIiwibmVzdGVkUGF0aHMiLCJmaWVsZEFnZ3JlZ2F0aW9uIiwiaXNOZXN0ZWQiLCJyZXZlcnNlIiwicGF0aCIsIkFHR1NfV1JBUFBFUl9ORVNURUQiLCJhc3NpZ24iLCJmaWx0ZXJlZEFnZ3JlZ2F0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQVFBOztBQUNBOzs7Ozs7Ozs7Ozs7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Y0FDZTBELDhCQURmLEdBQ3VDO0FBQUU3QyxRQUFBQSxNQUFNLEVBQUU7QUFBRTRDLFVBQUFBLElBQUksRUFBSkE7QUFBRixTQUFWO0FBQW9CckQsUUFBQUEsSUFBSSxFQUFKQTtBQUFwQixPQUR2QztBQUFBLEtBRGtCLEVBSWxCa0QsZ0JBSmtCLENBQXBCO0FBT0EsV0FBTy9DLE1BQU0sQ0FBQ29ELE1BQVAsQ0FDTFYsWUFESyxFQUVMUCxlQUFlLENBQUM7QUFDZDlCLE1BQUFBLEtBQUssRUFBTEEsS0FEYztBQUVkWixNQUFBQSxLQUFLLEVBQUxBLEtBRmM7QUFHZEMsTUFBQUEsV0FBVyxFQUFYQSxXQUhjO0FBSWQwQyxNQUFBQSw0QkFBNEIsRUFBNUJBO0FBSmMsS0FBRCxDQUZWLENBQVA7QUFTRCxHQTFCVSxFQTJCWCxFQTNCVyxDQUFiO0FBOEJBLE1BQU1pQixvQkFBb0IsR0FBRywyQ0FBMEI7QUFDckR4RCxJQUFBQSxJQUFJLEVBQUpBLElBRHFEO0FBRXJENEMsSUFBQUEsaUJBQWlCLEVBQWpCQSxpQkFGcUQ7QUFHckRMLElBQUFBLDRCQUE0QixFQUE1QkE7QUFIcUQsR0FBMUIsQ0FBN0I7QUFNQSxTQUFPaUIsb0JBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldCwgaXNFcXVhbCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgaW5qZWN0TmVzdGVkRmlsdGVyc1RvQWdncyBmcm9tICcuL2luamVjdE5lc3RlZEZpbHRlcnNUb0FnZ3MnO1xuaW1wb3J0IGdldE5lc3RlZFNxb25GaWx0ZXJzIGZyb20gJy4vZ2V0TmVzdGVkU3FvbkZpbHRlcnMnO1xuaW1wb3J0IHtcbiAgQUdHU19XUkFQUEVSX0dMT0JBTCxcbiAgQUdHU19XUkFQUEVSX0ZJTFRFUkVELFxuICBBR0dTX1dSQVBQRVJfTkVTVEVELFxuICBFU19CT09MLFxuICBFU19ORVNURUQsXG4gIEVTX1FVRVJZLFxufSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IGNyZWF0ZUZpZWxkQWdncmVnYXRpb24gZnJvbSAnLi9jcmVhdGVGaWVsZEFnZ3JlZ2F0aW9uJztcbmltcG9ydCBub3JtYWxpemVGaWx0ZXJzIGZyb20gJy4uL2J1aWxkUXVlcnkvbm9ybWFsaXplRmlsdGVycyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUdsb2JhbEFnZ3JlZ2F0aW9uKHsgZmllbGQsIGFnZ3JlZ2F0aW9uIH0pIHtcbiAgcmV0dXJuIHtcbiAgICBbYCR7ZmllbGR9OiR7QUdHU19XUkFQUEVSX0dMT0JBTH1gXTogeyBnbG9iYWw6IHt9LCBhZ2dzOiBhZ2dyZWdhdGlvbiB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWx0ZXJlZEFnZ3JlZ2F0aW9uKHsgZmllbGQsIGZpbHRlciwgYWdncmVnYXRpb24gfSkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoZmlsdGVyIHx8IHt9KS5sZW5ndGhcbiAgICA/IHsgW2Ake2ZpZWxkfToke0FHR1NfV1JBUFBFUl9GSUxURVJFRH1gXTogeyBmaWx0ZXIsIGFnZ3M6IGFnZ3JlZ2F0aW9uIH0gfVxuICAgIDogYWdncmVnYXRpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpZWxkRnJvbVF1ZXJ5KHsgZmllbGQsIHF1ZXJ5IH0pIHtcbiAgY29uc3QgbmVzdGVkID0gZ2V0KHF1ZXJ5LCBFU19ORVNURUQpO1xuICBjb25zdCBuZXN0ZWRRdWVyeSA9IGdldChuZXN0ZWQsIEVTX1FVRVJZKTtcbiAgY29uc3QgYm9vbCA9IGdldChxdWVyeSwgRVNfQk9PTCk7XG5cbiAgaWYgKFxuICAgIFsndGVybXMnLCAncmFuZ2UnXS5zb21lKGsgPT4gZ2V0KHF1ZXJ5LCBbaywgZmllbGRdKSkgfHxcbiAgICBnZXQocXVlcnksIFsnZXhpc3RzJywgJ2ZpZWxkJ10pID09PSBmaWVsZFxuICApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmIChuZXN0ZWRRdWVyeSkge1xuICAgIGNvbnN0IGNsZWFuZWQgPSByZW1vdmVGaWVsZEZyb21RdWVyeSh7IGZpZWxkLCBxdWVyeTogbmVzdGVkUXVlcnkgfSk7XG4gICAgcmV0dXJuIChcbiAgICAgIGNsZWFuZWQgJiYgeyAuLi5xdWVyeSwgW0VTX05FU1RFRF06IHsgLi4ubmVzdGVkLCBbRVNfUVVFUlldOiBjbGVhbmVkIH0gfVxuICAgICk7XG4gIH0gZWxzZSBpZiAoYm9vbCkge1xuICAgIGNvbnN0IGZpbHRlcmVkID0gT2JqZWN0LmVudHJpZXMoYm9vbCkucmVkdWNlKChhY2MsIFt0eXBlLCB2YWx1ZXNdKSA9PiB7XG4gICAgICBjb25zdCBmaWx0ZXJlZFZhbHVlcyA9IHZhbHVlc1xuICAgICAgICAubWFwKHZhbHVlID0+IHJlbW92ZUZpZWxkRnJvbVF1ZXJ5KHsgZmllbGQsIHF1ZXJ5OiB2YWx1ZSB9KSlcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIGlmIChmaWx0ZXJlZFZhbHVlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFjY1t0eXBlXSA9IGZpbHRlcmVkVmFsdWVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZmlsdGVyZWQpLmxlbmd0aCA+IDAgPyB7IFtFU19CT09MXTogZmlsdGVyZWQgfSA6IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHF1ZXJ5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE5lc3RlZFBhdGhzSW5GaWVsZCh7IGZpZWxkLCBuZXN0ZWRGaWVsZHMgfSkge1xuICByZXR1cm4gZmllbGRcbiAgICAuc3BsaXQoJy4nKVxuICAgIC5tYXAoKHMsIGksIGFycikgPT4gYXJyLnNsaWNlKDAsIGkgKyAxKS5qb2luKCcuJykpXG4gICAgLmZpbHRlcihwID0+IG5lc3RlZEZpZWxkcy5pbmNsdWRlcyhwKSk7XG59XG5cbmZ1bmN0aW9uIHdyYXBXaXRoRmlsdGVycyh7XG4gIGZpZWxkLFxuICBxdWVyeSxcbiAgYWdncmVnYXRpb25zRmlsdGVyVGhlbXNlbHZlcyxcbiAgYWdncmVnYXRpb24sXG59KSB7XG4gIGlmICghYWdncmVnYXRpb25zRmlsdGVyVGhlbXNlbHZlcykge1xuICAgIGNvbnN0IGNsZWFuZWRRdWVyeSA9IHJlbW92ZUZpZWxkRnJvbVF1ZXJ5KHsgZmllbGQsIHF1ZXJ5IH0pO1xuICAgIC8vIFRPRE86IGJldHRlciB3YXkgdG8gZmlndXJlIG91dCB0aGF0IHRoZSBmaWVsZCB3YXNuJ3QgZm91bmRcbiAgICBpZiAoIWlzRXF1YWwoY2xlYW5lZFF1ZXJ5IHx8IHt9LCBxdWVyeSB8fCB7fSkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVHbG9iYWxBZ2dyZWdhdGlvbih7XG4gICAgICAgIGZpZWxkLFxuICAgICAgICBhZ2dyZWdhdGlvbjogY3JlYXRlRmlsdGVyZWRBZ2dyZWdhdGlvbih7XG4gICAgICAgICAgZmllbGQsXG4gICAgICAgICAgZmlsdGVyOiBjbGVhbmVkUXVlcnksXG4gICAgICAgICAgYWdncmVnYXRpb24sXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhZ2dyZWdhdGlvbjtcbn1cblxuLyoqXG4gKiBncmFwaHFsRmllbGRzOiBvdXRwdXQgZnJvbSBgZ3JhcGhxbC1maWVsZHNgIChodHRwczovL2dpdGh1Yi5jb20vcm9icmljaGFyZC9ncmFwaHFsLWZpZWxkcylcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oe1xuICBzcW9uLFxuICBncmFwaHFsRmllbGRzLFxuICBuZXN0ZWRGaWVsZHMsXG4gIGFnZ3JlZ2F0aW9uc0ZpbHRlclRoZW1zZWx2ZXMsXG4gIHF1ZXJ5LFxufSkge1xuICBjb25zdCBub3JtYWxpemVkU3FvbiA9IG5vcm1hbGl6ZUZpbHRlcnMoc3Fvbik7XG4gIGNvbnN0IG5lc3RlZFNxb25GaWx0ZXJzID0gZ2V0TmVzdGVkU3FvbkZpbHRlcnMoe1xuICAgIHNxb246IG5vcm1hbGl6ZWRTcW9uLFxuICAgIG5lc3RlZEZpZWxkcyxcbiAgfSk7XG4gIGNvbnN0IGFnZ3MgPSBPYmplY3QuZW50cmllcyhncmFwaHFsRmllbGRzKS5yZWR1Y2UoXG4gICAgKGFnZ3JlZ2F0aW9ucywgW2ZpZWxkS2V5LCBncmFwaHFsRmllbGRdKSA9PiB7XG4gICAgICBjb25zdCBmaWVsZCA9IGZpZWxkS2V5LnJlcGxhY2UoL19fL2csICcuJyk7XG4gICAgICBjb25zdCBuZXN0ZWRQYXRocyA9IGdldE5lc3RlZFBhdGhzSW5GaWVsZCh7IGZpZWxkLCBuZXN0ZWRGaWVsZHMgfSk7XG4gICAgICBjb25zdCBmaWVsZEFnZ3JlZ2F0aW9uID0gY3JlYXRlRmllbGRBZ2dyZWdhdGlvbih7XG4gICAgICAgIGZpZWxkLFxuICAgICAgICBncmFwaHFsRmllbGQsXG4gICAgICAgIGlzTmVzdGVkOiBuZXN0ZWRQYXRocy5sZW5ndGgsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYWdncmVnYXRpb24gPSBuZXN0ZWRQYXRocy5yZXZlcnNlKCkucmVkdWNlKFxuICAgICAgICAoYWdncywgcGF0aCkgPT4gKHtcbiAgICAgICAgICBbYCR7ZmllbGR9OiR7QUdHU19XUkFQUEVSX05FU1RFRH1gXTogeyBuZXN0ZWQ6IHsgcGF0aCB9LCBhZ2dzIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBmaWVsZEFnZ3JlZ2F0aW9uLFxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIGFnZ3JlZ2F0aW9ucyxcbiAgICAgICAgd3JhcFdpdGhGaWx0ZXJzKHtcbiAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICBhZ2dyZWdhdGlvbixcbiAgICAgICAgICBhZ2dyZWdhdGlvbnNGaWx0ZXJUaGVtc2VsdmVzLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfSxcbiAgICB7fSxcbiAgKTtcblxuICBjb25zdCBmaWx0ZXJlZEFnZ3JlZ2F0aW9ucyA9IGluamVjdE5lc3RlZEZpbHRlcnNUb0FnZ3Moe1xuICAgIGFnZ3MsXG4gICAgbmVzdGVkU3FvbkZpbHRlcnMsXG4gICAgYWdncmVnYXRpb25zRmlsdGVyVGhlbXNlbHZlcyxcbiAgfSk7XG5cbiAgcmV0dXJuIGZpbHRlcmVkQWdncmVnYXRpb25zO1xufVxuIl19