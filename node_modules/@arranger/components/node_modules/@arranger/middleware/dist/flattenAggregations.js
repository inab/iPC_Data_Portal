"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = require("lodash");

var _constants = require("./constants");

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function flattenAggregations(_ref) {
  var aggregations = _ref.aggregations,
      _ref$includeMissing = _ref.includeMissing,
      includeMissing = _ref$includeMissing === void 0 ? true : _ref$includeMissing;
  return Object.entries(aggregations).reduce(function (prunedAggs, _ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        key = _ref3[0],
        value = _ref3[1];

    var _key$split = key.split(':'),
        _key$split2 = _slicedToArray(_key$split, 2),
        field = _key$split2[0],
        _key$split2$ = _key$split2[1],
        aggregationType = _key$split2$ === void 0 ? null : _key$split2$;

    if (aggregationType === 'missing') {
      return prunedAggs;
    } else if ([_constants.STATS, _constants.HISTOGRAM].includes(aggregationType)) {
      return _objectSpread({}, prunedAggs, _defineProperty({}, field, _objectSpread({}, prunedAggs[field], _defineProperty({}, aggregationType, value))));
    } else if (Array.isArray(value.buckets)) {
      var missing = (0, _lodash.get)(aggregations, ["".concat(field, ":missing")]);
      var buckets = [].concat(_toConsumableArray(value.buckets), _toConsumableArray(includeMissing && missing ? [_objectSpread({}, missing, {
        key: _constants.MISSING
      })] : []));
      return _objectSpread({}, prunedAggs, _defineProperty({}, field, {
        buckets: buckets.map(function (_ref4) {
          var rn = _ref4.rn,
              bucket = _objectWithoutProperties(_ref4, ["rn"]);

          return _objectSpread({}, bucket, {
            doc_count: rn ? rn.doc_count : bucket.doc_count
          });
        }).filter(function (b) {
          return b.doc_count;
        })
      }));
    } else {
      return _objectSpread({}, prunedAggs, {}, flattenAggregations({
        aggregations: value,
        includeMissing: includeMissing
      }));
    }
  }, {});
}

var _default = flattenAggregations;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9mbGF0dGVuQWdncmVnYXRpb25zLmpzIl0sIm5hbWVzIjpbImZsYXR0ZW5BZ2dyZWdhdGlvbnMiLCJhZ2dyZWdhdGlvbnMiLCJpbmNsdWRlTWlzc2luZyIsIk9iamVjdCIsImVudHJpZXMiLCJyZWR1Y2UiLCJwcnVuZWRBZ2dzIiwia2V5IiwidmFsdWUiLCJzcGxpdCIsImZpZWxkIiwiYWdncmVnYXRpb25UeXBlIiwiU1RBVFMiLCJISVNUT0dSQU0iLCJpbmNsdWRlcyIsIkFycmF5IiwiaXNBcnJheSIsImJ1Y2tldHMiLCJtaXNzaW5nIiwiTUlTU0lORyIsIm1hcCIsInJuIiwiYnVja2V0IiwiZG9jX2NvdW50IiwiZmlsdGVyIiwiYiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsU0FBU0EsbUJBQVQsT0FBc0U7QUFBQSxNQUF2Q0MsWUFBdUMsUUFBdkNBLFlBQXVDO0FBQUEsaUNBQXpCQyxjQUF5QjtBQUFBLE1BQXpCQSxjQUF5QixvQ0FBUixJQUFRO0FBQ3BFLFNBQU9DLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlSCxZQUFmLEVBQTZCSSxNQUE3QixDQUFvQyxVQUFDQyxVQUFELFNBQThCO0FBQUE7QUFBQSxRQUFoQkMsR0FBZ0I7QUFBQSxRQUFYQyxLQUFXOztBQUFBLHFCQUMvQkQsR0FBRyxDQUFDRSxLQUFKLENBQVUsR0FBVixDQUQrQjtBQUFBO0FBQUEsUUFDaEVDLEtBRGdFO0FBQUE7QUFBQSxRQUN6REMsZUFEeUQsNkJBQ3ZDLElBRHVDOztBQUd2RSxRQUFJQSxlQUFlLEtBQUssU0FBeEIsRUFBbUM7QUFDakMsYUFBT0wsVUFBUDtBQUNELEtBRkQsTUFFTyxJQUFJLENBQUNNLGdCQUFELEVBQVFDLG9CQUFSLEVBQW1CQyxRQUFuQixDQUE0QkgsZUFBNUIsQ0FBSixFQUFrRDtBQUN2RCwrQkFDS0wsVUFETCxzQkFFR0ksS0FGSCxvQkFFZ0JKLFVBQVUsQ0FBQ0ksS0FBRCxDQUYxQixzQkFFb0NDLGVBRnBDLEVBRXNESCxLQUZ0RDtBQUlELEtBTE0sTUFLQSxJQUFJTyxLQUFLLENBQUNDLE9BQU4sQ0FBY1IsS0FBSyxDQUFDUyxPQUFwQixDQUFKLEVBQWtDO0FBQ3ZDLFVBQU1DLE9BQU8sR0FBRyxpQkFBSWpCLFlBQUosRUFBa0IsV0FBSVMsS0FBSixjQUFsQixDQUFoQjtBQUNBLFVBQU1PLE9BQU8sZ0NBQ1JULEtBQUssQ0FBQ1MsT0FERSxzQkFFUGYsY0FBYyxJQUFJZ0IsT0FBbEIsR0FBNEIsbUJBQU1BLE9BQU47QUFBZVgsUUFBQUEsR0FBRyxFQUFFWTtBQUFwQixTQUE1QixHQUE2RCxFQUZ0RCxFQUFiO0FBSUEsK0JBQ0tiLFVBREwsc0JBRUdJLEtBRkgsRUFFVztBQUNQTyxRQUFBQSxPQUFPLEVBQUVBLE9BQU8sQ0FDYkcsR0FETSxDQUNGO0FBQUEsY0FBR0MsRUFBSCxTQUFHQSxFQUFIO0FBQUEsY0FBVUMsTUFBVjs7QUFBQSxtQ0FDQUEsTUFEQTtBQUVIQyxZQUFBQSxTQUFTLEVBQUVGLEVBQUUsR0FBR0EsRUFBRSxDQUFDRSxTQUFOLEdBQWtCRCxNQUFNLENBQUNDO0FBRm5DO0FBQUEsU0FERSxFQUtOQyxNQUxNLENBS0MsVUFBQUMsQ0FBQztBQUFBLGlCQUFJQSxDQUFDLENBQUNGLFNBQU47QUFBQSxTQUxGO0FBREYsT0FGWDtBQVdELEtBakJNLE1BaUJBO0FBQ0wsK0JBQ0tqQixVQURMLE1BRUtOLG1CQUFtQixDQUFDO0FBQUVDLFFBQUFBLFlBQVksRUFBRU8sS0FBaEI7QUFBdUJOLFFBQUFBLGNBQWMsRUFBZEE7QUFBdkIsT0FBRCxDQUZ4QjtBQUlEO0FBQ0YsR0FqQ00sRUFpQ0osRUFqQ0ksQ0FBUDtBQWtDRDs7ZUFFY0YsbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgSElTVE9HUkFNLCBTVEFUUywgTUlTU0lORyB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZnVuY3Rpb24gZmxhdHRlbkFnZ3JlZ2F0aW9ucyh7IGFnZ3JlZ2F0aW9ucywgaW5jbHVkZU1pc3NpbmcgPSB0cnVlIH0pIHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGFnZ3JlZ2F0aW9ucykucmVkdWNlKChwcnVuZWRBZ2dzLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBjb25zdCBbZmllbGQsIGFnZ3JlZ2F0aW9uVHlwZSA9IG51bGxdID0ga2V5LnNwbGl0KCc6Jyk7XG5cbiAgICBpZiAoYWdncmVnYXRpb25UeXBlID09PSAnbWlzc2luZycpIHtcbiAgICAgIHJldHVybiBwcnVuZWRBZ2dzO1xuICAgIH0gZWxzZSBpZiAoW1NUQVRTLCBISVNUT0dSQU1dLmluY2x1ZGVzKGFnZ3JlZ2F0aW9uVHlwZSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnBydW5lZEFnZ3MsXG4gICAgICAgIFtmaWVsZF06IHsgLi4ucHJ1bmVkQWdnc1tmaWVsZF0sIFthZ2dyZWdhdGlvblR5cGVdOiB2YWx1ZSB9LFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUuYnVja2V0cykpIHtcbiAgICAgIGNvbnN0IG1pc3NpbmcgPSBnZXQoYWdncmVnYXRpb25zLCBbYCR7ZmllbGR9Om1pc3NpbmdgXSk7XG4gICAgICBjb25zdCBidWNrZXRzID0gW1xuICAgICAgICAuLi52YWx1ZS5idWNrZXRzLFxuICAgICAgICAuLi4oaW5jbHVkZU1pc3NpbmcgJiYgbWlzc2luZyA/IFt7IC4uLm1pc3NpbmcsIGtleTogTUlTU0lORyB9XSA6IFtdKSxcbiAgICAgIF07XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wcnVuZWRBZ2dzLFxuICAgICAgICBbZmllbGRdOiB7XG4gICAgICAgICAgYnVja2V0czogYnVja2V0c1xuICAgICAgICAgICAgLm1hcCgoeyBybiwgLi4uYnVja2V0IH0pID0+ICh7XG4gICAgICAgICAgICAgIC4uLmJ1Y2tldCxcbiAgICAgICAgICAgICAgZG9jX2NvdW50OiBybiA/IHJuLmRvY19jb3VudCA6IGJ1Y2tldC5kb2NfY291bnQsXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIC5maWx0ZXIoYiA9PiBiLmRvY19jb3VudCksXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wcnVuZWRBZ2dzLFxuICAgICAgICAuLi5mbGF0dGVuQWdncmVnYXRpb25zKHsgYWdncmVnYXRpb25zOiB2YWx1ZSwgaW5jbHVkZU1pc3NpbmcgfSksXG4gICAgICB9O1xuICAgIH1cbiAgfSwge30pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmbGF0dGVuQWdncmVnYXRpb25zO1xuIl19