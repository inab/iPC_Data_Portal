"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _getIndexPrefix = _interopRequireDefault(require("./getIndexPrefix"));

var _mapHits = _interopRequireDefault(require("./mapHits"));

var _lodash = require("lodash");

var _esSearch = _interopRequireDefault(require("./esSearch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(_ref) {
    var projectId, index, es, id, lowerCaseIndex, indexPrefix, _ref3, total, fields, metaData, projectIndexData;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            projectId = _ref.projectId, index = _ref.index, es = _ref.es;
            id = projectId.toLowerCase();
            lowerCaseIndex = index.toLowerCase();
            indexPrefix = (0, _getIndexPrefix["default"])({
              projectId: id,
              index: lowerCaseIndex
            });
            _context.prev = 4;
            _context.next = 7;
            return (0, _esSearch["default"])(es)({
              index: indexPrefix,
              size: 0,
              _source: false
            });

          case 7:
            _ref3 = _context.sent;
            total = _ref3.hits.total;
            _context.t0 = _mapHits["default"];
            _context.next = 12;
            return (0, _esSearch["default"])(es)({
              index: indexPrefix,
              size: total
            });

          case 12:
            _context.t1 = _context.sent;
            fields = (0, _context.t0)(_context.t1);
            return _context.abrupt("return", fields);

          case 17:
            _context.prev = 17;
            _context.t2 = _context["catch"](4);
            _context.next = 21;
            return (0, _esSearch["default"])(es)({
              index: "arranger-projects-".concat(projectId)
            });

          case 21:
            metaData = _context.sent;
            projectIndexData = (0, _lodash.get)(metaData, 'hits.hits').find(function (_ref4) {
              var _source = _ref4._source;
              return _source.index === index;
            })._source;
            return _context.abrupt("return", projectIndexData.config['extended']);

          case 24:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 17]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports["default"] = _default;