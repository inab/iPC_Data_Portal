"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toQuery = toQuery;
exports["default"] = columnsToGraphql;

function toQuery(column) {
  return column.query || (column.accessor || '').split('.').reverse().reduce(function (acc, segment, i, arr) {
    if (i === 0) {
      return segment;
    } else {
      return "".concat(segment.indexOf('edges[') === 0 ? 'edges' : segment, " {\n                ").concat(acc, "\n              }");
    }
  }, '');
}

function columnsToGraphql(_ref) {
  var _ref$config = _ref.config,
      config = _ref$config === void 0 ? {} : _ref$config,
      sqon = _ref.sqon,
      queryName = _ref.queryName,
      sort = _ref.sort,
      offset = _ref.offset,
      first = _ref.first;
  var fields = config.columns.filter(function (column) {
    return !(column.accessor && column.accessor === config.keyField) && (column.fetch || column.show);
  }).concat(config.keyField ? {
    accessor: config.keyField
  } : []).map(toQuery).join('\n');
  return {
    fields: fields,
    query: "\n        query($sort: [Sort], $first: Int, $offset: Int, $score: String, $sqon: JSON) {\n          ".concat(config.type, " {\n            hits(first: $first, offset: $offset, sort: $sort, score: $score, filters: $sqon) {\n              total\n              edges {\n                node {\n                  ").concat(fields, "\n                }\n              }\n            }\n          }\n        }\n      "),
    variables: {
      sqon: sqon || null,
      sort: sort && sort.map(function (s) {
        if (s.field.indexOf('hits.total') >= 0) {
          return Object.assign({}, s, {
            field: '_score'
          });
        } else {
          var nested = s.field.match(/(.*)\.hits\.edges\[\d+\]\.node(.*)/);
          return Object.assign({}, s, nested ? {
            field: "".concat(nested[1]).concat(nested[2])
          } : {});
        }
      }),
      score: sort && sort.filter(function (s) {
        return s.field.indexOf('hits.total') >= 0;
      }).map(function (s) {
        var match = s.field.match(/((.*)s)\.hits\.total/);
        return "".concat(match[1], ".").concat(match[2], "_id");
      }).join(',') || null,
      offset: offset,
      first: first
    }
  };
}