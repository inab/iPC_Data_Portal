"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _graphqlFields = _interopRequireDefault(require("graphql-fields"));

var _middleware = require("@arranger/middleware");

var _hackyTemporaryEsSetResolution = require("./hackyTemporaryEsSetResolution");

var _esSearch = _interopRequireDefault(require("./utils/esSearch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var toGraphqlField = function toGraphqlField(acc, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      a = _ref2[0],
      b = _ref2[1];

  return _objectSpread({}, acc, _defineProperty({}, a.replace(/\./g, '__'), b));
};

var _default = function _default(type) {
  return (
    /*#__PURE__*/
    function () {
      var _ref5 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(obj, _ref3, _ref4, info) {
        var _ref3$offset, offset, filters, aggregations_filter_themselves, _ref3$include_missing, include_missing, es, nestedFields, resolvedFilter, query, graphqlFields, aggs, body, response, aggregations;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref3$offset = _ref3.offset, offset = _ref3$offset === void 0 ? 0 : _ref3$offset, filters = _ref3.filters, aggregations_filter_themselves = _ref3.aggregations_filter_themselves, _ref3$include_missing = _ref3.include_missing, include_missing = _ref3$include_missing === void 0 ? true : _ref3$include_missing;
                es = _ref4.es;
                nestedFields = type.nested_fields; // due to this problem in Elasticsearch 6.2 https://github.com/elastic/elasticsearch/issues/27782,
                // we have to resolve set ids into actual ids. As this is an aggregations specific issue,
                // we are placing this here until the issue is resolved by Elasticsearch in version 6.3

                _context.next = 5;
                return (0, _hackyTemporaryEsSetResolution.resolveSetsInSqon)({
                  sqon: filters,
                  es: es
                });

              case 5:
                resolvedFilter = _context.sent;
                query = (0, _middleware.buildQuery)({
                  nestedFields: nestedFields,
                  filters: resolvedFilter
                });
                /**
                 * TODO: getFields does not support aliased fields, so we are unable to
                 * serve multiple aggregations of the same type for a given field.
                 * Library issue: https://github.com/robrichard/graphql-fields/issues/18
                 */

                graphqlFields = (0, _graphqlFields["default"])(info, {}, {
                  processArguments: true
                });
                aggs = (0, _middleware.buildAggregations)({
                  query: query,
                  sqon: resolvedFilter,
                  graphqlFields: graphqlFields,
                  nestedFields: nestedFields,
                  aggregationsFilterThemselves: aggregations_filter_themselves
                });
                body = Object.keys(query || {}).length ? {
                  query: query,
                  aggs: aggs
                } : {
                  aggs: aggs
                };
                _context.next = 12;
                return (0, _esSearch["default"])(es)({
                  index: type.index,
                  size: 0,
                  _source: false,
                  body: body
                });

              case 12:
                response = _context.sent;
                aggregations = (0, _middleware.flattenAggregations)({
                  aggregations: response.aggregations,
                  includeMissing: include_missing
                });
                return _context.abrupt("return", Object.entries(aggregations).reduce(toGraphqlField, {}));

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2, _x3, _x4) {
        return _ref5.apply(this, arguments);
      };
    }()
  );
};

exports["default"] = _default;