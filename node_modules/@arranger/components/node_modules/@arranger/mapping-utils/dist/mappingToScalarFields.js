"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.esToGraphqlTypeMap = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var esToGraphqlTypeMap = {
  keyword: 'String',
  string: 'String',
  text: 'String',
  date: 'String',
  "boolean": 'Boolean',
  "long": 'Float',
  "double": 'Float',
  integer: 'Float',
  "float": 'Float',
  // https://github.com/overture-stack/arranger/blob/master/modules/schema/src/index.js#L9
  object: 'JSON'
};
exports.esToGraphqlTypeMap = esToGraphqlTypeMap;

var maybeArray = function maybeArray(field, extendedFields, type, parent) {
  var _extendedFields$find;

  var fullField = [parent, field].filter(Boolean).join('.');
  return (extendedFields === null || extendedFields === void 0 ? void 0 : (_extendedFields$find = extendedFields.find(function (x) {
    return x.field === fullField;
  })) === null || _extendedFields$find === void 0 ? void 0 : _extendedFields$find.isArray) ? "[".concat(type, "]") : type;
};

var _default = function _default(mapping, extendedFields, parent) {
  return Object.entries(mapping).filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        metadata = _ref2[1];

    return Object.keys(esToGraphqlTypeMap).includes(metadata.type);
  }).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        field = _ref4[0],
        metadata = _ref4[1];

    return "".concat(field, ": ").concat(maybeArray(field, extendedFields, esToGraphqlTypeMap[metadata.type], parent));
  });
};

exports["default"] = _default;