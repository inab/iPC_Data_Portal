"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = require("lodash");

var _esToAggTypeMap = _interopRequireDefault(require("./esToAggTypeMap"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var appendUnderscores = function appendUnderscores(x) {
  return x ? x + '__' : '';
};

var mappingToAggsType = function mappingToAggsType(properties) {
  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return (0, _lodash.flattenDeep)(Object.entries(properties).filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        field = _ref2[0],
        data = _ref2[1];

    return data.type && data.type !== 'nested' || data.properties;
  }).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        field = _ref4[0],
        data = _ref4[1];

    return data.type && data.type !== 'nested' ? "".concat(appendUnderscores(parent) + field, ": ").concat(_esToAggTypeMap["default"][data.type]) : mappingToAggsType(data.properties, appendUnderscores(parent) + field);
  }));
};

var _default = mappingToAggsType;
exports["default"] = _default;