"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;
exports.opSwitch = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../constants");

var _normalizeFilters = _interopRequireDefault(require("./normalizeFilters"));

var _esFilter2 = require("../utils/esFilter");

var _wrappers;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var wrapFilter = function wrapFilter(_ref) {
  var esFilter = _ref.esFilter,
      nestedFields = _ref.nestedFields,
      filter = _ref.filter,
      isNot = _ref.isNot;
  return filter.content.field.split('.').slice(0, -1).map(function (p, i, segments) {
    return segments.slice(0, i + 1).join('.');
  }).filter(function (p) {
    return nestedFields.includes(p);
  }).reverse().reduce(function (esFilter, path, i) {
    return (0, _esFilter2.wrapNested)(esFilter, path);
  }, isNot ? (0, _esFilter2.wrapMustNot)(esFilter) : esFilter);
};

function getRegexFilter(_ref2) {
  var nestedFields = _ref2.nestedFields,
      filter = _ref2.filter;

  var op = filter.op,
      _filter$content = filter.content,
      field = _filter$content.field,
      _filter$content$value = _slicedToArray(_filter$content.value, 1),
      value = _filter$content$value[0];

  var esFilter = wrapFilter({
    filter: filter,
    nestedFields: nestedFields,
    esFilter: {
      regexp: _defineProperty({}, field, value.replace('*', '.*'))
    },
    isNot: _constants.NOT_IN_OP === op
  });
  return op === _constants.SOME_NOT_IN_OP ? (0, _esFilter2.wrapMustNot)(esFilter) : esFilter;
}

function getTermFilter(_ref3) {
  var _terms;

  var nestedFields = _ref3.nestedFields,
      filter = _ref3.filter;
  var op = filter.op,
      _filter$content2 = filter.content,
      value = _filter$content2.value,
      field = _filter$content2.field;
  var esFilter = wrapFilter({
    filter: filter,
    nestedFields: nestedFields,
    esFilter: {
      terms: (_terms = {}, _defineProperty(_terms, field, value.map(function (item) {
        return item || '';
      })), _defineProperty(_terms, "boost", 0), _terms)
    },
    isNot: _constants.NOT_IN_OP === op
  });
  return op === _constants.SOME_NOT_IN_OP ? (0, _esFilter2.wrapMustNot)(esFilter) : esFilter;
}

function getFuzzyFilter(_ref4) {
  var nestedFields = _ref4.nestedFields,
      filter = _ref4.filter;
  var content = filter.content;
  var value = content.value,
      fields = content.fields; // group queries by their nesting level

  var sortedNested = nestedFields.slice().sort(function (a, b) {
    return b.length - a.length;
  });
  var nestedMap = fields.reduce(function (acc, field) {
    var group = sortedNested.find(function (y) {
      return field.includes(y);
    }) || '';

    if (acc[group]) {
      acc[group].push(field);
    } else {
      acc[group] = [field];
    }

    return acc;
  }, {}); // construct one multi match per nested group

  return (0, _esFilter2.wrapShould)(Object.values(nestedMap).map(function (fields) {
    var _ES_MULTI_MATCH;

    return wrapFilter({
      filter: _objectSpread({}, filter, {
        content: _objectSpread({}, content, {
          field: fields[0]
        })
      }),
      nestedFields: nestedFields,
      esFilter: _defineProperty({}, _constants.ES_MULTI_MATCH, (_ES_MULTI_MATCH = {}, _defineProperty(_ES_MULTI_MATCH, _constants.ES_QUERY, value), _defineProperty(_ES_MULTI_MATCH, _constants.ES_FIELDS, fields), _defineProperty(_ES_MULTI_MATCH, _constants.ES_TYPE, _constants.ES_PHRASE_PREFIX), _ES_MULTI_MATCH))
    });
  }));
}

function getMissingFilter(_ref5) {
  var nestedFields = _ref5.nestedFields,
      filter = _ref5.filter;
  var field = filter.content.field;
  return wrapFilter({
    esFilter: {
      exists: {
        field: field,
        boost: 0
      }
    },
    nestedFields: nestedFields,
    filter: filter,
    isNot: true
  });
}

function getRangeFilter(_ref6) {
  var nestedFields = _ref6.nestedFields,
      filter = _ref6.filter;
  var op = filter.op,
      _filter$content3 = filter.content,
      field = _filter$content3.field,
      value = _filter$content3.value;
  return wrapFilter({
    filter: filter,
    nestedFields: nestedFields,
    esFilter: {
      range: _defineProperty({}, field, _defineProperty({
        boost: 0
      }, op, (0, _esFilter2.toEsRangeValue)([_constants.GT_OP, _constants.GTE_OP].includes(op) ? _lodash["default"].max(value) : _lodash["default"].min(value))))
    }
  });
}

function collapseNestedFilters(_ref7) {
  var esFilter = _ref7.esFilter,
      bools = _ref7.bools;
  var filterIsNested = (0, _esFilter2.isNested)(esFilter);
  var basePath = [].concat(_toConsumableArray(filterIsNested ? [_constants.ES_NESTED, _constants.ES_QUERY] : []), [_constants.ES_BOOL]);
  var path = [_constants.ES_MUST, _constants.ES_MUST_NOT].map(function (p) {
    return [].concat(_toConsumableArray(basePath), [p]);
  }).find(function (path) {
    return _lodash["default"].get(esFilter, path);
  });
  var found = path && bools.find(function (bool) {
    return filterIsNested ? (0, _esFilter2.readPath)(bool) === (0, _esFilter2.readPath)(esFilter) : _lodash["default"].get(bool, path);
  });
  return [].concat(_toConsumableArray(bools.filter(function (bool) {
    return bool !== found;
  })), [found ? (0, _esFilter2.mergePath)(found, path, filterIsNested ? collapseNestedFilters({
    esFilter: _lodash["default"].get(esFilter, path)[0],
    bools: _lodash["default"].get(found, path, [])
  }) : [].concat(_toConsumableArray(_lodash["default"].get(found, path)), _toConsumableArray(_lodash["default"].get(esFilter, path)))) : esFilter]);
}

var wrappers = (_wrappers = {}, _defineProperty(_wrappers, _constants.AND_OP, _esFilter2.wrapMust), _defineProperty(_wrappers, _constants.OR_OP, _esFilter2.wrapShould), _defineProperty(_wrappers, _constants.NOT_OP, _esFilter2.wrapMustNot), _wrappers);

function getGroupFilter(_ref8) {
  var _esFilters$, _esFilters$2;

  var nestedFields = _ref8.nestedFields,
      _ref8$filter = _ref8.filter,
      content = _ref8$filter.content,
      op = _ref8$filter.op,
      pivot = _ref8$filter.pivot;
  var applyBooleanWrapper = wrappers[op];
  var esFilters = content.map(function (filter) {
    return opSwitch({
      nestedFields: nestedFields,
      filter: filter
    });
  });
  var isNested = !!((_esFilters$ = esFilters[0]) === null || _esFilters$ === void 0 ? void 0 : _esFilters$.nested);

  if (isNested && pivot === ((_esFilters$2 = esFilters[0]) === null || _esFilters$2 === void 0 ? void 0 : _esFilters$2.nested.path)) {
    var flattned = esFilters.reduce(function (bools, esFilter) {
      return op === _constants.AND_OP || op === _constants.NOT_OP ? collapseNestedFilters({
        esFilter: esFilter,
        bools: bools
      }) : [].concat(_toConsumableArray(bools), [esFilter]);
    }, []);
    return applyBooleanWrapper(flattned);
  } else {
    return applyBooleanWrapper(esFilters);
  }
}

function getSetFilter(_ref9) {
  var nestedFields = _ref9.nestedFields,
      filter = _ref9.filter,
      _ref9$filter = _ref9.filter,
      content = _ref9$filter.content,
      op = _ref9$filter.op;
  return wrapFilter({
    isNot: op === _constants.NOT_IN_OP,
    filter: filter,
    nestedFields: nestedFields,
    esFilter: {
      terms: _defineProperty({
        boost: 0
      }, content.field, {
        index: _constants.ES_ARRANGER_SET_INDEX,
        type: _constants.ES_ARRANGER_SET_TYPE,
        id: _lodash["default"].flatMap([content.value])[0].replace('set_id:', ''),
        path: 'ids'
      })
    }
  });
}

var getBetweenFilter = function getBetweenFilter(_ref10) {
  var _field2;

  var nestedFields = _ref10.nestedFields,
      filter = _ref10.filter;
  var _filter$content4 = filter.content,
      field = _filter$content4.field,
      value = _filter$content4.value;
  return wrapFilter({
    filter: filter,
    nestedFields: nestedFields,
    esFilter: {
      range: _defineProperty({}, field, (_field2 = {
        boost: 0
      }, _defineProperty(_field2, _constants.GTE_OP, _lodash["default"].min(value)), _defineProperty(_field2, _constants.LTE_OP, _lodash["default"].max(value)), _field2))
    }
  });
};

var opSwitch = function opSwitch(_ref11) {
  var nestedFields = _ref11.nestedFields,
      filter = _ref11.filter;
  var op = filter.op,
      pivot = filter.pivot,
      value = filter.content.value; // we need a way to handle object fields before the following error is valid
  // if (pivot && pivot !== '.' && !nestedFields.includes(pivot)) {
  //   throw new Error(`Invalid pivot field "${pivot}", not a nested field`);
  // }

  if ([_constants.OR_OP, _constants.AND_OP, _constants.NOT_OP].includes(op)) {
    return getGroupFilter({
      nestedFields: nestedFields,
      filter: filter
    });
  } else if ([_constants.IN_OP, _constants.NOT_IN_OP, _constants.SOME_NOT_IN_OP].includes(op)) {
    if ("".concat(value[0]).includes(_constants.REGEX)) {
      return getRegexFilter({
        nestedFields: nestedFields,
        filter: filter
      });
    } else if ("".concat(value[0]).includes(_constants.SET_ID)) {
      return getSetFilter({
        nestedFields: nestedFields,
        filter: filter
      });
    } else if ("".concat(value[0]).includes(_constants.MISSING)) {
      return getMissingFilter({
        nestedFields: nestedFields,
        filter: filter
      });
    } else {
      return getTermFilter({
        nestedFields: nestedFields,
        filter: filter
      });
    }
  } else if ([_constants.ALL_OP].includes(op)) {
    return getGroupFilter({
      nestedFields: nestedFields,
      filter: {
        op: _constants.AND_OP,
        pivot: pivot || '.',
        content: filter.content.value.map(function (v) {
          return {
            op: _constants.IN_OP,
            content: {
              field: filter.content.field,
              value: [v]
            }
          };
        })
      }
    });
  } else if ([_constants.GT_OP, _constants.GTE_OP, _constants.LT_OP, _constants.LTE_OP].includes(op)) {
    return getRangeFilter({
      nestedFields: nestedFields,
      filter: filter
    });
  } else if ([_constants.BETWEEN_OP].includes(op)) {
    return getBetweenFilter({
      nestedFields: nestedFields,
      filter: filter
    });
  } else if (_constants.FILTER_OP === op) {
    return getFuzzyFilter({
      nestedFields: nestedFields,
      filter: filter
    });
  } else {
    throw new Error('unknown op');
  }
};

exports.opSwitch = opSwitch;

function _default(_ref12) {
  var nestedFields = _ref12.nestedFields,
      rawFilters = _ref12.filters;
  if (Object.keys(rawFilters || {}).length === 0) return {};
  return opSwitch({
    nestedFields: nestedFields,
    filter: (0, _normalizeFilters["default"])(rawFilters)
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZFF1ZXJ5L2luZGV4LmpzIl0sIm5hbWVzIjpbIndyYXBGaWx0ZXIiLCJlc0ZpbHRlciIsIm5lc3RlZEZpZWxkcyIsImZpbHRlciIsImlzTm90IiwiY29udGVudCIsImZpZWxkIiwic3BsaXQiLCJzbGljZSIsIm1hcCIsInAiLCJpIiwic2VnbWVudHMiLCJqb2luIiwiaW5jbHVkZXMiLCJyZXZlcnNlIiwicmVkdWNlIiwicGF0aCIsImdldFJlZ2V4RmlsdGVyIiwib3AiLCJ2YWx1ZSIsInJlZ2V4cCIsInJlcGxhY2UiLCJOT1RfSU5fT1AiLCJTT01FX05PVF9JTl9PUCIsImdldFRlcm1GaWx0ZXIiLCJ0ZXJtcyIsIml0ZW0iLCJnZXRGdXp6eUZpbHRlciIsImZpZWxkcyIsInNvcnRlZE5lc3RlZCIsInNvcnQiLCJhIiwiYiIsImxlbmd0aCIsIm5lc3RlZE1hcCIsImFjYyIsImdyb3VwIiwiZmluZCIsInkiLCJwdXNoIiwiT2JqZWN0IiwidmFsdWVzIiwiRVNfTVVMVElfTUFUQ0giLCJFU19RVUVSWSIsIkVTX0ZJRUxEUyIsIkVTX1RZUEUiLCJFU19QSFJBU0VfUFJFRklYIiwiZ2V0TWlzc2luZ0ZpbHRlciIsImV4aXN0cyIsImJvb3N0IiwiZ2V0UmFuZ2VGaWx0ZXIiLCJyYW5nZSIsIkdUX09QIiwiR1RFX09QIiwiXyIsIm1heCIsIm1pbiIsImNvbGxhcHNlTmVzdGVkRmlsdGVycyIsImJvb2xzIiwiZmlsdGVySXNOZXN0ZWQiLCJiYXNlUGF0aCIsIkVTX05FU1RFRCIsIkVTX0JPT0wiLCJFU19NVVNUIiwiRVNfTVVTVF9OT1QiLCJnZXQiLCJmb3VuZCIsImJvb2wiLCJ3cmFwcGVycyIsIkFORF9PUCIsIndyYXBNdXN0IiwiT1JfT1AiLCJ3cmFwU2hvdWxkIiwiTk9UX09QIiwid3JhcE11c3ROb3QiLCJnZXRHcm91cEZpbHRlciIsInBpdm90IiwiYXBwbHlCb29sZWFuV3JhcHBlciIsImVzRmlsdGVycyIsIm9wU3dpdGNoIiwiaXNOZXN0ZWQiLCJuZXN0ZWQiLCJmbGF0dG5lZCIsImdldFNldEZpbHRlciIsImluZGV4IiwiRVNfQVJSQU5HRVJfU0VUX0lOREVYIiwidHlwZSIsIkVTX0FSUkFOR0VSX1NFVF9UWVBFIiwiaWQiLCJmbGF0TWFwIiwiZ2V0QmV0d2VlbkZpbHRlciIsIkxURV9PUCIsIklOX09QIiwiUkVHRVgiLCJTRVRfSUQiLCJNSVNTSU5HIiwiQUxMX09QIiwidiIsIkxUX09QIiwiQkVUV0VFTl9PUCIsIkZJTFRFUl9PUCIsIkVycm9yIiwicmF3RmlsdGVycyIsImZpbHRlcnMiLCJrZXlzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUNBOztBQTZCQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVdBLElBQU1BLFVBQVUsR0FBRyxTQUFiQSxVQUFhLE9BQStDO0FBQUEsTUFBNUNDLFFBQTRDLFFBQTVDQSxRQUE0QztBQUFBLE1BQWxDQyxZQUFrQyxRQUFsQ0EsWUFBa0M7QUFBQSxNQUFwQkMsTUFBb0IsUUFBcEJBLE1BQW9CO0FBQUEsTUFBWkMsS0FBWSxRQUFaQSxLQUFZO0FBQ2hFLFNBQU9ELE1BQU0sQ0FBQ0UsT0FBUCxDQUFlQyxLQUFmLENBQ0pDLEtBREksQ0FDRSxHQURGLEVBRUpDLEtBRkksQ0FFRSxDQUZGLEVBRUssQ0FBQyxDQUZOLEVBR0pDLEdBSEksQ0FHQSxVQUFDQyxDQUFELEVBQUlDLENBQUosRUFBT0MsUUFBUDtBQUFBLFdBQW9CQSxRQUFRLENBQUNKLEtBQVQsQ0FBZSxDQUFmLEVBQWtCRyxDQUFDLEdBQUcsQ0FBdEIsRUFBeUJFLElBQXpCLENBQThCLEdBQTlCLENBQXBCO0FBQUEsR0FIQSxFQUlKVixNQUpJLENBSUcsVUFBQU8sQ0FBQztBQUFBLFdBQUlSLFlBQVksQ0FBQ1ksUUFBYixDQUFzQkosQ0FBdEIsQ0FBSjtBQUFBLEdBSkosRUFLSkssT0FMSSxHQU1KQyxNQU5JLENBT0gsVUFBQ2YsUUFBRCxFQUFXZ0IsSUFBWCxFQUFpQk4sQ0FBakI7QUFBQSxXQUF1QiwyQkFBV1YsUUFBWCxFQUFxQmdCLElBQXJCLENBQXZCO0FBQUEsR0FQRyxFQVFIYixLQUFLLEdBQUcsNEJBQVlILFFBQVosQ0FBSCxHQUEyQkEsUUFSN0IsQ0FBUDtBQVVELENBWEQ7O0FBYUEsU0FBU2lCLGNBQVQsUUFBa0Q7QUFBQSxNQUF4QmhCLFlBQXdCLFNBQXhCQSxZQUF3QjtBQUFBLE1BQVZDLE1BQVUsU0FBVkEsTUFBVTs7QUFBQSxNQUN4Q2dCLEVBRHdDLEdBQ0doQixNQURILENBQ3hDZ0IsRUFEd0M7QUFBQSx3QkFDR2hCLE1BREgsQ0FDcENFLE9BRG9DO0FBQUEsTUFDekJDLEtBRHlCLG1CQUN6QkEsS0FEeUI7QUFBQSw2REFDbEJjLEtBRGtCO0FBQUEsTUFDVkEsS0FEVTs7QUFFaEQsTUFBTW5CLFFBQVEsR0FBR0QsVUFBVSxDQUFDO0FBQzFCRyxJQUFBQSxNQUFNLEVBQU5BLE1BRDBCO0FBRTFCRCxJQUFBQSxZQUFZLEVBQVpBLFlBRjBCO0FBRzFCRCxJQUFBQSxRQUFRLEVBQUU7QUFBRW9CLE1BQUFBLE1BQU0sc0JBQUtmLEtBQUwsRUFBYWMsS0FBSyxDQUFDRSxPQUFOLENBQWMsR0FBZCxFQUFtQixJQUFuQixDQUFiO0FBQVIsS0FIZ0I7QUFJMUJsQixJQUFBQSxLQUFLLEVBQUVtQix5QkFBY0o7QUFKSyxHQUFELENBQTNCO0FBT0EsU0FBT0EsRUFBRSxLQUFLSyx5QkFBUCxHQUF3Qiw0QkFBWXZCLFFBQVosQ0FBeEIsR0FBZ0RBLFFBQXZEO0FBQ0Q7O0FBRUQsU0FBU3dCLGFBQVQsUUFBaUQ7QUFBQTs7QUFBQSxNQUF4QnZCLFlBQXdCLFNBQXhCQSxZQUF3QjtBQUFBLE1BQVZDLE1BQVUsU0FBVkEsTUFBVTtBQUFBLE1BQ3ZDZ0IsRUFEdUMsR0FDTGhCLE1BREssQ0FDdkNnQixFQUR1QztBQUFBLHlCQUNMaEIsTUFESyxDQUNuQ0UsT0FEbUM7QUFBQSxNQUN4QmUsS0FEd0Isb0JBQ3hCQSxLQUR3QjtBQUFBLE1BQ2pCZCxLQURpQixvQkFDakJBLEtBRGlCO0FBRS9DLE1BQU1MLFFBQVEsR0FBR0QsVUFBVSxDQUFDO0FBQzFCRyxJQUFBQSxNQUFNLEVBQU5BLE1BRDBCO0FBRTFCRCxJQUFBQSxZQUFZLEVBQVpBLFlBRjBCO0FBRzFCRCxJQUFBQSxRQUFRLEVBQUU7QUFBRXlCLE1BQUFBLEtBQUssd0NBQUtwQixLQUFMLEVBQWFjLEtBQUssQ0FBQ1gsR0FBTixDQUFVLFVBQUFrQixJQUFJO0FBQUEsZUFBSUEsSUFBSSxJQUFJLEVBQVo7QUFBQSxPQUFkLENBQWIsb0NBQW1ELENBQW5EO0FBQVAsS0FIZ0I7QUFJMUJ2QixJQUFBQSxLQUFLLEVBQUVtQix5QkFBY0o7QUFKSyxHQUFELENBQTNCO0FBT0EsU0FBT0EsRUFBRSxLQUFLSyx5QkFBUCxHQUF3Qiw0QkFBWXZCLFFBQVosQ0FBeEIsR0FBZ0RBLFFBQXZEO0FBQ0Q7O0FBRUQsU0FBUzJCLGNBQVQsUUFBa0Q7QUFBQSxNQUF4QjFCLFlBQXdCLFNBQXhCQSxZQUF3QjtBQUFBLE1BQVZDLE1BQVUsU0FBVkEsTUFBVTtBQUFBLE1BQ3hDRSxPQUR3QyxHQUM1QkYsTUFENEIsQ0FDeENFLE9BRHdDO0FBQUEsTUFFeENlLEtBRndDLEdBRXRCZixPQUZzQixDQUV4Q2UsS0FGd0M7QUFBQSxNQUVqQ1MsTUFGaUMsR0FFdEJ4QixPQUZzQixDQUVqQ3dCLE1BRmlDLEVBSWhEOztBQUNBLE1BQU1DLFlBQVksR0FBRzVCLFlBQVksQ0FBQ00sS0FBYixHQUFxQnVCLElBQXJCLENBQTBCLFVBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLFdBQVVBLENBQUMsQ0FBQ0MsTUFBRixHQUFXRixDQUFDLENBQUNFLE1BQXZCO0FBQUEsR0FBMUIsQ0FBckI7QUFDQSxNQUFNQyxTQUFTLEdBQUdOLE1BQU0sQ0FBQ2IsTUFBUCxDQUFjLFVBQUNvQixHQUFELEVBQU05QixLQUFOLEVBQWdCO0FBQzlDLFFBQU0rQixLQUFLLEdBQUdQLFlBQVksQ0FBQ1EsSUFBYixDQUFrQixVQUFBQyxDQUFDO0FBQUEsYUFBSWpDLEtBQUssQ0FBQ1EsUUFBTixDQUFleUIsQ0FBZixDQUFKO0FBQUEsS0FBbkIsS0FBNkMsRUFBM0Q7O0FBQ0EsUUFBSUgsR0FBRyxDQUFDQyxLQUFELENBQVAsRUFBZ0I7QUFDZEQsTUFBQUEsR0FBRyxDQUFDQyxLQUFELENBQUgsQ0FBV0csSUFBWCxDQUFnQmxDLEtBQWhCO0FBQ0QsS0FGRCxNQUVPO0FBQ0w4QixNQUFBQSxHQUFHLENBQUNDLEtBQUQsQ0FBSCxHQUFhLENBQUMvQixLQUFELENBQWI7QUFDRDs7QUFDRCxXQUFPOEIsR0FBUDtBQUNELEdBUmlCLEVBUWYsRUFSZSxDQUFsQixDQU5nRCxDQWdCaEQ7O0FBQ0EsU0FBTywyQkFDTEssTUFBTSxDQUFDQyxNQUFQLENBQWNQLFNBQWQsRUFBeUIxQixHQUF6QixDQUE2QixVQUFBb0IsTUFBTTtBQUFBOztBQUFBLFdBQ2pDN0IsVUFBVSxDQUFDO0FBQ1RHLE1BQUFBLE1BQU0sb0JBQU9BLE1BQVA7QUFBZUUsUUFBQUEsT0FBTyxvQkFBT0EsT0FBUDtBQUFnQkMsVUFBQUEsS0FBSyxFQUFFdUIsTUFBTSxDQUFDLENBQUQ7QUFBN0I7QUFBdEIsUUFERztBQUVUM0IsTUFBQUEsWUFBWSxFQUFaQSxZQUZTO0FBR1RELE1BQUFBLFFBQVEsc0JBQ0wwQyx5QkFESywwREFFSEMsbUJBRkcsRUFFUXhCLEtBRlIsb0NBR0h5QixvQkFIRyxFQUdTaEIsTUFIVCxvQ0FJSGlCLGtCQUpHLEVBSU9DLDJCQUpQO0FBSEMsS0FBRCxDQUR1QjtBQUFBLEdBQW5DLENBREssQ0FBUDtBQWVEOztBQUVELFNBQVNDLGdCQUFULFFBQW9EO0FBQUEsTUFBeEI5QyxZQUF3QixTQUF4QkEsWUFBd0I7QUFBQSxNQUFWQyxNQUFVLFNBQVZBLE1BQVU7QUFBQSxNQUMvQkcsS0FEK0IsR0FDbkJILE1BRG1CLENBQzFDRSxPQUQwQyxDQUMvQkMsS0FEK0I7QUFFbEQsU0FBT04sVUFBVSxDQUFDO0FBQ2hCQyxJQUFBQSxRQUFRLEVBQUU7QUFBRWdELE1BQUFBLE1BQU0sRUFBRTtBQUFFM0MsUUFBQUEsS0FBSyxFQUFFQSxLQUFUO0FBQWdCNEMsUUFBQUEsS0FBSyxFQUFFO0FBQXZCO0FBQVYsS0FETTtBQUVoQmhELElBQUFBLFlBQVksRUFBWkEsWUFGZ0I7QUFHaEJDLElBQUFBLE1BQU0sRUFBTkEsTUFIZ0I7QUFJaEJDLElBQUFBLEtBQUssRUFBRTtBQUpTLEdBQUQsQ0FBakI7QUFNRDs7QUFFRCxTQUFTK0MsY0FBVCxRQUFrRDtBQUFBLE1BQXhCakQsWUFBd0IsU0FBeEJBLFlBQXdCO0FBQUEsTUFBVkMsTUFBVSxTQUFWQSxNQUFVO0FBQUEsTUFDeENnQixFQUR3QyxHQUNOaEIsTUFETSxDQUN4Q2dCLEVBRHdDO0FBQUEseUJBQ05oQixNQURNLENBQ3BDRSxPQURvQztBQUFBLE1BQ3pCQyxLQUR5QixvQkFDekJBLEtBRHlCO0FBQUEsTUFDbEJjLEtBRGtCLG9CQUNsQkEsS0FEa0I7QUFFaEQsU0FBT3BCLFVBQVUsQ0FBQztBQUNoQkcsSUFBQUEsTUFBTSxFQUFOQSxNQURnQjtBQUVoQkQsSUFBQUEsWUFBWSxFQUFaQSxZQUZnQjtBQUdoQkQsSUFBQUEsUUFBUSxFQUFFO0FBQ1JtRCxNQUFBQSxLQUFLLHNCQUNGOUMsS0FERTtBQUVENEMsUUFBQUEsS0FBSyxFQUFFO0FBRk4sU0FHQS9CLEVBSEEsRUFHSywrQkFDSixDQUFDa0MsZ0JBQUQsRUFBUUMsaUJBQVIsRUFBZ0J4QyxRQUFoQixDQUF5QkssRUFBekIsSUFBK0JvQyxtQkFBRUMsR0FBRixDQUFNcEMsS0FBTixDQUEvQixHQUE4Q21DLG1CQUFFRSxHQUFGLENBQU1yQyxLQUFOLENBRDFDLENBSEw7QUFERztBQUhNLEdBQUQsQ0FBakI7QUFjRDs7QUFFRCxTQUFTc0MscUJBQVQsUUFBb0Q7QUFBQSxNQUFuQnpELFFBQW1CLFNBQW5CQSxRQUFtQjtBQUFBLE1BQVQwRCxLQUFTLFNBQVRBLEtBQVM7QUFDbEQsTUFBTUMsY0FBYyxHQUFHLHlCQUFTM0QsUUFBVCxDQUF2QjtBQUNBLE1BQU00RCxRQUFRLGdDQUFRRCxjQUFjLEdBQUcsQ0FBQ0Usb0JBQUQsRUFBWWxCLG1CQUFaLENBQUgsR0FBMkIsRUFBakQsSUFBc0RtQixrQkFBdEQsRUFBZDtBQUNBLE1BQU05QyxJQUFJLEdBQUcsQ0FBQytDLGtCQUFELEVBQVVDLHNCQUFWLEVBQ1Z4RCxHQURVLENBQ04sVUFBQUMsQ0FBQztBQUFBLHdDQUFRbUQsUUFBUixJQUFrQm5ELENBQWxCO0FBQUEsR0FESyxFQUVWNEIsSUFGVSxDQUVMLFVBQUFyQixJQUFJO0FBQUEsV0FBSXNDLG1CQUFFVyxHQUFGLENBQU1qRSxRQUFOLEVBQWdCZ0IsSUFBaEIsQ0FBSjtBQUFBLEdBRkMsQ0FBYjtBQUlBLE1BQU1rRCxLQUFLLEdBQ1RsRCxJQUFJLElBQ0owQyxLQUFLLENBQUNyQixJQUFOLENBQ0UsVUFBQThCLElBQUk7QUFBQSxXQUNGUixjQUFjLEdBQ1YseUJBQVNRLElBQVQsTUFBbUIseUJBQVNuRSxRQUFULENBRFQsR0FFVnNELG1CQUFFVyxHQUFGLENBQU1FLElBQU4sRUFBWW5ELElBQVosQ0FIRjtBQUFBLEdBRE4sQ0FGRjtBQVNBLHNDQUNLMEMsS0FBSyxDQUFDeEQsTUFBTixDQUFhLFVBQUFpRSxJQUFJO0FBQUEsV0FBSUEsSUFBSSxLQUFLRCxLQUFiO0FBQUEsR0FBakIsQ0FETCxJQUVFQSxLQUFLLEdBQ0QsMEJBQ0VBLEtBREYsRUFFRWxELElBRkYsRUFHRTJDLGNBQWMsR0FDVkYscUJBQXFCLENBQUM7QUFDcEJ6RCxJQUFBQSxRQUFRLEVBQUVzRCxtQkFBRVcsR0FBRixDQUFNakUsUUFBTixFQUFnQmdCLElBQWhCLEVBQXNCLENBQXRCLENBRFU7QUFFcEIwQyxJQUFBQSxLQUFLLEVBQUVKLG1CQUFFVyxHQUFGLENBQU1DLEtBQU4sRUFBYWxELElBQWIsRUFBbUIsRUFBbkI7QUFGYSxHQUFELENBRFgsZ0NBS05zQyxtQkFBRVcsR0FBRixDQUFNQyxLQUFOLEVBQWFsRCxJQUFiLENBTE0sc0JBS2lCc0MsbUJBQUVXLEdBQUYsQ0FBTWpFLFFBQU4sRUFBZ0JnQixJQUFoQixDQUxqQixFQUhoQixDQURDLEdBV0RoQixRQWJOO0FBZUQ7O0FBRUQsSUFBTW9FLFFBQVEsK0NBQ1hDLGlCQURXLEVBQ0ZDLG1CQURFLDhCQUVYQyxnQkFGVyxFQUVIQyxxQkFGRyw4QkFHWEMsaUJBSFcsRUFHRkMsc0JBSEUsYUFBZDs7QUFLQSxTQUFTQyxjQUFULFFBQTBFO0FBQUE7O0FBQUEsTUFBaEQxRSxZQUFnRCxTQUFoREEsWUFBZ0Q7QUFBQSwyQkFBbENDLE1BQWtDO0FBQUEsTUFBeEJFLE9BQXdCLGdCQUF4QkEsT0FBd0I7QUFBQSxNQUFmYyxFQUFlLGdCQUFmQSxFQUFlO0FBQUEsTUFBWDBELEtBQVcsZ0JBQVhBLEtBQVc7QUFDeEUsTUFBTUMsbUJBQW1CLEdBQUdULFFBQVEsQ0FBQ2xELEVBQUQsQ0FBcEM7QUFDQSxNQUFNNEQsU0FBUyxHQUFHMUUsT0FBTyxDQUFDSSxHQUFSLENBQVksVUFBQU4sTUFBTTtBQUFBLFdBQUk2RSxRQUFRLENBQUM7QUFBRTlFLE1BQUFBLFlBQVksRUFBWkEsWUFBRjtBQUFnQkMsTUFBQUEsTUFBTSxFQUFOQTtBQUFoQixLQUFELENBQVo7QUFBQSxHQUFsQixDQUFsQjtBQUNBLE1BQU04RSxRQUFRLEdBQUcsQ0FBQyxpQkFBQ0YsU0FBUyxDQUFDLENBQUQsQ0FBVixnREFBQyxZQUFjRyxNQUFmLENBQWxCOztBQUNBLE1BQUlELFFBQVEsSUFBSUosS0FBSyxzQkFBS0UsU0FBUyxDQUFDLENBQUQsQ0FBZCxpREFBSyxhQUFjRyxNQUFkLENBQXFCakUsSUFBMUIsQ0FBckIsRUFBcUQ7QUFDbkQsUUFBTWtFLFFBQVEsR0FBR0osU0FBUyxDQUFDL0QsTUFBVixDQUNmLFVBQUMyQyxLQUFELEVBQVExRCxRQUFSO0FBQUEsYUFDRWtCLEVBQUUsS0FBS21ELGlCQUFQLElBQWlCbkQsRUFBRSxLQUFLdUQsaUJBQXhCLEdBQ0loQixxQkFBcUIsQ0FBQztBQUFFekQsUUFBQUEsUUFBUSxFQUFSQSxRQUFGO0FBQVkwRCxRQUFBQSxLQUFLLEVBQUxBO0FBQVosT0FBRCxDQUR6QixnQ0FFUUEsS0FGUixJQUVlMUQsUUFGZixFQURGO0FBQUEsS0FEZSxFQUtmLEVBTGUsQ0FBakI7QUFPQSxXQUFPNkUsbUJBQW1CLENBQUNLLFFBQUQsQ0FBMUI7QUFDRCxHQVRELE1BU087QUFDTCxXQUFPTCxtQkFBbUIsQ0FBQ0MsU0FBRCxDQUExQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0ssWUFBVCxRQUF5RTtBQUFBLE1BQWpEbEYsWUFBaUQsU0FBakRBLFlBQWlEO0FBQUEsTUFBbkNDLE1BQW1DLFNBQW5DQSxNQUFtQztBQUFBLDJCQUEzQkEsTUFBMkI7QUFBQSxNQUFqQkUsT0FBaUIsZ0JBQWpCQSxPQUFpQjtBQUFBLE1BQVJjLEVBQVEsZ0JBQVJBLEVBQVE7QUFDdkUsU0FBT25CLFVBQVUsQ0FBQztBQUNoQkksSUFBQUEsS0FBSyxFQUFFZSxFQUFFLEtBQUtJLG9CQURFO0FBRWhCcEIsSUFBQUEsTUFBTSxFQUFOQSxNQUZnQjtBQUdoQkQsSUFBQUEsWUFBWSxFQUFaQSxZQUhnQjtBQUloQkQsSUFBQUEsUUFBUSxFQUFFO0FBQ1J5QixNQUFBQSxLQUFLO0FBQ0h3QixRQUFBQSxLQUFLLEVBQUU7QUFESixTQUVGN0MsT0FBTyxDQUFDQyxLQUZOLEVBRWM7QUFDZitFLFFBQUFBLEtBQUssRUFBRUMsZ0NBRFE7QUFFZkMsUUFBQUEsSUFBSSxFQUFFQywrQkFGUztBQUdmQyxRQUFBQSxFQUFFLEVBQUVsQyxtQkFBRW1DLE9BQUYsQ0FBVSxDQUFDckYsT0FBTyxDQUFDZSxLQUFULENBQVYsRUFBMkIsQ0FBM0IsRUFBOEJFLE9BQTlCLENBQXNDLFNBQXRDLEVBQWlELEVBQWpELENBSFc7QUFJZkwsUUFBQUEsSUFBSSxFQUFFO0FBSlMsT0FGZDtBQURHO0FBSk0sR0FBRCxDQUFqQjtBQWdCRDs7QUFFRCxJQUFNMEUsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixTQUE4QjtBQUFBOztBQUFBLE1BQTNCekYsWUFBMkIsVUFBM0JBLFlBQTJCO0FBQUEsTUFBYkMsTUFBYSxVQUFiQSxNQUFhO0FBQUEseUJBQ2ZBLE1BRGUsQ0FDN0NFLE9BRDZDO0FBQUEsTUFDbENDLEtBRGtDLG9CQUNsQ0EsS0FEa0M7QUFBQSxNQUMzQmMsS0FEMkIsb0JBQzNCQSxLQUQyQjtBQUVyRCxTQUFPcEIsVUFBVSxDQUFDO0FBQ2hCRyxJQUFBQSxNQUFNLEVBQU5BLE1BRGdCO0FBRWhCRCxJQUFBQSxZQUFZLEVBQVpBLFlBRmdCO0FBR2hCRCxJQUFBQSxRQUFRLEVBQUU7QUFDUm1ELE1BQUFBLEtBQUssc0JBQ0Y5QyxLQURFO0FBRUQ0QyxRQUFBQSxLQUFLLEVBQUU7QUFGTixrQ0FHQUksaUJBSEEsRUFHU0MsbUJBQUVFLEdBQUYsQ0FBTXJDLEtBQU4sQ0FIVCw0QkFJQXdFLGlCQUpBLEVBSVNyQyxtQkFBRUMsR0FBRixDQUFNcEMsS0FBTixDQUpUO0FBREc7QUFITSxHQUFELENBQWpCO0FBYUQsQ0FmRDs7QUFpQk8sSUFBTTRELFFBQVEsR0FBRyxTQUFYQSxRQUFXLFNBQThCO0FBQUEsTUFBM0I5RSxZQUEyQixVQUEzQkEsWUFBMkI7QUFBQSxNQUFiQyxNQUFhLFVBQWJBLE1BQWE7QUFBQSxNQUM1Q2dCLEVBRDRDLEdBQ1ZoQixNQURVLENBQzVDZ0IsRUFENEM7QUFBQSxNQUN4QzBELEtBRHdDLEdBQ1YxRSxNQURVLENBQ3hDMEUsS0FEd0M7QUFBQSxNQUN0QnpELEtBRHNCLEdBQ1ZqQixNQURVLENBQ2pDRSxPQURpQyxDQUN0QmUsS0FEc0IsRUFFcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBSSxDQUFDb0QsZ0JBQUQsRUFBUUYsaUJBQVIsRUFBZ0JJLGlCQUFoQixFQUF3QjVELFFBQXhCLENBQWlDSyxFQUFqQyxDQUFKLEVBQTBDO0FBQ3hDLFdBQU95RCxjQUFjLENBQUM7QUFBRTFFLE1BQUFBLFlBQVksRUFBWkEsWUFBRjtBQUFnQkMsTUFBQUEsTUFBTSxFQUFOQTtBQUFoQixLQUFELENBQXJCO0FBQ0QsR0FGRCxNQUVPLElBQUksQ0FBQzBGLGdCQUFELEVBQVF0RSxvQkFBUixFQUFtQkMseUJBQW5CLEVBQW1DVixRQUFuQyxDQUE0Q0ssRUFBNUMsQ0FBSixFQUFxRDtBQUMxRCxRQUFJLFVBQUdDLEtBQUssQ0FBQyxDQUFELENBQVIsRUFBY04sUUFBZCxDQUF1QmdGLGdCQUF2QixDQUFKLEVBQW1DO0FBQ2pDLGFBQU81RSxjQUFjLENBQUM7QUFBRWhCLFFBQUFBLFlBQVksRUFBWkEsWUFBRjtBQUFnQkMsUUFBQUEsTUFBTSxFQUFOQTtBQUFoQixPQUFELENBQXJCO0FBQ0QsS0FGRCxNQUVPLElBQUksVUFBR2lCLEtBQUssQ0FBQyxDQUFELENBQVIsRUFBY04sUUFBZCxDQUF1QmlGLGlCQUF2QixDQUFKLEVBQW9DO0FBQ3pDLGFBQU9YLFlBQVksQ0FBQztBQUFFbEYsUUFBQUEsWUFBWSxFQUFaQSxZQUFGO0FBQWdCQyxRQUFBQSxNQUFNLEVBQU5BO0FBQWhCLE9BQUQsQ0FBbkI7QUFDRCxLQUZNLE1BRUEsSUFBSSxVQUFHaUIsS0FBSyxDQUFDLENBQUQsQ0FBUixFQUFjTixRQUFkLENBQXVCa0Ysa0JBQXZCLENBQUosRUFBcUM7QUFDMUMsYUFBT2hELGdCQUFnQixDQUFDO0FBQUU5QyxRQUFBQSxZQUFZLEVBQVpBLFlBQUY7QUFBZ0JDLFFBQUFBLE1BQU0sRUFBTkE7QUFBaEIsT0FBRCxDQUF2QjtBQUNELEtBRk0sTUFFQTtBQUNMLGFBQU9zQixhQUFhLENBQUM7QUFBRXZCLFFBQUFBLFlBQVksRUFBWkEsWUFBRjtBQUFnQkMsUUFBQUEsTUFBTSxFQUFOQTtBQUFoQixPQUFELENBQXBCO0FBQ0Q7QUFDRixHQVZNLE1BVUEsSUFBSSxDQUFDOEYsaUJBQUQsRUFBU25GLFFBQVQsQ0FBa0JLLEVBQWxCLENBQUosRUFBMkI7QUFDaEMsV0FBT3lELGNBQWMsQ0FBQztBQUNwQjFFLE1BQUFBLFlBQVksRUFBWkEsWUFEb0I7QUFFcEJDLE1BQUFBLE1BQU0sRUFBRTtBQUNOZ0IsUUFBQUEsRUFBRSxFQUFFbUQsaUJBREU7QUFFTk8sUUFBQUEsS0FBSyxFQUFFQSxLQUFLLElBQUksR0FGVjtBQUdOeEUsUUFBQUEsT0FBTyxFQUFFRixNQUFNLENBQUNFLE9BQVAsQ0FBZWUsS0FBZixDQUFxQlgsR0FBckIsQ0FBeUIsVUFBQXlGLENBQUM7QUFBQSxpQkFBSztBQUN0Qy9FLFlBQUFBLEVBQUUsRUFBRTBFLGdCQURrQztBQUV0Q3hGLFlBQUFBLE9BQU8sRUFBRTtBQUNQQyxjQUFBQSxLQUFLLEVBQUVILE1BQU0sQ0FBQ0UsT0FBUCxDQUFlQyxLQURmO0FBRVBjLGNBQUFBLEtBQUssRUFBRSxDQUFDOEUsQ0FBRDtBQUZBO0FBRjZCLFdBQUw7QUFBQSxTQUExQjtBQUhIO0FBRlksS0FBRCxDQUFyQjtBQWNELEdBZk0sTUFlQSxJQUFJLENBQUM3QyxnQkFBRCxFQUFRQyxpQkFBUixFQUFnQjZDLGdCQUFoQixFQUF1QlAsaUJBQXZCLEVBQStCOUUsUUFBL0IsQ0FBd0NLLEVBQXhDLENBQUosRUFBaUQ7QUFDdEQsV0FBT2dDLGNBQWMsQ0FBQztBQUFFakQsTUFBQUEsWUFBWSxFQUFaQSxZQUFGO0FBQWdCQyxNQUFBQSxNQUFNLEVBQU5BO0FBQWhCLEtBQUQsQ0FBckI7QUFDRCxHQUZNLE1BRUEsSUFBSSxDQUFDaUcscUJBQUQsRUFBYXRGLFFBQWIsQ0FBc0JLLEVBQXRCLENBQUosRUFBK0I7QUFDcEMsV0FBT3dFLGdCQUFnQixDQUFDO0FBQUV6RixNQUFBQSxZQUFZLEVBQVpBLFlBQUY7QUFBZ0JDLE1BQUFBLE1BQU0sRUFBTkE7QUFBaEIsS0FBRCxDQUF2QjtBQUNELEdBRk0sTUFFQSxJQUFJa0cseUJBQWNsRixFQUFsQixFQUFzQjtBQUMzQixXQUFPUyxjQUFjLENBQUM7QUFBRTFCLE1BQUFBLFlBQVksRUFBWkEsWUFBRjtBQUFnQkMsTUFBQUEsTUFBTSxFQUFOQTtBQUFoQixLQUFELENBQXJCO0FBQ0QsR0FGTSxNQUVBO0FBQ0wsVUFBTSxJQUFJbUcsS0FBSixDQUFVLFlBQVYsQ0FBTjtBQUNEO0FBQ0YsQ0ExQ007Ozs7QUE0Q1EsMEJBQWdEO0FBQUEsTUFBckNwRyxZQUFxQyxVQUFyQ0EsWUFBcUM7QUFBQSxNQUFkcUcsVUFBYyxVQUF2QkMsT0FBdUI7QUFDN0QsTUFBSS9ELE1BQU0sQ0FBQ2dFLElBQVAsQ0FBWUYsVUFBVSxJQUFJLEVBQTFCLEVBQThCckUsTUFBOUIsS0FBeUMsQ0FBN0MsRUFBZ0QsT0FBTyxFQUFQO0FBQ2hELFNBQU84QyxRQUFRLENBQUM7QUFDZDlFLElBQUFBLFlBQVksRUFBWkEsWUFEYztBQUVkQyxJQUFBQSxNQUFNLEVBQUUsa0NBQWlCb0csVUFBakI7QUFGTSxHQUFELENBQWY7QUFJRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge1xuICBFU19ORVNURUQsXG4gIEVTX1FVRVJZLFxuICBFU19CT09MLFxuICBCRVRXRUVOX09QLFxuICBHVF9PUCxcbiAgR1RFX09QLFxuICBMVF9PUCxcbiAgTFRFX09QLFxuICBJTl9PUCxcbiAgTk9UX0lOX09QLFxuICBTT01FX05PVF9JTl9PUCxcbiAgRVNfTVVTVCxcbiAgRVNfTVVTVF9OT1QsXG4gIEVTX01VTFRJX01BVENILFxuICBFU19GSUVMRFMsXG4gIEVTX1RZUEUsXG4gIEVTX1BIUkFTRV9QUkVGSVgsXG4gIEVTX0FSUkFOR0VSX1NFVF9JTkRFWCxcbiAgRVNfQVJSQU5HRVJfU0VUX1RZUEUsXG4gIE9SX09QLFxuICBBTkRfT1AsXG4gIEZJTFRFUl9PUCxcbiAgTk9UX09QLFxuICBSRUdFWCxcbiAgU0VUX0lELFxuICBNSVNTSU5HLFxuICBBTExfT1AsXG59IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgbm9ybWFsaXplRmlsdGVycyBmcm9tICcuL25vcm1hbGl6ZUZpbHRlcnMnO1xuaW1wb3J0IHtcbiAgaXNOZXN0ZWQsXG4gIHJlYWRQYXRoLFxuICB3cmFwTXVzdE5vdCxcbiAgd3JhcE5lc3RlZCxcbiAgbWVyZ2VQYXRoLFxuICB3cmFwU2hvdWxkLFxuICB3cmFwTXVzdCxcbiAgdG9Fc1JhbmdlVmFsdWUsXG59IGZyb20gJy4uL3V0aWxzL2VzRmlsdGVyJztcblxuY29uc3Qgd3JhcEZpbHRlciA9ICh7IGVzRmlsdGVyLCBuZXN0ZWRGaWVsZHMsIGZpbHRlciwgaXNOb3QgfSkgPT4ge1xuICByZXR1cm4gZmlsdGVyLmNvbnRlbnQuZmllbGRcbiAgICAuc3BsaXQoJy4nKVxuICAgIC5zbGljZSgwLCAtMSlcbiAgICAubWFwKChwLCBpLCBzZWdtZW50cykgPT4gc2VnbWVudHMuc2xpY2UoMCwgaSArIDEpLmpvaW4oJy4nKSlcbiAgICAuZmlsdGVyKHAgPT4gbmVzdGVkRmllbGRzLmluY2x1ZGVzKHApKVxuICAgIC5yZXZlcnNlKClcbiAgICAucmVkdWNlKFxuICAgICAgKGVzRmlsdGVyLCBwYXRoLCBpKSA9PiB3cmFwTmVzdGVkKGVzRmlsdGVyLCBwYXRoKSxcbiAgICAgIGlzTm90ID8gd3JhcE11c3ROb3QoZXNGaWx0ZXIpIDogZXNGaWx0ZXIsXG4gICAgKTtcbn07XG5cbmZ1bmN0aW9uIGdldFJlZ2V4RmlsdGVyKHsgbmVzdGVkRmllbGRzLCBmaWx0ZXIgfSkge1xuICBjb25zdCB7IG9wLCBjb250ZW50OiB7IGZpZWxkLCB2YWx1ZTogW3ZhbHVlXSB9IH0gPSBmaWx0ZXI7XG4gIGNvbnN0IGVzRmlsdGVyID0gd3JhcEZpbHRlcih7XG4gICAgZmlsdGVyLFxuICAgIG5lc3RlZEZpZWxkcyxcbiAgICBlc0ZpbHRlcjogeyByZWdleHA6IHsgW2ZpZWxkXTogdmFsdWUucmVwbGFjZSgnKicsICcuKicpIH0gfSxcbiAgICBpc05vdDogTk9UX0lOX09QID09PSBvcCxcbiAgfSk7XG5cbiAgcmV0dXJuIG9wID09PSBTT01FX05PVF9JTl9PUCA/IHdyYXBNdXN0Tm90KGVzRmlsdGVyKSA6IGVzRmlsdGVyO1xufVxuXG5mdW5jdGlvbiBnZXRUZXJtRmlsdGVyKHsgbmVzdGVkRmllbGRzLCBmaWx0ZXIgfSkge1xuICBjb25zdCB7IG9wLCBjb250ZW50OiB7IHZhbHVlLCBmaWVsZCB9IH0gPSBmaWx0ZXI7XG4gIGNvbnN0IGVzRmlsdGVyID0gd3JhcEZpbHRlcih7XG4gICAgZmlsdGVyLFxuICAgIG5lc3RlZEZpZWxkcyxcbiAgICBlc0ZpbHRlcjogeyB0ZXJtczogeyBbZmllbGRdOiB2YWx1ZS5tYXAoaXRlbSA9PiBpdGVtIHx8ICcnKSwgYm9vc3Q6IDAgfSB9LFxuICAgIGlzTm90OiBOT1RfSU5fT1AgPT09IG9wLFxuICB9KTtcblxuICByZXR1cm4gb3AgPT09IFNPTUVfTk9UX0lOX09QID8gd3JhcE11c3ROb3QoZXNGaWx0ZXIpIDogZXNGaWx0ZXI7XG59XG5cbmZ1bmN0aW9uIGdldEZ1enp5RmlsdGVyKHsgbmVzdGVkRmllbGRzLCBmaWx0ZXIgfSkge1xuICBjb25zdCB7IGNvbnRlbnQgfSA9IGZpbHRlcjtcbiAgY29uc3QgeyB2YWx1ZSwgZmllbGRzIH0gPSBjb250ZW50O1xuXG4gIC8vIGdyb3VwIHF1ZXJpZXMgYnkgdGhlaXIgbmVzdGluZyBsZXZlbFxuICBjb25zdCBzb3J0ZWROZXN0ZWQgPSBuZXN0ZWRGaWVsZHMuc2xpY2UoKS5zb3J0KChhLCBiKSA9PiBiLmxlbmd0aCAtIGEubGVuZ3RoKTtcbiAgY29uc3QgbmVzdGVkTWFwID0gZmllbGRzLnJlZHVjZSgoYWNjLCBmaWVsZCkgPT4ge1xuICAgIGNvbnN0IGdyb3VwID0gc29ydGVkTmVzdGVkLmZpbmQoeSA9PiBmaWVsZC5pbmNsdWRlcyh5KSkgfHwgJyc7XG4gICAgaWYgKGFjY1tncm91cF0pIHtcbiAgICAgIGFjY1tncm91cF0ucHVzaChmaWVsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1tncm91cF0gPSBbZmllbGRdO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgLy8gY29uc3RydWN0IG9uZSBtdWx0aSBtYXRjaCBwZXIgbmVzdGVkIGdyb3VwXG4gIHJldHVybiB3cmFwU2hvdWxkKFxuICAgIE9iamVjdC52YWx1ZXMobmVzdGVkTWFwKS5tYXAoZmllbGRzID0+XG4gICAgICB3cmFwRmlsdGVyKHtcbiAgICAgICAgZmlsdGVyOiB7IC4uLmZpbHRlciwgY29udGVudDogeyAuLi5jb250ZW50LCBmaWVsZDogZmllbGRzWzBdIH0gfSxcbiAgICAgICAgbmVzdGVkRmllbGRzLFxuICAgICAgICBlc0ZpbHRlcjoge1xuICAgICAgICAgIFtFU19NVUxUSV9NQVRDSF06IHtcbiAgICAgICAgICAgIFtFU19RVUVSWV06IHZhbHVlLFxuICAgICAgICAgICAgW0VTX0ZJRUxEU106IGZpZWxkcyxcbiAgICAgICAgICAgIFtFU19UWVBFXTogRVNfUEhSQVNFX1BSRUZJWCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgKSxcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0TWlzc2luZ0ZpbHRlcih7IG5lc3RlZEZpZWxkcywgZmlsdGVyIH0pIHtcbiAgY29uc3QgeyBjb250ZW50OiB7IGZpZWxkIH0gfSA9IGZpbHRlcjtcbiAgcmV0dXJuIHdyYXBGaWx0ZXIoe1xuICAgIGVzRmlsdGVyOiB7IGV4aXN0czogeyBmaWVsZDogZmllbGQsIGJvb3N0OiAwIH0gfSxcbiAgICBuZXN0ZWRGaWVsZHMsXG4gICAgZmlsdGVyLFxuICAgIGlzTm90OiB0cnVlLFxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0UmFuZ2VGaWx0ZXIoeyBuZXN0ZWRGaWVsZHMsIGZpbHRlciB9KSB7XG4gIGNvbnN0IHsgb3AsIGNvbnRlbnQ6IHsgZmllbGQsIHZhbHVlIH0gfSA9IGZpbHRlcjtcbiAgcmV0dXJuIHdyYXBGaWx0ZXIoe1xuICAgIGZpbHRlcixcbiAgICBuZXN0ZWRGaWVsZHMsXG4gICAgZXNGaWx0ZXI6IHtcbiAgICAgIHJhbmdlOiB7XG4gICAgICAgIFtmaWVsZF06IHtcbiAgICAgICAgICBib29zdDogMCxcbiAgICAgICAgICBbb3BdOiB0b0VzUmFuZ2VWYWx1ZShcbiAgICAgICAgICAgIFtHVF9PUCwgR1RFX09QXS5pbmNsdWRlcyhvcCkgPyBfLm1heCh2YWx1ZSkgOiBfLm1pbih2YWx1ZSksXG4gICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbGxhcHNlTmVzdGVkRmlsdGVycyh7IGVzRmlsdGVyLCBib29scyB9KSB7XG4gIGNvbnN0IGZpbHRlcklzTmVzdGVkID0gaXNOZXN0ZWQoZXNGaWx0ZXIpO1xuICBjb25zdCBiYXNlUGF0aCA9IFsuLi4oZmlsdGVySXNOZXN0ZWQgPyBbRVNfTkVTVEVELCBFU19RVUVSWV0gOiBbXSksIEVTX0JPT0xdO1xuICBjb25zdCBwYXRoID0gW0VTX01VU1QsIEVTX01VU1RfTk9UXVxuICAgIC5tYXAocCA9PiBbLi4uYmFzZVBhdGgsIHBdKVxuICAgIC5maW5kKHBhdGggPT4gXy5nZXQoZXNGaWx0ZXIsIHBhdGgpKTtcblxuICBjb25zdCBmb3VuZCA9XG4gICAgcGF0aCAmJlxuICAgIGJvb2xzLmZpbmQoXG4gICAgICBib29sID0+XG4gICAgICAgIGZpbHRlcklzTmVzdGVkXG4gICAgICAgICAgPyByZWFkUGF0aChib29sKSA9PT0gcmVhZFBhdGgoZXNGaWx0ZXIpXG4gICAgICAgICAgOiBfLmdldChib29sLCBwYXRoKSxcbiAgICApO1xuXG4gIHJldHVybiBbXG4gICAgLi4uYm9vbHMuZmlsdGVyKGJvb2wgPT4gYm9vbCAhPT0gZm91bmQpLFxuICAgIGZvdW5kXG4gICAgICA/IG1lcmdlUGF0aChcbiAgICAgICAgICBmb3VuZCxcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIGZpbHRlcklzTmVzdGVkXG4gICAgICAgICAgICA/IGNvbGxhcHNlTmVzdGVkRmlsdGVycyh7XG4gICAgICAgICAgICAgICAgZXNGaWx0ZXI6IF8uZ2V0KGVzRmlsdGVyLCBwYXRoKVswXSxcbiAgICAgICAgICAgICAgICBib29sczogXy5nZXQoZm91bmQsIHBhdGgsIFtdKSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogWy4uLl8uZ2V0KGZvdW5kLCBwYXRoKSwgLi4uXy5nZXQoZXNGaWx0ZXIsIHBhdGgpXSxcbiAgICAgICAgKVxuICAgICAgOiBlc0ZpbHRlcixcbiAgXTtcbn1cblxuY29uc3Qgd3JhcHBlcnMgPSB7XG4gIFtBTkRfT1BdOiB3cmFwTXVzdCxcbiAgW09SX09QXTogd3JhcFNob3VsZCxcbiAgW05PVF9PUF06IHdyYXBNdXN0Tm90LFxufTtcbmZ1bmN0aW9uIGdldEdyb3VwRmlsdGVyKHsgbmVzdGVkRmllbGRzLCBmaWx0ZXI6IHsgY29udGVudCwgb3AsIHBpdm90IH0gfSkge1xuICBjb25zdCBhcHBseUJvb2xlYW5XcmFwcGVyID0gd3JhcHBlcnNbb3BdO1xuICBjb25zdCBlc0ZpbHRlcnMgPSBjb250ZW50Lm1hcChmaWx0ZXIgPT4gb3BTd2l0Y2goeyBuZXN0ZWRGaWVsZHMsIGZpbHRlciB9KSk7XG4gIGNvbnN0IGlzTmVzdGVkID0gISFlc0ZpbHRlcnNbMF0/Lm5lc3RlZDtcbiAgaWYgKGlzTmVzdGVkICYmIHBpdm90ID09PSBlc0ZpbHRlcnNbMF0/Lm5lc3RlZC5wYXRoKSB7XG4gICAgY29uc3QgZmxhdHRuZWQgPSBlc0ZpbHRlcnMucmVkdWNlKFxuICAgICAgKGJvb2xzLCBlc0ZpbHRlcikgPT5cbiAgICAgICAgb3AgPT09IEFORF9PUCB8fCBvcCA9PT0gTk9UX09QXG4gICAgICAgICAgPyBjb2xsYXBzZU5lc3RlZEZpbHRlcnMoeyBlc0ZpbHRlciwgYm9vbHMgfSlcbiAgICAgICAgICA6IFsuLi5ib29scywgZXNGaWx0ZXJdLFxuICAgICAgW10sXG4gICAgKTtcbiAgICByZXR1cm4gYXBwbHlCb29sZWFuV3JhcHBlcihmbGF0dG5lZCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFwcGx5Qm9vbGVhbldyYXBwZXIoZXNGaWx0ZXJzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTZXRGaWx0ZXIoeyBuZXN0ZWRGaWVsZHMsIGZpbHRlciwgZmlsdGVyOiB7IGNvbnRlbnQsIG9wIH0gfSkge1xuICByZXR1cm4gd3JhcEZpbHRlcih7XG4gICAgaXNOb3Q6IG9wID09PSBOT1RfSU5fT1AsXG4gICAgZmlsdGVyLFxuICAgIG5lc3RlZEZpZWxkcyxcbiAgICBlc0ZpbHRlcjoge1xuICAgICAgdGVybXM6IHtcbiAgICAgICAgYm9vc3Q6IDAsXG4gICAgICAgIFtjb250ZW50LmZpZWxkXToge1xuICAgICAgICAgIGluZGV4OiBFU19BUlJBTkdFUl9TRVRfSU5ERVgsXG4gICAgICAgICAgdHlwZTogRVNfQVJSQU5HRVJfU0VUX1RZUEUsXG4gICAgICAgICAgaWQ6IF8uZmxhdE1hcChbY29udGVudC52YWx1ZV0pWzBdLnJlcGxhY2UoJ3NldF9pZDonLCAnJyksXG4gICAgICAgICAgcGF0aDogJ2lkcycsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufVxuXG5jb25zdCBnZXRCZXR3ZWVuRmlsdGVyID0gKHsgbmVzdGVkRmllbGRzLCBmaWx0ZXIgfSkgPT4ge1xuICBjb25zdCB7IGNvbnRlbnQ6IHsgZmllbGQsIHZhbHVlIH0gfSA9IGZpbHRlcjtcbiAgcmV0dXJuIHdyYXBGaWx0ZXIoe1xuICAgIGZpbHRlcixcbiAgICBuZXN0ZWRGaWVsZHMsXG4gICAgZXNGaWx0ZXI6IHtcbiAgICAgIHJhbmdlOiB7XG4gICAgICAgIFtmaWVsZF06IHtcbiAgICAgICAgICBib29zdDogMCxcbiAgICAgICAgICBbR1RFX09QXTogXy5taW4odmFsdWUpLFxuICAgICAgICAgIFtMVEVfT1BdOiBfLm1heCh2YWx1ZSksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IG9wU3dpdGNoID0gKHsgbmVzdGVkRmllbGRzLCBmaWx0ZXIgfSkgPT4ge1xuICBjb25zdCB7IG9wLCBwaXZvdCwgY29udGVudDogeyB2YWx1ZSB9IH0gPSBmaWx0ZXI7XG4gIC8vIHdlIG5lZWQgYSB3YXkgdG8gaGFuZGxlIG9iamVjdCBmaWVsZHMgYmVmb3JlIHRoZSBmb2xsb3dpbmcgZXJyb3IgaXMgdmFsaWRcbiAgLy8gaWYgKHBpdm90ICYmIHBpdm90ICE9PSAnLicgJiYgIW5lc3RlZEZpZWxkcy5pbmNsdWRlcyhwaXZvdCkpIHtcbiAgLy8gICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcGl2b3QgZmllbGQgXCIke3Bpdm90fVwiLCBub3QgYSBuZXN0ZWQgZmllbGRgKTtcbiAgLy8gfVxuICBpZiAoW09SX09QLCBBTkRfT1AsIE5PVF9PUF0uaW5jbHVkZXMob3ApKSB7XG4gICAgcmV0dXJuIGdldEdyb3VwRmlsdGVyKHsgbmVzdGVkRmllbGRzLCBmaWx0ZXIgfSk7XG4gIH0gZWxzZSBpZiAoW0lOX09QLCBOT1RfSU5fT1AsIFNPTUVfTk9UX0lOX09QXS5pbmNsdWRlcyhvcCkpIHtcbiAgICBpZiAoYCR7dmFsdWVbMF19YC5pbmNsdWRlcyhSRUdFWCkpIHtcbiAgICAgIHJldHVybiBnZXRSZWdleEZpbHRlcih7IG5lc3RlZEZpZWxkcywgZmlsdGVyIH0pO1xuICAgIH0gZWxzZSBpZiAoYCR7dmFsdWVbMF19YC5pbmNsdWRlcyhTRVRfSUQpKSB7XG4gICAgICByZXR1cm4gZ2V0U2V0RmlsdGVyKHsgbmVzdGVkRmllbGRzLCBmaWx0ZXIgfSk7XG4gICAgfSBlbHNlIGlmIChgJHt2YWx1ZVswXX1gLmluY2x1ZGVzKE1JU1NJTkcpKSB7XG4gICAgICByZXR1cm4gZ2V0TWlzc2luZ0ZpbHRlcih7IG5lc3RlZEZpZWxkcywgZmlsdGVyIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0VGVybUZpbHRlcih7IG5lc3RlZEZpZWxkcywgZmlsdGVyIH0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChbQUxMX09QXS5pbmNsdWRlcyhvcCkpIHtcbiAgICByZXR1cm4gZ2V0R3JvdXBGaWx0ZXIoe1xuICAgICAgbmVzdGVkRmllbGRzLFxuICAgICAgZmlsdGVyOiB7XG4gICAgICAgIG9wOiBBTkRfT1AsXG4gICAgICAgIHBpdm90OiBwaXZvdCB8fCAnLicsXG4gICAgICAgIGNvbnRlbnQ6IGZpbHRlci5jb250ZW50LnZhbHVlLm1hcCh2ID0+ICh7XG4gICAgICAgICAgb3A6IElOX09QLFxuICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgIGZpZWxkOiBmaWx0ZXIuY29udGVudC5maWVsZCxcbiAgICAgICAgICAgIHZhbHVlOiBbdl0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChbR1RfT1AsIEdURV9PUCwgTFRfT1AsIExURV9PUF0uaW5jbHVkZXMob3ApKSB7XG4gICAgcmV0dXJuIGdldFJhbmdlRmlsdGVyKHsgbmVzdGVkRmllbGRzLCBmaWx0ZXIgfSk7XG4gIH0gZWxzZSBpZiAoW0JFVFdFRU5fT1BdLmluY2x1ZGVzKG9wKSkge1xuICAgIHJldHVybiBnZXRCZXR3ZWVuRmlsdGVyKHsgbmVzdGVkRmllbGRzLCBmaWx0ZXIgfSk7XG4gIH0gZWxzZSBpZiAoRklMVEVSX09QID09PSBvcCkge1xuICAgIHJldHVybiBnZXRGdXp6eUZpbHRlcih7IG5lc3RlZEZpZWxkcywgZmlsdGVyIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBvcCcpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih7IG5lc3RlZEZpZWxkcywgZmlsdGVyczogcmF3RmlsdGVycyB9KSB7XG4gIGlmIChPYmplY3Qua2V5cyhyYXdGaWx0ZXJzIHx8IHt9KS5sZW5ndGggPT09IDApIHJldHVybiB7fTtcbiAgcmV0dXJuIG9wU3dpdGNoKHtcbiAgICBuZXN0ZWRGaWVsZHMsXG4gICAgZmlsdGVyOiBub3JtYWxpemVGaWx0ZXJzKHJhd0ZpbHRlcnMpLFxuICB9KTtcbn1cbiJdfQ==