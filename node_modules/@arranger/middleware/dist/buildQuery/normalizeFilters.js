"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = require("lodash");

var _constants = require("../constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

// _UNFLAT_KEY_ is a ephemeral mark for groupingOptimizer to not apply grouping
var _UNFLAT_KEY_ = '__unflat__';

function groupingOptimizer(_ref) {
  var op = _ref.op,
      content = _ref.content,
      pivot = _ref.pivot;
  return {
    op: op,
    pivot: pivot,
    content: content.map(normalizeFilters).reduce(function (filters, f) {
      var samePivot = f.pivot === pivot || !f.pivot;

      if (f.op === op && !f[_UNFLAT_KEY_] && samePivot) {
        return [].concat(_toConsumableArray(filters), _toConsumableArray(f.content));
      } else {
        return [].concat(_toConsumableArray(filters), [(0, _lodash.omit)(f, _UNFLAT_KEY_)]);
      }
    }, [])
  };
}

function isSpecialFilter(value) {
  return [_constants.REGEX, _constants.SET_ID, _constants.MISSING].some(function (x) {
    return "".concat(value).includes(x);
  });
}

var applyDefaultPivots = function applyDefaultPivots(filter) {
  var content = filter.content,
      _filter$pivot = filter.pivot,
      pivot = _filter$pivot === void 0 ? null : _filter$pivot;
  var value = content.value;

  if (value) {
    return _objectSpread({}, filter, {
      pivot: pivot
    });
  } else {
    return _objectSpread({}, filter, {
      pivot: pivot,
      content: filter.content.map(applyDefaultPivots)
    });
  }
};

function normalizeFilters(filter) {
  var op = filter.op,
      content = filter.content;

  if (!op) {
    throw Error("Must specify \"op\" in filters: ".concat(filter));
  } else if (!content) {
    throw Error("Must specify \"content\" in filters: ".concat(filter));
  }

  var value = content.value;

  if (_constants.OP_ALIASES[op]) {
    return normalizeFilters(_objectSpread({}, filter, {
      op: _constants.OP_ALIASES[op]
    }));
  } else if (_constants.ARRAY_CONTENT.includes(op) && !Array.isArray(value)) {
    return normalizeFilters(_objectSpread({}, filter, {
      content: _objectSpread({}, content, {
        value: [].concat(value)
      })
    }));
  } else if ([_constants.IN_OP, _constants.NOT_IN_OP].includes(op) && value.some(isSpecialFilter) && value.length > 1) {
    // Separate filters with special handling into separate filters and "or" them with the normal filter
    var specialFilters = value.filter(isSpecialFilter).map(function (specialValue) {
      return _objectSpread({}, filter, {
        content: _objectSpread({}, content, {
          value: [specialValue]
        })
      });
    });
    var normalValues = value.filter(function (psv) {
      return !isSpecialFilter(psv);
    });
    var filters = normalValues.length > 0 ? [_objectSpread({}, filter, {
      content: _objectSpread({}, content, {
        value: normalValues
      })
    })].concat(_toConsumableArray(specialFilters)) : specialFilters;
    return normalizeFilters({
      op: _constants.OR_OP,
      content: filters
    });
  } else if ([_constants.AND_OP, _constants.OR_OP, _constants.NOT_OP].includes(op)) {
    return groupingOptimizer(filter);
  } else {
    return filter;
  }
}

var _default = function _default(filter) {
  var output = filter ? applyDefaultPivots(normalizeFilters(filter)) : filter;
  return output;
};

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,