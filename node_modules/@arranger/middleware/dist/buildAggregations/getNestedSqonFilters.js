"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

var _normalizeFilters = _interopRequireDefault(require("../buildQuery/normalizeFilters"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var getNestedSqonFilters = function getNestedSqonFilters(_ref) {
  var _ref$sqon = _ref.sqon,
      sqon = _ref$sqon === void 0 ? null : _ref$sqon,
      nestedFields = _ref.nestedFields,
      _ref$accumulator = _ref.accumulator,
      accumulator = _ref$accumulator === void 0 ? {} : _ref$accumulator,
      _ref$parentPivot = _ref.parentPivot,
      parentPivot = _ref$parentPivot === void 0 ? '.' : _ref$parentPivot;
  var op = sqon.op;

  if ([_constants.AND_OP, _constants.OR_OP, _constants.NOT_OP].includes(op)) {
    var _sqon$content = sqon.content,
        content = _sqon$content === void 0 ? [] : _sqon$content,
        pivot = sqon.pivot; // console.log('sqon: ', JSON.stringify(sqon, null, 2));

    content.forEach(function (c) {
      return getNestedSqonFilters({
        sqon: c,
        nestedFields: nestedFields,
        accumulator: accumulator,
        parentPivot: pivot
      });
    });
  } else {
    var field = sqon.content.field;
    var splitted = field.split('.') || '';
    var parentPath = splitted.slice(0, splitted.length - 1).join('.');
    var isNested = nestedFields.includes(splitted.slice(0, splitted.length - 1).join('.'));

    if (splitted.length && isNested && parentPivot !== parentPath) {
      accumulator[parentPath] = [].concat(_toConsumableArray(accumulator[parentPath] || []), [sqon]);
    }
  }

  return accumulator;
};

var _default = function _default(_ref2) {
  var _ref2$sqon = _ref2.sqon,
      sqon = _ref2$sqon === void 0 ? null : _ref2$sqon,
      nestedFields = _ref2.nestedFields;
  var normalized = (0, _normalizeFilters["default"])(sqon); // console.log('normalized: ', JSON.stringify(normalized, null, 2));

  return sqon ? getNestedSqonFilters({
    sqon: normalized,
    nestedFields: nestedFields
  }) : {};
};

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZEFnZ3JlZ2F0aW9ucy9nZXROZXN0ZWRTcW9uRmlsdGVycy5qcyJdLCJuYW1lcyI6WyJnZXROZXN0ZWRTcW9uRmlsdGVycyIsInNxb24iLCJuZXN0ZWRGaWVsZHMiLCJhY2N1bXVsYXRvciIsInBhcmVudFBpdm90Iiwib3AiLCJBTkRfT1AiLCJPUl9PUCIsIk5PVF9PUCIsImluY2x1ZGVzIiwiY29udGVudCIsInBpdm90IiwiZm9yRWFjaCIsImMiLCJmaWVsZCIsInNwbGl0dGVkIiwic3BsaXQiLCJwYXJlbnRQYXRoIiwic2xpY2UiLCJsZW5ndGgiLCJqb2luIiwiaXNOZXN0ZWQiLCJub3JtYWxpemVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLG9CQUFvQixHQUFHLFNBQXZCQSxvQkFBdUIsT0FLdkI7QUFBQSx1QkFKSkMsSUFJSTtBQUFBLE1BSkpBLElBSUksMEJBSkcsSUFJSDtBQUFBLE1BSEpDLFlBR0ksUUFISkEsWUFHSTtBQUFBLDhCQUZKQyxXQUVJO0FBQUEsTUFGSkEsV0FFSSxpQ0FGVSxFQUVWO0FBQUEsOEJBREpDLFdBQ0k7QUFBQSxNQURKQSxXQUNJLGlDQURVLEdBQ1Y7QUFBQSxNQUNJQyxFQURKLEdBQ1dKLElBRFgsQ0FDSUksRUFESjs7QUFFSixNQUFJLENBQUNDLGlCQUFELEVBQVNDLGdCQUFULEVBQWdCQyxpQkFBaEIsRUFBd0JDLFFBQXhCLENBQWlDSixFQUFqQyxDQUFKLEVBQTBDO0FBQUEsd0JBQ1JKLElBRFEsQ0FDaENTLE9BRGdDO0FBQUEsUUFDaENBLE9BRGdDLDhCQUN0QixFQURzQjtBQUFBLFFBQ2xCQyxLQURrQixHQUNSVixJQURRLENBQ2xCVSxLQURrQixFQUV4Qzs7QUFDQUQsSUFBQUEsT0FBTyxDQUFDRSxPQUFSLENBQWdCLFVBQUFDLENBQUM7QUFBQSxhQUNmYixvQkFBb0IsQ0FBQztBQUNuQkMsUUFBQUEsSUFBSSxFQUFFWSxDQURhO0FBRW5CWCxRQUFBQSxZQUFZLEVBQVpBLFlBRm1CO0FBR25CQyxRQUFBQSxXQUFXLEVBQVhBLFdBSG1CO0FBSW5CQyxRQUFBQSxXQUFXLEVBQUVPO0FBSk0sT0FBRCxDQURMO0FBQUEsS0FBakI7QUFRRCxHQVhELE1BV087QUFBQSxRQUNjRyxLQURkLEdBQzBCYixJQUQxQixDQUNHUyxPQURILENBQ2NJLEtBRGQ7QUFFTCxRQUFNQyxRQUFRLEdBQUdELEtBQUssQ0FBQ0UsS0FBTixDQUFZLEdBQVosS0FBb0IsRUFBckM7QUFDQSxRQUFNQyxVQUFVLEdBQUdGLFFBQVEsQ0FBQ0csS0FBVCxDQUFlLENBQWYsRUFBa0JILFFBQVEsQ0FBQ0ksTUFBVCxHQUFrQixDQUFwQyxFQUF1Q0MsSUFBdkMsQ0FBNEMsR0FBNUMsQ0FBbkI7QUFDQSxRQUFNQyxRQUFRLEdBQUduQixZQUFZLENBQUNPLFFBQWIsQ0FDZk0sUUFBUSxDQUFDRyxLQUFULENBQWUsQ0FBZixFQUFrQkgsUUFBUSxDQUFDSSxNQUFULEdBQWtCLENBQXBDLEVBQXVDQyxJQUF2QyxDQUE0QyxHQUE1QyxDQURlLENBQWpCOztBQUdBLFFBQUlMLFFBQVEsQ0FBQ0ksTUFBVCxJQUFtQkUsUUFBbkIsSUFBK0JqQixXQUFXLEtBQUthLFVBQW5ELEVBQStEO0FBQzdEZCxNQUFBQSxXQUFXLENBQUNjLFVBQUQsQ0FBWCxnQ0FBK0JkLFdBQVcsQ0FBQ2MsVUFBRCxDQUFYLElBQTJCLEVBQTFELElBQStEaEIsSUFBL0Q7QUFDRDtBQUNGOztBQUNELFNBQU9FLFdBQVA7QUFDRCxDQTlCRDs7ZUFnQ2UseUJBQW1DO0FBQUEseUJBQWhDRixJQUFnQztBQUFBLE1BQWhDQSxJQUFnQywyQkFBekIsSUFBeUI7QUFBQSxNQUFuQkMsWUFBbUIsU0FBbkJBLFlBQW1CO0FBQ2hELE1BQU1vQixVQUFVLEdBQUcsa0NBQWlCckIsSUFBakIsQ0FBbkIsQ0FEZ0QsQ0FFaEQ7O0FBQ0EsU0FBT0EsSUFBSSxHQUNQRCxvQkFBb0IsQ0FBQztBQUNuQkMsSUFBQUEsSUFBSSxFQUFFcUIsVUFEYTtBQUVuQnBCLElBQUFBLFlBQVksRUFBWkE7QUFGbUIsR0FBRCxDQURiLEdBS1AsRUFMSjtBQU1ELEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBTkRfT1AsIE9SX09QLCBOT1RfT1AgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IG5vcm1hbGl6ZUZpbHRlcnMgZnJvbSAnLi4vYnVpbGRRdWVyeS9ub3JtYWxpemVGaWx0ZXJzJztcblxuY29uc3QgZ2V0TmVzdGVkU3FvbkZpbHRlcnMgPSAoe1xuICBzcW9uID0gbnVsbCxcbiAgbmVzdGVkRmllbGRzLFxuICBhY2N1bXVsYXRvciA9IHt9LFxuICBwYXJlbnRQaXZvdCA9ICcuJyxcbn0pID0+IHtcbiAgY29uc3QgeyBvcCB9ID0gc3FvbjtcbiAgaWYgKFtBTkRfT1AsIE9SX09QLCBOT1RfT1BdLmluY2x1ZGVzKG9wKSkge1xuICAgIGNvbnN0IHsgY29udGVudCA9IFtdLCBwaXZvdCB9ID0gc3FvbjtcbiAgICAvLyBjb25zb2xlLmxvZygnc3FvbjogJywgSlNPTi5zdHJpbmdpZnkoc3FvbiwgbnVsbCwgMikpO1xuICAgIGNvbnRlbnQuZm9yRWFjaChjID0+XG4gICAgICBnZXROZXN0ZWRTcW9uRmlsdGVycyh7XG4gICAgICAgIHNxb246IGMsXG4gICAgICAgIG5lc3RlZEZpZWxkcyxcbiAgICAgICAgYWNjdW11bGF0b3IsXG4gICAgICAgIHBhcmVudFBpdm90OiBwaXZvdCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgeyBjb250ZW50OiB7IGZpZWxkIH0gfSA9IHNxb247XG4gICAgY29uc3Qgc3BsaXR0ZWQgPSBmaWVsZC5zcGxpdCgnLicpIHx8ICcnO1xuICAgIGNvbnN0IHBhcmVudFBhdGggPSBzcGxpdHRlZC5zbGljZSgwLCBzcGxpdHRlZC5sZW5ndGggLSAxKS5qb2luKCcuJyk7XG4gICAgY29uc3QgaXNOZXN0ZWQgPSBuZXN0ZWRGaWVsZHMuaW5jbHVkZXMoXG4gICAgICBzcGxpdHRlZC5zbGljZSgwLCBzcGxpdHRlZC5sZW5ndGggLSAxKS5qb2luKCcuJyksXG4gICAgKTtcbiAgICBpZiAoc3BsaXR0ZWQubGVuZ3RoICYmIGlzTmVzdGVkICYmIHBhcmVudFBpdm90ICE9PSBwYXJlbnRQYXRoKSB7XG4gICAgICBhY2N1bXVsYXRvcltwYXJlbnRQYXRoXSA9IFsuLi4oYWNjdW11bGF0b3JbcGFyZW50UGF0aF0gfHwgW10pLCBzcW9uXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKHsgc3FvbiA9IG51bGwsIG5lc3RlZEZpZWxkcyB9KSA9PiB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVGaWx0ZXJzKHNxb24pO1xuICAvLyBjb25zb2xlLmxvZygnbm9ybWFsaXplZDogJywgSlNPTi5zdHJpbmdpZnkobm9ybWFsaXplZCwgbnVsbCwgMikpO1xuICByZXR1cm4gc3FvblxuICAgID8gZ2V0TmVzdGVkU3FvbkZpbHRlcnMoe1xuICAgICAgICBzcW9uOiBub3JtYWxpemVkLFxuICAgICAgICBuZXN0ZWRGaWVsZHMsXG4gICAgICB9KVxuICAgIDoge307XG59O1xuIl19