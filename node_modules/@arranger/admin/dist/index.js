"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const graphql_tools_1 = require("graphql-tools");
const apollo_server_express_1 = require("apollo-server-express");
const printer_1 = require("graphql/language/printer");
const elasticsearch_1 = require("./services/elasticsearch");
const ProjectSchema_1 = require("./schemas/ProjectSchema");
const IndexSchema_1 = require("./schemas/IndexSchema");
const AggsState_1 = require("./schemas/AggsState");
const MatchboxState_1 = require("./schemas/MatchboxState");
const ColumnsState_1 = require("./schemas/ColumnsState");
const ExtendedMapping_1 = require("./schemas/ExtendedMapping");
const schemaTypeDefs_1 = require("./schemaTypeDefs");
const resolvers_1 = require("./resolvers");
const constants_1 = require("./services/constants");
const createSchema = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const typeDefs = schemaTypeDefs_1.default;
    const projectSchema = yield ProjectSchema_1.createSchema();
    const aggsStateSchema = yield AggsState_1.createSchema();
    const collumnsStateSchema = yield ColumnsState_1.createSchema();
    const extendedMappingShema = yield ExtendedMapping_1.createSchema();
    const matchBoxStateSchema = yield MatchboxState_1.createSchema();
    const indexSchema = yield IndexSchema_1.createSchema();
    const mergedSchema = graphql_tools_1.mergeSchemas({
        schemas: [
            projectSchema,
            indexSchema,
            aggsStateSchema,
            collumnsStateSchema,
            extendedMappingShema,
            matchBoxStateSchema,
            printer_1.print(typeDefs),
        ],
        resolvers: {
            Project: {
                index: resolvers_1.createIndexByProjectResolver(indexSchema),
                indices: resolvers_1.createIndicesByProjectResolver(indexSchema),
            },
            Index: {
                extended: resolvers_1.createExtendedMappingsByIndexResolver(extendedMappingShema),
                columnsState: resolvers_1.createColumnsStateByIndexResolver(collumnsStateSchema),
                aggsState: resolvers_1.createAggsStateByIndexResolver(aggsStateSchema),
                matchBoxState: resolvers_1.createMatchBoxStateByIndexResolver(matchBoxStateSchema),
            },
        },
    });
    graphql_tools_1.addMockFunctionsToSchema({ schema: mergedSchema, preserveResolvers: true });
    return mergedSchema;
});
const initialize = (config) => new Promise((resolve, reject) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const esClient = elasticsearch_1.createClient(config.esHost);
    try {
        const exists = yield esClient.indices.exists({
            index: constants_1.constants.ARRANGER_PROJECT_INDEX,
        });
        if (!exists) {
            esClient.indices.create({
                index: constants_1.constants.ARRANGER_PROJECT_INDEX,
            });
        }
        resolve(esClient);
    }
    catch (err) {
        setTimeout(() => {
            initialize(config).then(() => resolve(esClient));
        }, 1000);
    }
}));
exports.default = (config) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const esClient = yield initialize(config);
    return new apollo_server_express_1.ApolloServer({
        schema: yield createSchema(),
        context: () => ({
            es: esClient,
        }),
    });
});
//# sourceMappingURL=index.js.map