"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./schemas/IndexSchema/utils");
exports.createIndexByProjectResolver = (rootSchema) => ({
    fragment: `... on Project { id }`,
    resolve: ({ id: projectId }, { graphqlField }, context, info) => {
        return info.mergeInfo.delegateToSchema({
            schema: rootSchema,
            operation: 'query',
            fieldName: 'index',
            args: { projectId, graphqlField },
            context,
            info,
        });
    },
});
exports.createIndicesByProjectResolver = (rootSchema) => ({
    fragment: `... on Project { id }`,
    resolve: ({ id: projectId }, args, { es }, info) => {
        return utils_1.getProjectMetadata(es)(projectId);
    },
});
exports.createExtendedMappingsByIndexResolver = (rootSchema) => ({
    fragment: `... on Index { projectId graphqlField }`,
    resolve: ({ projectId, graphqlField }, { field }, context, info) => {
        return info.mergeInfo.delegateToSchema({
            schema: rootSchema,
            operation: 'query',
            fieldName: 'extendedFieldMappings',
            args: { projectId, graphqlField, field },
            context,
            info,
        });
    },
});
exports.createColumnsStateByIndexResolver = (collumnsStateSchema) => ({
    fragment: `... on Index { projectId graphqlField }`,
    resolve: ({ projectId, graphqlField }, {}, context, info) => {
        return info.mergeInfo.delegateToSchema({
            schema: collumnsStateSchema,
            operation: 'query',
            fieldName: 'columnsState',
            args: { projectId, graphqlField },
            context,
            info,
        });
    },
});
exports.createAggsStateByIndexResolver = (aggsStateSchema) => ({
    fragment: `... on Index { projectId graphqlField }`,
    resolve: ({ projectId, graphqlField }, {}, context, info) => {
        return info.mergeInfo.delegateToSchema({
            schema: aggsStateSchema,
            operation: 'query',
            fieldName: 'aggsState',
            args: { projectId, graphqlField },
            context,
            info,
        });
    },
});
exports.createMatchBoxStateByIndexResolver = (matchBoxSchema) => ({
    fragment: `... on Index { projectId graphqlField }`,
    resolve: ({ projectId, graphqlField }, {}, context, info) => {
        return info.mergeInfo.delegateToSchema({
            schema: matchBoxSchema,
            operation: 'query',
            fieldName: 'matchBoxState',
            args: { projectId, graphqlField },
            context,
            info,
        });
    },
});
//# sourceMappingURL=resolvers.js.map