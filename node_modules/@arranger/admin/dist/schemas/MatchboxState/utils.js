"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const mapping_utils_1 = require("@arranger/mapping-utils");
const utils_1 = require("../IndexSchema/utils");
const services_1 = require("../../services");
exports.createMatchboxState = ({ extendedFields, graphqlField, }) => {
    const fields = mapping_utils_1.mappingToMatchBoxState({
        extendedFields,
        name: graphqlField,
    });
    return { state: fields, timestamp: services_1.timestamp() };
};
exports.getMatchBoxState = (es) => ({ graphqlField, projectId, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const currentMetadata = (yield utils_1.getProjectStorageMetadata(es)(projectId)).find(i => i.name === graphqlField);
    return currentMetadata.config['matchbox-state'];
});
exports.saveMatchBoxState = (es) => ({ graphqlField, projectId, state: updatedMatchboxFields, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const currentMetadata = (yield utils_1.getProjectStorageMetadata(es)(projectId)).find(i => i.name === graphqlField);
    const currentMatchboxFields = currentMetadata.config['matchbox-state'].state;
    const newMatchboxState = {
        timestamp: services_1.timestamp(),
        state: services_1.replaceBy(currentMatchboxFields, updatedMatchboxFields, ({ field: field1 }, { field: field2 }) => field1 === field2),
    };
    yield utils_1.updateProjectIndexMetadata(es)({
        projectId,
        metaData: {
            index: currentMetadata.index,
            name: currentMetadata.name,
            config: {
                'matchbox-state': newMatchboxState,
            },
        },
    });
    return newMatchboxState;
});
//# sourceMappingURL=utils.js.map