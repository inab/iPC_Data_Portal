"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const constants_1 = require("../../services/constants");
const services_1 = require("../../services");
const utils_1 = require("../IndexSchema/utils");
const { ARRANGER_PROJECT_INDEX } = constants_1.constants;
exports.newArrangerProject = (id) => ({
    id: services_1.serializeToEsId(id),
    active: true,
    timestamp: new Date().toISOString(),
});
exports.getArrangerProjects = (es) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { body: { hits: { hits }, }, } = yield es
        .search({
        index: ARRANGER_PROJECT_INDEX,
    })
        .catch(() => ({
        body: {
            hits: {
                hits: [],
            },
        },
    }));
    return hits.map(({ _source }) => _source);
});
exports.addArrangerProject = (es) => (id) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const _id = services_1.serializeToEsId(id);
    const newProject = exports.newArrangerProject(_id);
    yield Promise.all([
        yield es.indices.create({ index: utils_1.getProjectMetadataEsLocation(id).index }),
        yield es
            .create({
            index: ARRANGER_PROJECT_INDEX,
            id: _id,
            body: newProject,
            refresh: 'true',
        })
            .then(() => newProject)
            .catch(Promise.reject),
    ]);
    return exports.getArrangerProjects(es);
});
exports.removeArrangerProject = (es) => (id) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const existingProject = (yield exports.getArrangerProjects(es)).find(({ id: _id }) => id === _id);
    if (existingProject) {
        yield Promise.all([
            es.indices.delete({
                index: utils_1.getProjectMetadataEsLocation(id).index,
            }),
            es.delete({
                index: ARRANGER_PROJECT_INDEX,
                id: id,
                refresh: 'true',
            }),
        ]);
        return exports.getArrangerProjects(es);
    }
    else {
        return Promise.reject(`No project with id ${id} was found`);
    }
});
//# sourceMappingURL=utils.js.map