"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const mapping_utils_1 = require("@arranger/mapping-utils");
const ramda_1 = require("ramda");
const services_1 = require("../../services");
const utils_1 = require("../IndexSchema/utils");
const elasticsearch_1 = require("../../services/elasticsearch");
exports.createAggsSetState = (es) => ({ esIndex, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const rawEsmapping = yield elasticsearch_1.getEsMapping(es)({ esIndex });
    const mapping = rawEsmapping[Object.keys(rawEsmapping)[0]].mappings.properties;
    const aggsState = mapping_utils_1.mappingToAggsState(mapping);
    return { timestamp: services_1.timestamp(), state: aggsState };
});
exports.getAggsSetState = (es) => (args) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { projectId, graphqlField } = args;
    const metaData = (yield utils_1.getProjectStorageMetadata(es)(projectId)).find(entry => entry.name === graphqlField);
    return metaData.config['aggs-state'];
});
exports.saveAggsSetState = (es) => (args) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { graphqlField, projectId, state } = args;
    const currentMetadata = (yield utils_1.getProjectStorageMetadata(es)(projectId)).find(i => i.name === graphqlField);
    const currentAggsState = currentMetadata.config['aggs-state'];
    const sortByNewOrder = ramda_1.sortBy((i) => state.findIndex(_i => _i.field === i.field));
    const newAggsSetState = {
        timestamp: services_1.timestamp(),
        state: sortByNewOrder(currentAggsState.state.map(item => (Object.assign(Object.assign({}, (state.find(_item => _item.field === item.field) || item)), { type: item.type })))),
    };
    yield utils_1.updateProjectIndexMetadata(es)({
        projectId,
        metaData: {
            index: currentMetadata.index,
            name: currentMetadata.name,
            config: {
                'aggs-state': newAggsSetState,
            },
        },
    });
    return newAggsSetState;
});
//# sourceMappingURL=utils.js.map