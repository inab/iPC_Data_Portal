"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utils_1 = require("../IndexSchema/utils");
const mapping_utils_1 = require("@arranger/mapping-utils");
const services_1 = require("../../services");
const elasticsearch_1 = require("../../services/elasticsearch");
const ramda_1 = require("ramda");
exports.getColumnSetState = (es) => (args) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { graphqlField, projectId } = args;
    const metaData = (yield utils_1.getProjectStorageMetadata(es)(projectId)).find(i => i.name === graphqlField);
    return metaData.config['columns-state'];
});
exports.createColumnSetState = (es) => ({ esIndex }, graphqlField) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const rawEsmapping = yield elasticsearch_1.getEsMapping(es)({
        esIndex,
    });
    const mapping = rawEsmapping[Object.keys(rawEsmapping)[0]].mappings;
    const columns = mapping_utils_1.mappingToColumnsState(mapping.properties);
    return {
        state: {
            type: graphqlField,
            keyField: 'id',
            defaultSorted: [
                { id: columns[0].id || columns[0].accessor, desc: false },
            ],
            columns,
        },
        timestamp: services_1.timestamp(),
    };
});
exports.saveColumnState = (es) => ({ graphqlField, projectId, state, }) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const currentProjectMetadata = yield utils_1.getProjectStorageMetadata(es)(projectId);
    const currentIndexMetadata = currentProjectMetadata.find(i => i.name === graphqlField);
    const sortByNewOrder = ramda_1.sortBy((i) => state.columns.findIndex(c => c.field === i.field));
    const mergedState = Object.assign(Object.assign({}, state), { columns: sortByNewOrder(services_1.replaceBy(currentIndexMetadata.config['columns-state'].state.columns, state.columns, (oldCol, newCol) => oldCol.field === newCol.field)) });
    yield utils_1.updateProjectIndexMetadata(es)({
        projectId,
        metaData: {
            index: currentIndexMetadata.index,
            name: currentIndexMetadata.name,
            config: {
                'columns-state': {
                    timestamp: services_1.timestamp(),
                    state: mergedState,
                },
            },
        },
    });
    return exports.getColumnSetState(es)({ projectId, graphqlField });
});
//# sourceMappingURL=utils.js.map