import React, { Children, cloneElement } from 'react';
import { createStyledComponent } from '../styles';
import Flex from '../Flex';

var Root = createStyledComponent(Flex, { display: 'flex' }, {
  displayName: 'Grid',
  filterProps: ['direction', 'inline', 'justifyContent'],
  withProps: { wrap: true }
});

var getGridItems = function getGridItems(_ref) {
  var breakpoints = _ref.breakpoints,
      children = _ref.children,
      columns = _ref.columns,
      gutterWidth = _ref.gutterWidth;
  return Children.map(children, function (child) {
    return cloneElement(child, { breakpoints: breakpoints, columns: columns, gutterWidth: gutterWidth });
  });
};

/**
 * Grid component is used together with [GridItem](/components/grid-item) to lay
 * out other components in a columnar, and optionally responsive, manner.
 */
var Grid = function Grid(props) {
  return React.createElement(
    Root,
    props,
    getGridItems(props)
  );
};

Grid.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Align grid items vertically
   * [[Responsive-capable]](/components/flex#responsive)
   */
  alignItems: PropTypes.oneOfType([PropTypes.oneOf(['start']), PropTypes.oneOf(['end']), PropTypes.oneOf(['center']), PropTypes.oneOf(['stretch']), PropTypes.arrayOf(PropTypes.oneOf(['start', 'end', 'center', 'stretch']))]),

  /**
   * Media query (min-width) breakpoints along which to apply props marked
   * "&#xfeff;[[Responsive-capable]](/components/flex#responsive)&#xfeff;"
   */
  breakpoints: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired),

  /** Must be [GridItem(s)](./grid-item). */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },

  /** Number of columns (see [GridItem's `span`](/components/grid-item#span)) */
  columns: PropTypes.number,

  /** Size of horizontal gap between grid items */
  gutterWidth: PropTypes.oneOfType([PropTypes.oneOf(['xxs']), PropTypes.oneOf(['xs']), PropTypes.oneOf(['sm']), PropTypes.oneOf(['md']), PropTypes.oneOf(['lg']), PropTypes.oneOf(['xl']), PropTypes.oneOf(['xxl']), PropTypes.number, PropTypes.string])
} : {};
Grid.defaultProps = {
  alignItems: 'stretch', // Same as Flex
  columns: 12,
  gutterWidth: 'md' // Same as Flex
};

export default Grid;
import PropTypes from 'prop-types';