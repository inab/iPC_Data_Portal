var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React, { Children } from 'react';
import Flex, { FlexItem } from '../Flex';

/**
 * StartEnd provides a simple way to align components to the start and end of a
 * container.
 */
export default function StartEnd(props) {
  var children = props.children,
      ignoreJustifyContent = props.justifyContent,
      priority = props.priority,
      ignoreWrap = props.wrap,
      restProps = _objectWithoutProperties(props, ['children', 'justifyContent', 'priority', 'wrap']);

  var rootProps = _extends({
    justifyContent: 'between'
  }, restProps);
  var flexItems = void 0;
  if (Children.count(children) === 2) {
    var growFactors = {
      start: [1, 0],
      end: [0, 1],
      both: [1, 1],
      none: [undefined, undefined]
    };
    flexItems = Children.map(children, function (child, index) {
      return index ? _jsx(FlexItem, {
        grow: growFactors[priority || 'none'][1]
      }, void 0, child) : _jsx(FlexItem, {
        grow: growFactors[priority || 'none'][0]
      }, void 0, child);
    });
  } else {
    throw new Error('StartEnd must have exactly two children.');
  }

  // $FlowFixMe - `direction` can't have the '-reverse' options from Flex
  return React.createElement(
    Flex,
    rootProps,
    flexItems
  );
}
StartEnd.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Media query (min-width) breakpoints along which to apply props marked
   * "&#xfeff;[[Responsive-capable]](#responsive)&#xfeff;"
   */
  breakpoints: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired),

  /** Must be exactly two nodes */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },

  /**
   * Direction of flow of items along the main axis
   * [[Responsive-capable]](#responsive)
   */
  direction: PropTypes.oneOfType([PropTypes.oneOf(['column']), PropTypes.oneOf(['row']), PropTypes.arrayOf(PropTypes.oneOf(['column', 'row']))]),

  /** @Private From Flex; filtered out */
  justifyContent: PropTypes.any,

  /** Determines which side stretches to fill the available width */
  priority: PropTypes.oneOf(['start', 'end', 'both']),

  /** @Private From Flex; filtered out */
  wrap: PropTypes.any
} : {};
import PropTypes from 'prop-types';