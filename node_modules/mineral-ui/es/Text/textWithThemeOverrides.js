var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { ThemeProvider } from '../themes';

var textWithThemeOverrides = function textWithThemeOverrides(_ref) {
  var appearance = _ref.appearance,
      children = _ref.children,
      textComponent = _ref.textComponent,
      _ref$element = _ref.element,
      element = _ref$element === undefined ? 'h4' : _ref$element,
      displayName = _ref.displayName,
      theme = _ref.theme;

  var Text = textComponent;
  var textProps = {
    appearance: appearance,
    element: element,
    noMargins: true
  };

  var content = React.createElement(
    Text,
    textProps,
    children
  );

  if (theme[displayName + '_color'] !== undefined || theme[displayName + '_fontSize'] !== undefined || theme[displayName + '_fontWeight'] !== undefined) {
    var appliedAppearance = appearance || element;
    // prettier-ignore
    var getOverride = function getOverride(variable) {
      return theme[displayName + '_' + variable] !== undefined ? _defineProperty({}, 'Text_' + variable + '_' + appliedAppearance, theme[displayName + '_' + variable]) : undefined;
    };
    var textTheme = _extends({}, getOverride('color'), getOverride('fontSize'), getOverride('fontWeight'));

    content = _jsx(ThemeProvider, {
      theme: textTheme
    }, void 0, content);
  }

  return content;
};

textWithThemeOverrides.propTypes = process.env.NODE_ENV !== "production" ? {
  appearance: PropTypes.string,
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },
  displayName: PropTypes.string.isRequired,
  element: PropTypes.string,
  textComponent: function textComponent() {
    return (typeof React$ComponentType === 'function' ? PropTypes.instanceOf(React$ComponentType).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },
  theme: PropTypes.object.isRequired
} : {};
export default textWithThemeOverrides;
import PropTypes from 'prop-types';