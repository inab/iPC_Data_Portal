var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { createStyledComponent } from '../styles';
import { rtlTextAlign } from '../utils';
import ElementContext from './ElementContext';
import TextProvider from './TextProvider';

var bpfrpt_proptype_Props = {
  /** Available horizontal alignments */
  align: PropTypes.oneOf(['start', 'end', 'center', 'justify']),

  /** Available styles */
  appearance: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'mouse', 'p', 'prose']),

  /** Rendered content */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },

  /** Color of text */
  color: PropTypes.string,

  /** The rendered HTML element, e.g. `'span'`, `'strong'` */
  element: PropTypes.string,

  /** Available font weights */
  fontWeight: PropTypes.oneOfType([PropTypes.oneOf(['regular']), PropTypes.oneOf(['semiBold']), PropTypes.oneOf(['bold']), PropTypes.oneOf(['extraBold']), PropTypes.number]),

  /** Inherit all styles from parent */
  inherit: PropTypes.bool,

  /** Remove top & bottom margins */
  noMargins: PropTypes.bool,

  /** @Private See use of context */
  parentElement: PropTypes.string,

  /** Force display to one line and truncate with ellipsis at given max-width */
  truncate: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string])
};


export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    Text_color: baseTheme.color,
    Text_color_h1: baseTheme.h1_color,
    Text_color_h2: baseTheme.h2_color,
    Text_color_h3: baseTheme.h3_color,
    Text_color_h4: baseTheme.h4_color,
    Text_color_h5: baseTheme.h5_color,
    Text_color_h6: baseTheme.h6_color,
    Text_color_mouse: baseTheme.color_mouse,
    Text_fontSize: baseTheme.fontSize_ui,
    Text_fontSize_h1: baseTheme.h1_fontSize,
    Text_fontSize_h2: baseTheme.h2_fontSize,
    Text_fontSize_h3: baseTheme.h3_fontSize,
    Text_fontSize_h4: baseTheme.h4_fontSize,
    Text_fontSize_h5: baseTheme.h5_fontSize,
    Text_fontSize_h6: baseTheme.h6_fontSize,
    Text_fontSize_mouse: baseTheme.fontSize_mouse,
    Text_fontSize_prose: baseTheme.fontSize_prose,
    Text_fontWeight_h1: baseTheme.h1_fontWeight,
    Text_fontWeight_h2: baseTheme.h2_fontWeight,
    Text_fontWeight_h3: baseTheme.h3_fontWeight,
    Text_fontWeight_h4: baseTheme.h4_fontWeight,
    Text_fontWeight_h5: baseTheme.h5_fontWeight,
    Text_fontWeight_h6: baseTheme.h6_fontWeight,
    Text_lineHeight: baseTheme.lineHeight_prose,
    Text_lineHeight_heading: baseTheme.lineHeight_heading,
    Text_lineHeight_headingSmall: baseTheme.lineHeight_headingSmall,
    Text_marginBottom: baseTheme.space_stack_md,
    Text_marginBottom_heading: baseTheme.space_stack_sm

  }, baseTheme);
};

var headingElements = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
var monospaceElements = ['code', 'kbd', 'pre', 'samp'];

var commonStyles = function commonStyles(element, theme, truncate) {
  var styles = {
    marginBottom: 0,
    marginTop: 0
  };

  if (truncate) {
    styles = _extends({}, styles, {
      // These styles from polished's ellipsis, which we cannot use here
      // because the dynamic width means the output can't be extracted at
      // build time.
      maxWidth: truncate === true ? '100%' : truncate,
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      wordWrap: 'normal'
    });
  }

  if (monospaceElements.indexOf(element) !== -1) {
    styles.fontFamily = theme.fontFamily_monospace;
  }

  return styles;
};

var styles = {
  inherit: function inherit(_ref) {
    var element = _ref.element,
        baseTheme = _ref.theme,
        truncate = _ref.truncate;

    var theme = componentTheme(baseTheme);

    return commonStyles(element, theme, truncate);
  },
  noInherit: function noInherit(_ref2) {
    var align = _ref2.align,
        propAppearance = _ref2.appearance,
        color = _ref2.color,
        element = _ref2.element,
        fontWeight = _ref2.fontWeight,
        noMargins = _ref2.noMargins,
        baseTheme = _ref2.theme,
        truncate = _ref2.truncate;

    var theme = componentTheme(baseTheme);
    var isHeadingElement = headingElements.indexOf(element) !== -1;
    var appearance = propAppearance !== Text.defaultProps.appearance ? propAppearance : isHeadingElement ? element : undefined;
    var headingAppearance = headingElements.indexOf(appearance) !== -1 && appearance;

    if (headingAppearance) {
      theme = _extends({}, theme, {
        Text_color: theme['Text_color_' + headingAppearance],
        Text_fontSize: theme['Text_fontSize_' + headingAppearance],
        Text_fontWeight: theme['Text_fontWeight_' + headingAppearance],
        Text_lineHeight: ['h5', 'h6'].indexOf(headingAppearance) !== -1 ? theme.Text_lineHeight_headingSmall : theme.Text_lineHeight_heading,
        Text_marginBottom: theme.Text_marginBottom_heading
      });
    } else if (appearance === 'mouse') {
      theme = _extends({}, theme, {
        Text_color: theme.Text_color_mouse,
        Text_fontSize: theme.Text_fontSize_mouse
      });
    } else if (appearance === 'prose') {
      theme = _extends({}, theme, {
        Text_fontSize: theme.Text_fontSize_prose
      });
    }

    var styles = _extends({
      color: color || theme.Text_color,
      fontSize: parseFloat(theme.Text_fontSize) * parseInt(theme.fontSize_base) + 'px',
      fontWeight: function () {
        if (fontWeight && theme['fontWeight_' + fontWeight]) {
          return theme['fontWeight_' + fontWeight];
        } else if (headingAppearance && theme.Text_fontWeight) {
          return theme.Text_fontWeight;
        } else if (isHeadingElement) {
          return fontWeight || theme.fontWeight_regular;
        } else {
          return fontWeight;
        }
      }(),
      lineHeight: theme.Text_lineHeight,
      textAlign: rtlTextAlign(align, theme.direction)
    }, commonStyles(element, theme, truncate), {
      // 1 - Not normalized because we actually want `##em` as applied value
      // 2 - Must come after commonStyles
      marginBottom: noMargins ? 0 : theme.Text_marginBottom
    });

    return styles;
  }
};

export var createRootNode = function createRootNode(props) {
  var parentElement = props.parentElement,
      _props$element = props.element,
      element = _props$element === undefined ? Text.defaultProps.element : _props$element,
      inherit = props.inherit;

  element = parentElement === 'p' && element === Text.defaultProps.element ? 'span' : element;

  return createStyledComponent(element, inherit ? styles.inherit : styles.noInherit, {
    rootEl: element,
    includeStyleReset: !inherit
  });
};

/**
 * The Text component provides styles and semantic meaning for text and headings
 * in a manner consistent with other components.
 */

var Text = function (_Component) {
  _inherits(Text, _Component);

  function Text() {
    _classCallCheck(this, Text);

    return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
  }

  _createClass(Text, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          inherit = _props.inherit,
          restProps = _objectWithoutProperties(_props, ['inherit']);

      return _jsx(ElementContext.Consumer, {}, void 0, function (parentElement) {
        var rootProps = _extends({
          inherit: inherit === false || !parentElement ? inherit : true,
          parentElement: parentElement
        }, restProps);
        return React.createElement(TextProvider, rootProps);
      });
    }
  }]);

  return Text;
}(Component);

Text.defaultProps = {
  appearance: 'p',
  element: 'p'
};
export default Text;
Text.propTypes = process.env.NODE_ENV !== "production" ? {
  align: PropTypes.oneOf(['start', 'end', 'center', 'justify']),
  appearance: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'mouse', 'p', 'prose']),
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },
  color: PropTypes.string,
  element: PropTypes.string,
  fontWeight: PropTypes.oneOfType([PropTypes.oneOf(['regular']), PropTypes.oneOf(['semiBold']), PropTypes.oneOf(['bold']), PropTypes.oneOf(['extraBold']), PropTypes.number]),
  inherit: PropTypes.bool,
  noMargins: PropTypes.bool,
  parentElement: PropTypes.string,
  truncate: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string])
} : {};
import PropTypes from 'prop-types';