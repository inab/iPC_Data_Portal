var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'react';
import { canUseDOM, canUseEventListeners } from 'exenv';

/** Declarative event listener component */
var EventListener = function (_Component) {
  _inherits(EventListener, _Component);

  function EventListener() {
    _classCallCheck(this, EventListener);

    return _possibleConstructorReturn(this, (EventListener.__proto__ || Object.getPrototypeOf(EventListener)).apply(this, arguments));
  }

  _createClass(EventListener, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.addEventListeners();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      this.removeEventListeners(prevProps.listeners);
      this.addEventListeners();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.removeEventListeners();
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }, {
    key: 'getTargetNode',
    value: function getTargetNode(target) {
      if (canUseDOM) {
        return global[target] || global.document.querySelector(target);
      }
    }
  }, {
    key: 'addEventListeners',
    value: function addEventListeners() {
      var _this2 = this;

      var listeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.listeners;

      if (canUseEventListeners) {
        listeners.forEach(function (_ref) {
          var target = _ref.target,
              event = _ref.event,
              handler = _ref.handler,
              options = _ref.options;

          var node = _this2.getTargetNode(target);
          node && node.addEventListener(event, handler, options);
        });
      }
    }
  }, {
    key: 'removeEventListeners',
    value: function removeEventListeners() {
      var _this3 = this;

      var listeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.listeners;

      if (canUseEventListeners) {
        listeners.forEach(function (_ref2) {
          var target = _ref2.target,
              event = _ref2.event,
              handler = _ref2.handler,
              options = _ref2.options;

          var node = _this3.getTargetNode(target);
          node && node.removeEventListener(event, handler, options);
        });
      }
    }
  }]);

  return EventListener;
}(Component);

export default EventListener;
EventListener.propTypes = process.env.NODE_ENV !== "production" ? {
  listeners: PropTypes.arrayOf(PropTypes.shape({
    /** Target on which to add event listener. Can be a global such as `window` or `document` or any CSS selector */
    target: PropTypes.string.isRequired,

    /** Type of event to listen for, e.g. click */
    event: PropTypes.string.isRequired,

    /** Function called when the event is triggered */
    handler: PropTypes.func.isRequired,

    /** Options passed to addEventListener/removeEventListener */
    options: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])
  }).isRequired).isRequired
} : {};
import PropTypes from 'prop-types';