var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Children, cloneElement, Component } from 'react';
import { createStyledComponent } from '../styles';
import { createThemedComponent, mapComponentThemes } from '../themes';
import { composeEventHandlers, generateId } from '../utils';
import Popover, { componentTheme as popoverComponentTheme } from '../Popover/Popover';
import PopoverContent from '../Popover/PopoverContent';

var DELAY_OPEN = 250; // ms

export var componentTheme = function componentTheme(baseTheme) {
  return mapComponentThemes({
    name: 'Popover',
    theme: popoverComponentTheme(baseTheme)
  }, {
    name: 'Tooltip',
    theme: {
      TooltipArrow_backgroundColor: baseTheme.panel_backgroundColor_inverted,
      TooltipArrow_borderColor: baseTheme.panel_borderColor_inverted,

      TooltipContent_backgroundColor: baseTheme.panel_backgroundColor_inverted,
      TooltipContent_borderColor: baseTheme.panel_borderColor_inverted,
      TooltipContent_color: baseTheme.color_inverted,
      TooltipContent_maxWidth: '18em',

      TooltipContentBlock_marginVertical: '0',
      TooltipContentBlock_paddingHorizontal: baseTheme.space_inset_md,

      TooltipTriggerText_borderStyle: 'dashed',
      TooltipTriggerText_borderColor: 'currentcolor',
      TooltipTriggerText_borderWidth: '1px'
    }
  }, baseTheme);
};

var Root = createThemedComponent(Popover, function (_ref) {
  var baseTheme = _ref.theme;
  return mapComponentThemes({
    name: 'Tooltip',
    theme: componentTheme(baseTheme)
  }, {
    name: 'Popover',
    theme: {}
  }, baseTheme);
});

var TriggerText = createStyledComponent('span', function (_ref2) {
  var baseTheme = _ref2.theme;

  var theme = componentTheme(baseTheme);

  return {
    borderBottomStyle: theme.TooltipTriggerText_borderStyle,
    borderBottomColor: theme.TooltipTriggerText_borderColor,
    borderBottomWidth: theme.TooltipTriggerText_borderWidth
  };
});

/**
 * Tooltips display supporting information to disambiguate user controls and text.
 */

var Tooltip = function (_Component) {
  _inherits(Tooltip, _Component);

  function Tooltip() {
    var _ref3;

    var _temp, _this, _ret;

    _classCallCheck(this, Tooltip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref3 = Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call.apply(_ref3, [this].concat(args))), _this), _this.state = {
      isOpen: Boolean(_this.props.defaultIsOpen)
    }, _this.id = _this.props.id || 'tooltip-' + generateId(), _this.getTriggerProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _extends({}, props, {
        'aria-expanded': undefined,
        onBlur: composeEventHandlers(props.onBlur, _this.close),
        onFocus: composeEventHandlers(props.onFocus, _this.handleDelayedOpen),
        onMouseEnter: composeEventHandlers(props.onMouseEnter, _this.handleDelayedOpen),
        onMouseLeave: composeEventHandlers(props.onMouseLeave, _this.close),
        tabIndex: 0
      });
    }, _this.renderTrigger = function () {
      var children = _this.props.children;


      var trigger = typeof children === 'string' ? _jsx(TriggerText, {}, void 0, children) : children;

      var child = Children.only(trigger);

      return cloneElement(child, _this.getTriggerProps(child.props));
    }, _this.getContentProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var content = _this.props.content;

      var ignoreTabIndex = props.tabIndex,
          restProps = _objectWithoutProperties(props, ['tabIndex']);

      return _extends({}, restProps, {
        'aria-live': 'polite',
        children: content,
        role: 'tooltip'
      });
    }, _this.renderContent = function () {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          props = _ref4.props;

      return React.createElement(PopoverContent, _this.getContentProps(props));
    }, _this.handleDelayedOpen = function (event) {
      _this.clearOpenTimer();
      var isOpen = _this.getControllableValue('isOpen');
      if (!isOpen) {
        _this.openTimer = global.setTimeout(function () {
          _this.open(event);
        }, DELAY_OPEN);
      }
    }, _this.clearOpenTimer = function () {
      global.clearTimeout(_this.openTimer);
      _this.openTimer = null;
    }, _this.open = function (event) {
      if (_this.isControlled('isOpen')) {
        _this.openActions(event);
      } else {
        _this.setState({ isOpen: true }, function () {
          _this.openActions(event);
        });
      }
    }, _this.openActions = function (event) {
      _this.props.onOpen && _this.props.onOpen(event);
    }, _this.close = function (event) {
      _this.clearOpenTimer();
      if (_this.isControlled('isOpen')) {
        _this.closeActions(event);
      } else {
        _this.setState({ isOpen: false }, function () {
          _this.closeActions(event);
        });
      }
    }, _this.closeActions = function (event) {
      _this.props.onClose && _this.props.onClose(event);
    }, _this.isControlled = function (prop) {
      return _this.props.hasOwnProperty(prop);
    }, _this.getControllableValue = function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tooltip, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.clearOpenTimer();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          disabled = _props.disabled,
          ignoreSubtitle = _props.subtitle,
          ignoreTitle = _props.title,
          restProps = _objectWithoutProperties(_props, ['children', 'disabled', 'subtitle', 'title']);

      if (disabled) {
        return children;
      }

      var popoverProps = _extends({}, restProps, {
        children: this.renderTrigger(),
        focusTriggerOnClose: false,
        id: this.id,
        isOpen: this.getControllableValue('isOpen'),
        onClose: this.close,
        onOpen: this.open,
        content: this.renderContent
      });

      return React.createElement(Root, popoverProps);
    }
  }]);

  return Tooltip;
}(Component);

Tooltip.defaultProps = {
  hasArrow: true
};
export default Tooltip;
Tooltip.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Trigger for the Tooltip */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },

  /**
   * Cursor applied when hovering the tooltip trigger; accepts any
   * [valid CSS value](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor)
   */
  cursor: PropTypes.string,

  /** Content of the Tooltip */
  content: PropTypes.string.isRequired,

  /**
   * Open the Tooltip upon initialization. Primarily for use with uncontrolled
   * components.
   */
  defaultIsOpen: PropTypes.bool,

  /** Disables the Tooltip */
  disabled: PropTypes.bool,

  /** Include an arrow on the Tooltip content pointing to the trigger */
  hasArrow: PropTypes.bool,

  /** Id of the Tooltip */
  id: PropTypes.string,

  /**
   * Determines whether the Tooltip is open. For use with controlled components.
   */
  isOpen: PropTypes.bool,

  /**
   * Plugins that are used to alter behavior. See
   * [PopperJS docs](https://popper.js.org/popper-documentation.html#modifiers)
   * for options.
   */
  modifiers: PropTypes.object,

  /** Called when Tooltip is closed */
  onClose: PropTypes.func,

  /** Called when Tooltip is opened */
  onOpen: PropTypes.func,

  /** Placement of the Tooltip */
  placement: PropTypes.oneOf(['auto', 'auto-end', 'auto-start', 'bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', 'right', 'right-end', 'right-start', 'top', 'top-end', 'top-start']),

  /** @Private Tooltips should not have subtitles and will be removed */
  subtitle: PropTypes.any,

  /** @Private Tooltips should not have titles and will be removed */
  title: PropTypes.any,

  /**
   * Use a Portal to render the Tooltip to the body rather than as a sibling
   * to the trigger.
   */
  usePortal: PropTypes.bool
} : {};
import PropTypes from 'prop-types';