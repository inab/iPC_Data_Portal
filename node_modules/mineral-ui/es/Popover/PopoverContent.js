var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { createStyledComponent } from '../styles';
import { createThemedComponent } from '../themes';
import { CardBlock, CardTitle } from '../Card';
import RtlPopper from './RtlPopper';
import PopoverArrow from './PopoverArrow';

var arrowSize = '8px';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    PopoverContent_backgroundColor: baseTheme.panel_backgroundColor,
    PopoverContent_borderColor: baseTheme.panel_borderColor,
    PopoverContent_borderRadius: baseTheme.borderRadius_1,
    PopoverContent_boxShadow: baseTheme.boxShadow_2,
    PopoverContent_color: baseTheme.color,
    PopoverContent_paddingVertical: baseTheme.space_inset_sm,
    PopoverContent_maxWidth: 'none',
    PopoverContent_zIndex: baseTheme.zIndex_100,

    PopoverContentBlock_marginVertical: baseTheme.space_stack_sm,
    PopoverContentBlock_paddingHorizontal: baseTheme.space_inset_md

  }, baseTheme);
};

var Root = createStyledComponent(RtlPopper, function (_ref) {
  var baseTheme = _ref.theme;

  var theme = componentTheme(baseTheme);

  return {
    backgroundColor: theme.PopoverContent_backgroundColor,
    border: '1px solid ' + theme.PopoverContent_borderColor,
    borderRadius: theme.PopoverContent_borderRadius,
    boxShadow: theme.PopoverContent_boxShadow,
    color: theme.PopoverContent_color,
    padding: theme.PopoverContent_paddingVertical + ' 0',
    maxWidth: theme.PopoverContent_maxWidth,
    zIndex: theme.PopoverContent_zIndex,

    '&[data-placement^="top"]': {
      marginBottom: arrowSize
    },
    '&[data-placement^="bottom"]': {
      marginTop: arrowSize
    },
    '&[data-placement^="left"]': {
      marginRight: arrowSize
    },
    '&[data-placement^="right"]': {
      marginLeft: arrowSize
    },
    '&[data-x-out-of-boundaries]': {
      visibility: 'hidden'
    }
  };
}, {
  displayName: 'PopoverContent',
  includeStyleReset: true
});

var cardOverrides = function cardOverrides(_ref2) {
  var baseTheme = _ref2.theme;

  var theme = componentTheme(baseTheme);
  return {
    CardRow_marginVertical: theme.PopoverContentBlock_marginVertical,
    CardRow_marginVerticalLast: theme.PopoverContentBlock_marginVertical,
    CardRow_paddingHorizontal: theme.PopoverContentBlock_paddingHorizontal
  };
};

var PopoverBlock = createThemedComponent(CardBlock, cardOverrides);
var PopoverTitle = createThemedComponent(CardTitle, cardOverrides);

/**
 * PopoverContent component
 */

var PopoverContent = function (_Component) {
  _inherits(PopoverContent, _Component);

  function PopoverContent() {
    _classCallCheck(this, PopoverContent);

    return _possibleConstructorReturn(this, (PopoverContent.__proto__ || Object.getPrototypeOf(PopoverContent)).apply(this, arguments));
  }

  _createClass(PopoverContent, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          hasArrow = _props.hasArrow,
          placement = _props.placement,
          subtitle = _props.subtitle,
          title = _props.title,
          restProps = _objectWithoutProperties(_props, ['children', 'hasArrow', 'placement', 'subtitle', 'title']);

      var rootProps = _extends({
        placement: placement
      }, restProps);
      var popoverArrowProps = {
        size: arrowSize,
        placement: placement
      };

      var _ref4 = _jsx(PopoverTitle, {
        subtitle: subtitle
      }, void 0, title);

      var _ref5 = _jsx(PopoverBlock, {}, void 0, children);

      return React.createElement(
        Root,
        rootProps,
        function (_ref3) {
          var popperProps = _ref3.popperProps,
              restProps = _ref3.restProps;

          var wrapperProps = _extends({}, popperProps, restProps);
          popoverArrowProps.placement = wrapperProps['data-placement'];

          return React.createElement(
            'div',
            wrapperProps,
            title && _ref4,
            _ref5,
            hasArrow && React.createElement(PopoverArrow, popoverArrowProps)
          );
        }
      );
    }
  }]);

  return PopoverContent;
}(Component);

export default PopoverContent;
PopoverContent.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Content of the Popover */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },

  /**
   * Plugins that are used to alter behavior. See
   * [PopperJS docs](https://popper.js.org/popper-documentation.html#modifiers)
   * for options.
   */
  modifiers: PropTypes.object,

  /** Include an arrow on the Popover content pointing to the trigger */
  hasArrow: PropTypes.bool,

  /** Placement of the Popover */
  placement: PropTypes.oneOf(['auto', 'auto-end', 'auto-start', 'bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', 'right', 'right-end', 'right-start', 'top', 'top-end', 'top-start']),

  /** Subtitle displayed under the title */
  subtitle: function subtitle() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  },

  /** Title of the Popover */
  title: function title() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  }
} : {};
import PropTypes from 'prop-types';