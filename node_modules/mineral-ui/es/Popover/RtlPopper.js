var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import { Popper } from 'react-popper';
import { withTheme } from '../themes';

var getRtlPlacement = function getRtlPlacement(placement) {
  var rtlPlacementMap = {
    end: 'start',
    start: 'end'
  };

  var _placement$split = placement.split('-'),
      _placement$split2 = _slicedToArray(_placement$split, 2),
      edge = _placement$split2[0],
      direction = _placement$split2[1];

  if (['bottom', 'top'].indexOf(edge) !== -1) {
    return placement.replace(direction, rtlPlacementMap[direction]);
  }

  return placement;
};

/**
 * Wrapper around react-popper's Popper to respect RTL in placement
 */
function RtlPopper(_ref) {
  var placement = _ref.placement,
      theme = _ref.theme,
      restProps = _objectWithoutProperties(_ref, ['placement', 'theme']);

  var rootProps = _extends({
    placement: placement && theme.direction === 'rtl' ? getRtlPlacement(placement) : placement
  }, restProps);

  return React.createElement(Popper, rootProps);
}

RtlPopper.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Placement of the Popover */
  placement: PropTypes.oneOf(['auto', 'auto-end', 'auto-start', 'bottom', 'bottom-end', 'bottom-start', 'left', 'left-end', 'left-start', 'right', 'right-end', 'right-start', 'top', 'top-end', 'top-start']),

  /** Theme */
  theme: PropTypes.object.isRequired
} : {};
export default withTheme(RtlPopper);
import PropTypes from 'prop-types';