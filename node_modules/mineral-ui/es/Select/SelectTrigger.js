var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';

import IconDanger from '../Icon/IconDanger';
import IconSuccess from '../Icon/IconSuccess';
import IconWarning from '../Icon/IconWarning';
import { createStyledComponent, getNormalizedValue, pxToEm } from '../styles';
import { createThemedComponent, mapComponentThemes } from '../themes';
import IconArrowDropdownUp from '../Icon/IconArrowDropdownUp';
import IconArrowDropdownDown from '../Icon/IconArrowDropdownDown';
import FauxControl from '../FauxControl';
import { componentTheme as textInputComponentTheme } from '../TextInput/TextInput';

export var componentTheme = function componentTheme(baseTheme) {
  return mapComponentThemes({
    name: 'TextInput',
    theme: textInputComponentTheme(baseTheme)
  }, {
    name: 'Select',
    theme: {
      Select_height_small: baseTheme.size_small,
      Select_height_medium: baseTheme.size_medium,
      Select_height_large: baseTheme.size_large,
      Select_height_jumbo: baseTheme.size_jumbo,

      SelectIcon_color: baseTheme.icon_color_theme
    }
  }, baseTheme);
};

var ThemedFauxControl = createThemedComponent(FauxControl, function (_ref) {
  var baseTheme = _ref.theme;
  return mapComponentThemes({
    name: 'Select',
    theme: componentTheme(baseTheme)
  }, {
    name: 'FauxControl',
    theme: {}
  }, baseTheme);
});

var styles = {
  root: function root(_ref2) {
    var disabled = _ref2.disabled,
        readOnly = _ref2.readOnly,
        selectedItemVariant = _ref2.selectedItemVariant,
        baseTheme = _ref2.theme,
        variant = _ref2.variant;

    var theme = componentTheme(baseTheme);
    var rtl = theme.direction === 'rtl';

    return {
      alignItems: 'center',
      display: 'flex',
      width: '100%',

      // all icons
      '& [role="img"]': {
        display: 'block',
        color: theme.SelectIcon_color,
        flex: '0 0 auto',

        '&:first-child': {
          color: disabled || readOnly ? theme.color_disabled : selectedItemVariant ? theme['color_' + selectedItemVariant] : theme.SelectIcon_color,
          margin: '0 ' + theme.SelectIcon_marginHorizontal
        }
      },

      // the arrow icon
      '& :not([role="img"]) ~ [role="img"]': {
        color: disabled || readOnly ? theme.color_disabled : variant ? theme['icon_color_' + variant] : theme.SelectIcon_color
      },

      // the variant icon
      '& :not([role="img"]) + [role="img"]:not(:last-of-type)': {
        color: disabled || readOnly ? theme.color_disabled : variant ? theme['color_' + variant] : selectedItemVariant ? theme['color_' + selectedItemVariant] : theme.SelectIcon_color,
        marginLeft: rtl ? null : theme.SelectIcon_marginHorizontal,
        marginRight: rtl ? theme.SelectIcon_marginHorizontal : null
      }
    };
  },
  trigger: function trigger(_ref3) {
    var size = _ref3.size,
        baseTheme = _ref3.theme;

    var theme = componentTheme(baseTheme);

    var fontSize = size === 'small' ? theme.Select_fontSize_small : theme.Select_fontSize;

    return {
      alignItems: 'center',
      display: 'flex',
      flex: '1 1 auto',
      height: getNormalizedValue(theme['Select_height_' + size], fontSize),
      minWidth: 0
    };
  },
  triggerContent: _extends({
    display: 'inline-block',
    maxWidth: null,
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    wordWrap: 'normal'
  }, {
    userSelect: 'none',
    width: '100%'
  })
};

var Root = createStyledComponent(ThemedFauxControl, styles.root, {
  displayName: 'SelectTrigger'
});
var Trigger = createStyledComponent('div', styles.trigger, {
  displayName: 'Trigger'
});
var TriggerContent = createStyledComponent('span', styles.triggerContent, {
  displayName: 'TriggerContent'
});

var variantIcons = {
  danger: _jsx(IconDanger, {}),
  success: _jsx(IconSuccess, {}),
  warning: _jsx(IconWarning, {})
};

/**
 * SelectTrigger
 */

var SelectTrigger = function (_Component) {
  _inherits(SelectTrigger, _Component);

  function SelectTrigger() {
    _classCallCheck(this, SelectTrigger);

    return _possibleConstructorReturn(this, (SelectTrigger.__proto__ || Object.getPrototypeOf(SelectTrigger)).apply(this, arguments));
  }

  _createClass(SelectTrigger, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          disabled = _props.disabled,
          isOpen = _props.isOpen,
          item = _props.item,
          name = _props.name,
          placeholder = _props.placeholder,
          readOnly = _props.readOnly,
          triggerRef = _props.triggerRef,
          _props$size = _props.size,
          size = _props$size === undefined ? 'large' : _props$size,
          variant = _props.variant,
          restProps = _objectWithoutProperties(_props, ['disabled', 'isOpen', 'item', 'name', 'placeholder', 'readOnly', 'triggerRef', 'size', 'variant']);

      var iconMarginMap = {
        small: 4,
        medium: 8,
        large: 8,
        jumbo: 14
      };

      var ArrowIcon = isOpen ? IconArrowDropdownUp : IconArrowDropdownDown;
      var Arrow = createStyledComponent(ArrowIcon, {
        margin: pxToEm(iconMarginMap[size])
      }, {
        withProps: {
          size: size === 'small' || size === 'medium' ? 'medium' : pxToEm(24)
        }
      });

      var controlProps = {
        hasPlaceholder: !item,
        variant: item && item.variant
      };

      var inputProps = {
        name: name,
        type: 'hidden',
        value: item ? item.value : ''
      };

      var rootProps = _extends({
        afterItems: [_jsx(Arrow, {}, 'arrow'), React.createElement('input', _extends({}, inputProps, { key: 'input' }))],
        control: Trigger,
        controlProps: controlProps,
        disabled: disabled,
        fauxControlRef: triggerRef,
        readOnly: readOnly,
        selectedItemVariant: item && item.variant,
        size: size,
        variant: variant
      }, restProps);

      if (item) {
        var iconEnd = item.iconEnd,
            iconStart = item.iconStart,
            _variant = item.variant;

        rootProps = _extends({}, rootProps, {
          iconEnd: iconEnd,
          iconStart: _variant ? variantIcons[_variant] : iconStart,
          item: item,
          variant: this.props.variant
        });
      }

      return React.createElement(
        Root,
        rootProps,
        _jsx(TriggerContent, {}, void 0, item ? item.text : placeholder)
      );
    }
  }]);

  return SelectTrigger;
}(Component);

export default SelectTrigger;
SelectTrigger.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Disables the control */
  disabled: PropTypes.bool,

  /** Indicates that the Select is open */
  isOpen: PropTypes.bool,

  /** Name of the field when submitted in a form */
  name: PropTypes.string,

  /** Text displayed when there is no item selected */
  placeholder: PropTypes.string,

  /** Indicates that the user cannot modify the value of the control */
  readOnly: PropTypes.bool,

  /** Indicates that the user must fill in a value before submitting a form */
  required: PropTypes.bool,

  /** The selected item */
  item: function item() {
    return (typeof bpfrpt_proptype_Item === 'function' ? bpfrpt_proptype_Item : PropTypes.shape(bpfrpt_proptype_Item)).apply(this, arguments);
  },

  /** Available sizes */
  size: PropTypes.oneOf(['small', 'medium', 'large', 'jumbo']),

  /** Ref for the trigger */
  triggerRef: PropTypes.func,

  /** Available variants */
  variant: PropTypes.oneOf(['success', 'warning', 'danger'])
} : {};
import { bpfrpt_proptype_Item } from '../Menu/Menu';
import PropTypes from 'prop-types';