var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import deepEqual from 'react-fast-compare';
import memoizeOne from 'memoize-one';
import scrollIntoViewIfNeeded from 'scroll-into-view-if-needed';
import { createStyledComponent, pxToEm } from '../styles';
import { createThemedComponent, mapComponentThemes } from '../themes';
import { composeEventHandlers, generateId, isRenderProp } from '../utils';
import ModifiersContext from '../Dialog/ModifiersContext';
import Dropdown, { componentTheme as dropdownComponentTheme } from '../Dropdown/Dropdown';
import ItemMatcher from '../Dropdown/ItemMatcher';
import Menu, { getItems } from '../Menu/Menu';
import MenuItem from '../Menu/MenuItem';
import SelectTrigger, { componentTheme as selectTriggerComponentTheme } from './SelectTrigger';

export var componentTheme = function componentTheme(baseTheme) {
  return mapComponentThemes({
    name: 'Dropdown',
    theme: dropdownComponentTheme(baseTheme)
  }, {
    name: 'Select',
    theme: {}
  }, _extends({}, selectTriggerComponentTheme(baseTheme), baseTheme));
};

var ThemedDropdown = createThemedComponent(Dropdown, function (_ref) {
  var baseTheme = _ref.theme;
  return mapComponentThemes({
    name: 'Select',
    theme: componentTheme(baseTheme)
  }, {
    name: 'Dropdown',
    theme: {}
  }, baseTheme);
});

var Root = createStyledComponent(ThemedDropdown, {
  width: '100%',

  '& > span': {
    width: '100%'
  }
}, {
  displayName: 'Select'
});

var contentWidthModifier = {
  enabled: true,
  fn: function fn(data) {
    data.styles.minWidth = pxToEm(224);
    data.styles.width = pxToEm(data.offsets.reference.width);
    return data;
  }
};

/**
 * Select is a form control that provides users with a list of options.
 * The selected option is always visible and the others become visible upon user
 * interaction. Once open, users can scroll or type to cycle through matching
 * options.
 */

var Select = function (_Component) {
  _inherits(Select, _Component);

  function Select() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, Select);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Select.__proto__ || Object.getPrototypeOf(Select)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
      highlightedIndex: _this.props.defaultHighlightedIndex,
      isOpen: Boolean(_this.props.defaultIsOpen),
      selectedItem: _this.props.defaultSelectedItem
    }, _this.id = _this.props.id || 'select-' + generateId(), _this.getItems = memoizeOne(getItems, deepEqual), _this.getStateAndHelpers = function () {
      return {
        state: {
          highlightedIndex: _this.getControllableValue('highlightedIndex'),
          isOpen: _this.getControllableValue('isOpen'),
          selectedItem: _this.getControllableValue('selectedItem')
        },
        helpers: {
          close: _this.close,
          focusTrigger: _this.focusTrigger,
          open: _this.open
        }
      };
    }, _this.setTriggerRef = function (node) {
      var triggerRef = _this.props.triggerRef;


      _this.selectTrigger = node;
      triggerRef && triggerRef(node);
    }, _this.getMenuItemId = function (index) {
      return _this.id + '-item-' + index;
    }, _this.getTriggerProps = function () {
      var _extends2;

      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var isOpen = _this.getControllableValue('isOpen');
      var selectedItem = _this.getControllableValue('selectedItem');
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          invalid = _this$props.invalid,
          name = _this$props.name,
          placeholder = _this$props.placeholder,
          readOnly = _this$props.readOnly,
          trigger = _this$props.trigger,
          required = _this$props.required,
          size = _this$props.size,
          variant = _this$props.variant;


      var refKey = trigger ? 'ref' : 'triggerRef';

      return _extends({}, isRenderProp(trigger) ? props : {}, (_extends2 = {
        'aria-haspopup': 'listbox',
        'aria-invalid': invalid,
        'aria-readonly': readOnly,
        'aria-required': required,
        disabled: disabled,
        isOpen: isOpen,
        item: selectedItem,
        name: name,
        placeholder: placeholder,
        readOnly: readOnly,
        size: size,
        tabIndex: !disabled ? 0 : undefined
      }, _defineProperty(_extends2, refKey, _this.setTriggerRef), _defineProperty(_extends2, 'variant', variant), _extends2), !isRenderProp(trigger) ? props : {}, !readOnly ? { onKeyDown: _this.onTriggerKeyDown } : {});
    }, _this.renderTrigger = function () {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          props = _ref3.props;

      var trigger = _this.props.trigger;


      if (isRenderProp(trigger)) {
        return trigger(_extends({}, _this.getStateAndHelpers(), {
          props: _this.getTriggerProps(props)
        }));
      }

      return React.createElement(SelectTrigger, _this.getTriggerProps(props));
    }, _this.getMenuProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var itemKey = _this.props.itemKey;


      return _extends({}, props, {
        itemKey: itemKey,
        role: 'listbox',
        item: _this.renderItem
      });
    }, _this.renderMenu = function () {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          props = _ref4.props;

      var menu = _this.props.menu;


      if (isRenderProp(menu)) {
        return menu(_extends({}, _this.getStateAndHelpers(), {
          props: _this.getMenuProps(props)
        }));
      }

      return React.createElement(Menu, _this.getMenuProps(props));
    }, _this.getItemProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var highlightedIndex = _this.getControllableValue('highlightedIndex');
      var selectedItem = _this.getControllableValue('selectedItem');
      var itemProps = props.props;
      var index = itemProps.index,
          item = itemProps.item;


      return _extends({}, itemProps, item, {
        'aria-selected': selectedItem ? selectedItem.value === item.value : false,
        'aria-disabled': _this.props.disabled || item.disabled,
        children: item.text,
        id: _this.getMenuItemId(index),
        isHighlighted: highlightedIndex === index,
        role: 'option',
        tabIndex: null, // Unset tabIndex because we use arrow keys to navigate instead
        onClick: composeEventHandlers(item.onClick, _this.onSelect.bind(null, item))
      });
    }, _this.renderItem = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var item = _this.props.item;


      if (isRenderProp(item)) {
        return item(_extends({}, props, _this.getStateAndHelpers(), {
          props: _this.getItemProps(props)
        }));
      }

      return React.createElement(MenuItem, _this.getItemProps(props));
    }, _this.getHighlightedOrSelectedIndex = function () {
      var isOpen = _this.getControllableValue('isOpen');
      var selectedItem = _this.getControllableValue('selectedItem');
      var highlightedIndex = _this.getControllableValue('highlightedIndex');

      if (isOpen && selectedItem && (highlightedIndex === null || highlightedIndex === undefined)) {
        return _this.items.indexOf(selectedItem);
      }

      return highlightedIndex;
    }, _this.getHighlightedItemId = function () {
      var highlightedIndex = _this.getControllableValue('highlightedIndex');
      return highlightedIndex !== undefined && highlightedIndex !== null ? _this.getMenuItemId(highlightedIndex) : undefined;
    }, _this.onTriggerKeyDown = function (event) {
      // $FlowFixMe
      event.nativeEvent.preventMineralDefault = true;

      var key = event.key;

      var isOpen = _this.getControllableValue('isOpen');

      if (key === 'ArrowUp') {
        event.preventDefault();
        _this.highlightPreviousItem();
        !isOpen && _this.open(event);
      } else if (key === 'ArrowDown') {
        event.preventDefault();
        _this.highlightNextItem();
        !isOpen && _this.open(event);
      } else if (key === 'Home' && isOpen) {
        event.preventDefault();
        _this.highlightItemAtIndex(0);
      } else if (key === 'End' && isOpen) {
        event.preventDefault();
        _this.highlightItemAtIndex(_this.items.length - 1);
      } else if (key === 'Enter' || key === ' ') {
        event.preventDefault();
        isOpen ? _this.clickHighlightedItem() : _this.open(event);
      } else if (isOpen) {
        _this.highlightItemMatchingKey(key);
      }
    }, _this.findItemMatchingKey = function (key) {
      _this.itemMatcher = _this.itemMatcher || new ItemMatcher();
      return _this.itemMatcher.findMatchingItem(_this.items, _this.getControllableValue('highlightedIndex'), key);
    }, _this.highlightItemMatchingKey = function (key) {
      var matchingItem = _this.findItemMatchingKey(key);
      matchingItem && _this.highlightItemAtIndex(_this.items.indexOf(matchingItem));
    }, _this.highlightItemAtIndex = function (index) {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState({ highlightedIndex: index }, _this.scrollHighlightedItemIntoViewIfNeeded);
      }
    }, _this.highlightNextItem = function () {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState(function (prevState) {
          return {
            highlightedIndex: prevState.highlightedIndex === null || prevState.highlightedIndex === undefined ? prevState.selectedItem ? _this.items.indexOf(prevState.selectedItem) : 0 : prevState.highlightedIndex === _this.items.length - 1 ? 0 : prevState.highlightedIndex + 1
          };
        }, _this.scrollHighlightedItemIntoViewIfNeeded);
      }
    }, _this.highlightPreviousItem = function () {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState(function (prevState) {
          return {
            highlightedIndex: prevState.highlightedIndex === null || prevState.highlightedIndex === undefined ? prevState.selectedItem ? _this.items.indexOf(prevState.selectedItem) : _this.items.length - 1 : prevState.highlightedIndex === 0 ? _this.items.length - 1 : prevState.highlightedIndex - 1
          };
        }, _this.scrollHighlightedItemIntoViewIfNeeded);
      }
    }, _this.highlightDefaultItem = function () {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState(function (prevState) {
          var selectedItem = _this.isControlled('selectedItem') ? _this.props.selectedItem : prevState.selectedItem;
          return {
            highlightedIndex: selectedItem ? _this.items.indexOf(selectedItem) : prevState.highlightedIndex ? prevState.highlightedIndex : 0
          };
        }, _this.scrollHighlightedItemIntoViewIfNeeded);
      }
    }, _this.scrollHighlightedItemIntoViewIfNeeded = function () {
      var highlightedItemNode = global.document.getElementById(_this.getHighlightedItemId());
      var boundary = findDOMNode(_this); // eslint-disable-line react/no-find-dom-node

      if (highlightedItemNode && boundary) {
        scrollIntoViewIfNeeded(highlightedItemNode, { boundary: boundary });
      }
    }, _this.clickHighlightedItem = function () {
      var highlightedItemNode = global.document.getElementById(_this.getHighlightedItemId());
      highlightedItemNode && highlightedItemNode.click();
    }, _this.onSelect = function (item, event) {
      var prevSelectedItem = _this.getControllableValue('selectedItem');

      var stateToSet = void 0;
      if (!_this.isControlled('selectedItem')) {
        stateToSet = {
          selectedItem: item
        };
      }
      if (!_this.isControlled('highlightedIndex')) {
        stateToSet = _extends({}, stateToSet, {
          highlightedIndex: _this.items.indexOf(item)
        });
      }

      if (stateToSet) {
        _this.setState(stateToSet, function () {
          _this.onSelectActions(item, prevSelectedItem, event);
        });
      } else {
        _this.onSelectActions(item, prevSelectedItem, event);
      }
    }, _this.onSelectActions = function (item, prevSelectedItem, event) {
      _this.props.onSelect && _this.props.onSelect(item, event);

      if (prevSelectedItem !== item) {
        _this.onChange(item, event);
      }

      _this.close(event);
      _this.focusTrigger();
    }, _this.onChange = function (item, event) {
      _this.props.onChange && _this.props.onChange(item, event);
    }, _this.focusTrigger = function () {
      var node = findDOMNode(_this.selectTrigger); // eslint-disable-line react/no-find-dom-node
      if (node instanceof HTMLElement) {
        node.focus();
      }
    }, _this.open = function (event) {
      _this.highlightDefaultItem();

      if (_this.isControlled('isOpen')) {
        _this.openActions(event);
      } else {
        _this.setState(function () {
          return { isOpen: true };
        }, function () {
          _this.openActions(event);
        });
      }
    }, _this.openActions = function (event) {
      _this.props.onOpen && _this.props.onOpen(event);
    }, _this.close = function (event) {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState({ highlightedIndex: null });
      }

      if (_this.isControlled('isOpen')) {
        _this.closeActions(event);
      } else {
        _this.setState(function () {
          return { isOpen: false };
        }, function () {
          _this.closeActions(event);
        });
      }
    }, _this.closeActions = function (event) {
      _this.props.onClose && _this.props.onClose(event);
    }, _this.isControlled = function (prop) {
      return _this.props.hasOwnProperty(prop);
    }, _this.getControllableValue = function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Select, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          data = _props.data,
          disabled = _props.disabled,
          modifiers = _props.modifiers,
          readOnly = _props.readOnly,
          trigger = _props.trigger,
          restProps = _objectWithoutProperties(_props, ['data', 'disabled', 'modifiers', 'readOnly', 'trigger']);

      var isOpen = this.getControllableValue('isOpen');

      this.items = this.getItems(data);

      var rootProps = _extends({}, restProps, {
        id: this.id,
        data: data,
        disabled: disabled || readOnly,
        highlightedIndex: this.getHighlightedOrSelectedIndex(),
        isOpen: isOpen,
        onClose: this.close,
        onOpen: this.open,
        menu: this.renderMenu
      });

      return _jsx(ModifiersContext.Consumer, {}, void 0, function (contextModifiers) {
        rootProps.modifiers = _extends({
          contentWidth: contentWidthModifier
        }, modifiers || contextModifiers);

        return React.createElement(
          Root,
          rootProps,
          isRenderProp(trigger) ? _this2.renderTrigger : _this2.renderTrigger()
        );
      });
    }
  }]);

  return Select;
}(Component);

Select.defaultProps = {
  itemKey: 'value',
  placeholder: 'Select...',
  placement: 'bottom-start',
  size: 'large'
};
export default Select;
Select.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Data from which the [Menu](/components/menu#data) will be constructed
   * (see [example](#data))
   */
  data: PropTypes.oneOfType([function () {
    return (typeof bpfrpt_proptype_Items === 'function' ? bpfrpt_proptype_Items : PropTypes.shape(bpfrpt_proptype_Items)).apply(this, arguments);
  }, function () {
    return (typeof bpfrpt_proptype_ItemGroups === 'function' ? bpfrpt_proptype_ItemGroups : PropTypes.shape(bpfrpt_proptype_ItemGroups)).apply(this, arguments);
  }]).isRequired,

  /**
   * Index of item to be highlighted upon initialization. Primarily for
   * use with uncontrolled components.
   */
  defaultHighlightedIndex: PropTypes.number,

  /**
   * Open the Select upon initialization. Primarily for use with uncontrolled
   * components.
   */
  defaultIsOpen: PropTypes.bool,

  /**
   * Item selected upon initialization. Primarily for use with uncontrolled
   * components.
   */
  defaultSelectedItem: function defaultSelectedItem() {
    return (typeof bpfrpt_proptype_Item === 'function' ? bpfrpt_proptype_Item : PropTypes.shape(bpfrpt_proptype_Item)).apply(this, arguments);
  },

  /** Disables the control */
  disabled: PropTypes.bool,

  /** Index of the highlighted item. For use with controlled components. */
  highlightedIndex: PropTypes.number,

  /** Id of the Select */
  id: PropTypes.string,

  /** Indicates that the value of the element is invalid */
  invalid: PropTypes.bool,

  /** Determines whether the Select is open. For use with controlled components. */
  isOpen: PropTypes.bool,

  /**
   * Provides custom rendering control for the items. See the
   * [custom item example](/components/select#custom-item) and
   * our [render props guide](/render-props).
   */
  item: function item() {
    return (typeof RenderFn === 'function' ? PropTypes.instanceOf(RenderFn) : PropTypes.any).apply(this, arguments);
  },

  /**
   * Specifies a key in the item data that gives an item its unique identity. See
   * the [React docs](https://reactjs.org/docs/lists-and-keys.html#keys).
   */
  itemKey: PropTypes.string,

  /**
   * Provides custom rendering control for the menu. See the
   * [custom menu example](/components/select#custom-menu) and
   * our [render props guide](/render-props).
   */
  menu: function menu() {
    return (typeof RenderFn === 'function' ? PropTypes.instanceOf(RenderFn) : PropTypes.any).apply(this, arguments);
  },

  /**
   * Plugins that are used to alter behavior. See
   * [PopperJS docs](https://popper.js.org/popper-documentation.html#modifiers)
   * for options.
   */
  modifiers: PropTypes.object,

  /** Name of the field when submitted in a form */
  name: PropTypes.string,

  /**
   * Called when an item is selected and it is different than the previously
   * selected item.
   */
  onChange: PropTypes.func,

  /** Called when Select is closed */
  onClose: PropTypes.func,

  /** Called when Select is opened */
  onOpen: PropTypes.func,

  /** Called when an item is selected */
  onSelect: PropTypes.func,

  /** Text displayed when there is no item selected */
  placeholder: PropTypes.string,

  /** Placement of the Select menu */
  placement: PropTypes.oneOf(['bottom-end', 'bottom-start', 'top-end', 'top-start']),

  /** Indicates that the user cannot modify the value of the control */
  readOnly: PropTypes.bool,

  /** Indicates that the user must select a value before submitting a form */
  required: PropTypes.bool,

  /** The selected item. For use with controlled components. */
  selectedItem: function selectedItem() {
    return (typeof bpfrpt_proptype_Item === 'function' ? bpfrpt_proptype_Item : PropTypes.shape(bpfrpt_proptype_Item)).apply(this, arguments);
  },

  /** Available sizes */
  size: PropTypes.oneOf(['small', 'medium', 'large', 'jumbo']),

  /**
   * Provides custom rendering control for the trigger. See the
   * [custom trigger example](/components/select#custom-trigger) and
   * our [render props guide](/render-props).
   */
  trigger: function trigger() {
    return (typeof RenderFn === 'function' ? PropTypes.instanceOf(RenderFn) : PropTypes.any).apply(this, arguments);
  },

  /** Ref for the trigger */
  triggerRef: PropTypes.func,

  /**
   * Use a Portal to render the Select menu to the body rather than as a sibling
   * to the trigger
   */
  usePortal: PropTypes.bool,

  /** Available variants */
  variant: PropTypes.oneOf(['danger', 'success', 'warning'])
} : {};
import { bpfrpt_proptype_Item } from '../Menu/Menu';
import { bpfrpt_proptype_Items } from '../Menu/Menu';
import { bpfrpt_proptype_ItemGroups } from '../Menu/Menu';
import PropTypes from 'prop-types';