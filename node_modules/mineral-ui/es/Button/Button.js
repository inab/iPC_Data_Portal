var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component, cloneElement } from 'react';
import memoizeOne from 'memoize-one';

import { createStyledComponent, pxToEm, getNormalizedValue } from '../styles';

// prettier-ignore
export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    Button_backgroundColor: baseTheme.backgroundColor,
    Button_backgroundColor_active: baseTheme.backgroundColor_active,
    Button_backgroundColor_focus: baseTheme.backgroundColor_focus,
    Button_backgroundColor_hover: baseTheme.backgroundColor_hover,
    Button_backgroundColor_minimal_active: baseTheme.backgroundColor_active,
    Button_backgroundColor_minimal_hover: baseTheme.backgroundColor_hover,
    Button_backgroundColor_primary: baseTheme.backgroundColor_themePrimary,
    Button_backgroundColor_primary_active: baseTheme.backgroundColor_themePrimary_active,
    Button_backgroundColor_primary_focus: baseTheme.backgroundColor_themePrimary_focus,
    Button_backgroundColor_primary_hover: baseTheme.backgroundColor_themePrimary_hover,
    Button_borderColor: baseTheme.borderColor,
    Button_borderColor_active: baseTheme.borderColor_theme_active,
    Button_borderColor_focus: baseTheme.borderColor_theme_focus,
    Button_borderColor_hover: baseTheme.borderColor_theme_hover,
    Button_borderRadius: baseTheme.borderRadius_1,
    Button_borderWidth: 1, // px
    Button_boxShadow_focus: '0 0 0 1px ' + baseTheme.boxShadow_focusInner + ', 0 0 0 2px ' + baseTheme.borderColor_theme_focus,
    Button_color: baseTheme.color_theme,
    Button_color_minimal: baseTheme.color_theme,
    Button_color_primary: baseTheme.color_themePrimary,
    Button_fontWeight: baseTheme.fontWeight_semiBold,
    Button_paddingHorizontal: baseTheme.space_inset_sm,
    Button_paddingIconOnly_small: pxToEm(3),
    Button_paddingIconOnly_medium: pxToEm(7),
    Button_paddingIconOnly_large: pxToEm(7),
    Button_paddingIconOnly_jumbo: pxToEm(13),
    Button_height_small: baseTheme.size_small,
    Button_height_medium: baseTheme.size_medium,
    Button_height_large: baseTheme.size_large,
    Button_height_jumbo: baseTheme.size_jumbo,

    ButtonContent_fontSize: baseTheme.fontSize_ui,
    ButtonContent_fontSize_small: pxToEm(12),

    ButtonIcon_color: baseTheme.icon_color_theme,
    ButtonIcon_margin: baseTheme.space_inset_sm

  }, baseTheme);
};

function chooseColor(_ref, theme) {
  var disabled = _ref.disabled,
      primary = _ref.primary,
      minimal = _ref.minimal;

  if (disabled) {
    return theme.color_disabled;
  } else if (primary) {
    return theme.Button_color_primary;
  } else if (minimal) {
    return theme.Button_color_minimal;
  } else {
    return theme.Button_color;
  }
}

var styles = {
  button: function button(_ref2) {
    var circular = _ref2.circular,
        disabled = _ref2.disabled,
        fullWidth = _ref2.fullWidth,
        minimal = _ref2.minimal,
        primary = _ref2.primary,
        size = _ref2.size,
        text = _ref2.text,
        baseTheme = _ref2.theme,
        variant = _ref2.variant;

    var theme = componentTheme(baseTheme);
    var rtl = theme.direction === 'rtl';
    var firstChildMarginProperty = rtl ? 'marginLeft' : 'marginRight';
    var lastChildMarginProperty = rtl ? 'marginRight' : 'marginLeft';

    if (variant) {
      // prettier-ignore
      theme = _extends({}, theme, {
        Button_backgroundColor_primary: theme['backgroundColor_' + variant + 'Primary'],
        Button_backgroundColor_primary_active: theme['backgroundColor_' + variant + 'Primary_active'],
        Button_backgroundColor_primary_focus: theme['backgroundColor_' + variant + 'Primary_focus'],
        Button_backgroundColor_primary_hover: theme['backgroundColor_' + variant + 'Primary_hover'],
        Button_borderColor_active: theme['borderColor_' + variant + '_active'],
        Button_borderColor_focus: theme['borderColor_' + variant + '_focus'],
        Button_borderColor_hover: theme['borderColor_' + variant + '_hover'],
        Button_boxShadow_focus: '0 0 0 1px ' + theme.boxShadow_focusInner + ', 0 0 0 2px ' + theme['borderColor_' + variant + '_focus'],
        Button_color: theme['color_' + variant],
        Button_color_primary: theme['color_' + variant + 'Primary'],
        Button_color_minimal: theme['color_' + variant],
        ButtonIcon_color: theme['icon_color_' + variant]
      });
    }

    var color = chooseColor({ disabled: disabled, primary: primary, minimal: minimal }, theme);
    return {
      backgroundColor: function () {
        if (disabled && !minimal) {
          return theme.backgroundColor_disabled;
        } else if (primary) {
          return theme.Button_backgroundColor_primary;
        } else if (minimal) {
          return 'transparent';
        } else {
          return theme.Button_backgroundColor;
        }
      }(),
      borderColor: disabled || primary || minimal ? 'transparent' : theme.Button_borderColor,
      borderRadius: circular ? parseFloat(theme['Button_height_' + size]) / 2 + 'em' : theme.Button_borderRadius,
      borderStyle: 'solid',
      borderWidth: theme.Button_borderWidth + 'px',
      color: color,
      cursor: disabled ? 'default' : 'pointer',
      display: 'inline-block',
      fontWeight: theme.Button_fontWeight,
      height: theme['Button_height_' + size],
      margin: 0,
      // if the user puts in a small icon in a large button
      // we want to force the button to be round/square
      // (really just pertinent on icon-only buttons)
      minWidth: theme['Button_height_' + size],
      padding: text === undefined ? theme['Button_paddingIconOnly_' + size] : '0 ' + theme.Button_paddingHorizontal,
      textDecoration: 'none',
      verticalAlign: 'middle',
      width: fullWidth && '100%',
      '&:focus': {
        backgroundColor: function () {
          if (primary) {
            return theme.Button_backgroundColor_primary_focus;
          } else if (minimal) {
            return theme.Button_backgroundColor_minimal_focus;
          } else {
            return theme.Button_backgroundColor_focus;
          }
        }(),
        borderColor: minimal ? theme.Button_borderColor_focus : undefined,
        boxShadow: minimal ? undefined : theme.Button_boxShadow_focus,
        color: color,
        textDecoration: 'none'
      },
      '&:hover': {
        backgroundColor: function () {
          if (!disabled) {
            if (primary) {
              return theme.Button_backgroundColor_primary_hover;
            } else if (minimal) {
              return theme.Button_backgroundColor_minimal_hover;
            } else {
              return theme.Button_backgroundColor_hover;
            }
          }
        }(),
        borderColor: disabled || minimal || primary ? undefined : theme.Button_borderColor_hover,
        color: color,
        textDecoration: 'none'
      },
      '&:focus:active, &:focus:hover': {
        borderColor: function () {
          if (primary) {
            return 'transparent';
          } else if (minimal) {
            return theme.Button_borderColor_focus;
          } else {
            return theme.Button_borderColor;
          }
        }()
      },
      // `:active` must be last, to follow LVHFA order:
      // https://developer.mozilla.org/en-US/docs/Web/CSS/:active
      '&:active': {
        backgroundColor: function () {
          if (!disabled) {
            if (primary) {
              return theme.Button_backgroundColor_primary_active;
            } else if (minimal) {
              return theme.Button_backgroundColor_minimal_active;
            } else {
              return theme.Button_backgroundColor_active;
            }
          }
        }(),
        borderColor: !minimal && !disabled ? theme.Button_borderColor_active : undefined,
        color: color
      },
      '&::-moz-focus-inner': { border: 0 },

      '& [role="img"]': {
        boxSizing: 'content-box',
        color: disabled || primary ? null : theme.ButtonIcon_color,
        display: 'block',
        flexShrink: 0,

        '&:first-child': _defineProperty({}, firstChildMarginProperty, theme.ButtonIcon_margin),

        '&:last-child': _defineProperty({}, lastChildMarginProperty, theme.ButtonIcon_margin),

        '&:only-child': {
          margin: 0
        }
      }
    };
  },
  content: function content(_ref3) {
    var size = _ref3.size,
        baseTheme = _ref3.theme;

    var theme = componentTheme(baseTheme);
    var rtl = theme.direction === 'rtl';
    var firstChildPaddingProperty = rtl ? 'paddingRight' : 'paddingLeft';
    var lastChildPaddingProperty = rtl ? 'paddingLeft' : 'paddingRight';

    var paddings = void 0;

    var fontSize = size === 'small' ? theme.ButtonContent_fontSize_small : theme.ButtonContent_fontSize;

    if (size === undefined || size === 'large' || size === 'jumbo') {
      var padding = getNormalizedValue(theme.Button_paddingHorizontal, fontSize);
      paddings = {
        '&:first-child': _defineProperty({}, firstChildPaddingProperty, padding),

        '&:last-child': _defineProperty({}, lastChildPaddingProperty, padding)
      };
    }

    return _extends({
      display: 'inline-block',
      maxWidth: '100%',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      wordWrap: 'normal'
    }, {

      display: 'block',
      fontSize: fontSize,
      lineHeight: getNormalizedValue(theme['Button_height_' + size], fontSize)
    }, paddings);
  },
  inner: {
    alignItems: 'center',
    display: 'inline-flex',
    justifyContent: 'center',
    maxHeight: '100%',
    pointerEvents: 'none',
    width: '100%'
  }
};

var iconSize = {
  small: 'medium',
  medium: 'medium',
  large: pxToEm(24),
  jumbo: pxToEm(24)
};

var Content = createStyledComponent('span', styles.content);
var Inner = createStyledComponent('span', styles.inner);

function isTypeButton(type) {
  return ['button', 'submit', 'reset'].indexOf(type) !== -1;
}

function filterProps(_ref4) {
  var element = _ref4.element,
      type = _ref4.type;

  // When element is a component, e.g. ReactRouterLink,
  // these are not filtered automatically by rootEl
  var invalidComponentProps = ['primary', 'text', 'variant', 'element'];
  var shouldFilterType = element === 'button' && !isTypeButton(type) || element !== 'button' && isTypeButton(type);
  var invalidLinkProps = shouldFilterType ? ['type'] : [];

  return invalidComponentProps.concat(invalidLinkProps);
}

var createRootNode = function createRootNode(props) {
  var _props$element = props.element,
      element = _props$element === undefined ? Button.defaultProps.element : _props$element;


  return createStyledComponent(element, styles.button, {
    displayName: 'Button',
    filterProps: filterProps(props),
    includeStyleReset: true,
    rootEl: element
  });
};

/**
 * The Button component represents a clickable button.
 * Buttons draw attention to actions that can be performed in your app.
 * Buttons are used to trigger any sort of event.
 */

var Button = function (_Component) {
  _inherits(Button, _Component);

  function Button() {
    var _ref5;

    var _temp, _this, _ret;

    _classCallCheck(this, Button);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref5 = Button.__proto__ || Object.getPrototypeOf(Button)).call.apply(_ref5, [this].concat(args))), _this), _this.getRootNode = memoizeOne(createRootNode, function (nextProps, prevProps) {
      return nextProps.element === prevProps.element;
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  // Must be an instance method to avoid affecting other instances memoized keys


  _createClass(Button, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          iconStart = _props.iconStart,
          iconEnd = _props.iconEnd,
          _props$size = _props.size,
          size = _props$size === undefined ? Button.defaultProps.size : _props$size,
          _props$type = _props.type,
          type = _props$type === undefined ? Button.defaultProps.type : _props$type,
          variant = _props.variant,
          restProps = _objectWithoutProperties(_props, ['children', 'iconStart', 'iconEnd', 'size', 'type', 'variant']);

      var rootProps = _extends({
        size: size,
        text: children,
        type: type,
        variant: variant
      }, restProps);

      var Root = this.getRootNode(this.props);

      var startIcon = iconStart ? cloneElement(iconStart, { size: iconSize[size], key: 'iconStart' }) : null;
      var endIcon = iconEnd ? cloneElement(iconEnd, { size: iconSize[size], key: 'iconEnd' }) : null;

      return React.createElement(
        Root,
        rootProps,
        _jsx(Inner, {}, void 0, startIcon, children && _jsx(Content, {
          size: size
        }, void 0, children), endIcon)
      );
    }
  }]);

  return Button;
}(Component);

Button.displayName = 'Button';
Button.defaultProps = {
  element: 'button',
  size: 'large',
  type: 'button'
};
export default Button;
Button.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Rendered content of the component */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  },

  /** Displays a circular Button */
  circular: PropTypes.bool,

  /** Disables the Button */
  disabled: PropTypes.bool,

  /** Element to be used as the root node - e.g. `a` can be used to create a link that is styled like a Button */
  element: function element() {
    return (typeof $FlowFixMe === 'function' ? PropTypes.instanceOf($FlowFixMe) : PropTypes.any).apply(this, arguments);
  },
  // Should allow string | React class
  /** Stretch Button to fill its container */
  fullWidth: PropTypes.bool,

  /** Icon that goes after the children*/
  iconEnd: function iconEnd() {
    return (typeof React$Element === 'function' ? PropTypes.instanceOf(React$Element) : PropTypes.any).apply(this, arguments);
  },

  /** Icon that goes before the children */
  iconStart: function iconStart() {
    return (typeof React$Element === 'function' ? PropTypes.instanceOf(React$Element) : PropTypes.any).apply(this, arguments);
  },

  /** Display a minimal Button */
  minimal: PropTypes.bool,

  /** Called with the click event */
  onClick: PropTypes.func,

  /** Display a primary Button */
  primary: PropTypes.bool,

  /** Available sizes */
  size: PropTypes.oneOf(['small', 'medium', 'large', 'jumbo']),

  /** Available types */
  type: PropTypes.string,

  /** Available variants */
  variant: PropTypes.oneOf(['danger', 'success', 'warning'])
} : {};
import PropTypes from 'prop-types';