var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import tokens from 'mineral-ui-tokens';
import createColorRamp from './createColorRamp';
import fontSize_base from './fontSizeBase';
import colorAliases from './generated/colorAliases';
import rampTokens from './generated/groupedByRampJsTokens';
import palette from './generated/palette';
import themeFromTokens, { themeFromColorTokens } from './themeFromTokens';

var primaryColors = ['theme', 'danger', 'success', 'warning'];

export var nonTokenVariables = function nonTokenVariables(colors) {
  return {
    boxShadow_focusInner: colors && colors.white || palette.white,
    direction: 'ltr',
    fontSize_base: fontSize_base
  };
};

var colorOverrides = function colorOverrides(colors) {
  return Object.keys(rampTokens).reduce(function (acc, color) {
    return colors[color] ? _extends({}, acc, themeFromColorTokens({
      color: correctColorType(colors[color], color),
      colorName: color,
      tokens: rampTokens[color]
    })) : acc;
  }, {});
};

var correctColorType = function correctColorType(colorValue, color) {
  var isStringColor = ['black', 'white'].indexOf(color) !== -1;

  return typeof colorValue === 'string' && isStringColor ? colorValue : getRamp(colorValue, color);
};

var getRamp = function getRamp(color, keyName) {
  if (typeof color === 'string') {
    if (palette[color]) {
      return palette[color];
    } else {
      throw new Error('[mineral-ui/themes/createTheme]: Expected colors.' + keyName + ' to be a color ramp from the mineral-ui palette or a custom color ramp, but got \'' + color + '\'.\nSee https://mineral-ui.com/color#guidelines-ramps for the palette ramps.\nSee https://github.com/mineral-ui/mineral-ui/blob/master/packages/mineral-ui-tokens/src/blue.js for an example color ramp.');
    }
  }

  var ignoreInflection = color.inflection,
      ramp = _objectWithoutProperties(color, ['inflection']);

  return ramp;
};

var getWhiteOrBlackTextColor = function getWhiteOrBlackTextColor(color, colors, override) {
  var black = colors.black || palette.black;
  var white = colors.white || palette.white;

  var inflectionPoints = primaryColors.reduce(function (acc, color) {
    acc[color] = colorAliases['backgroundColor_' + (color === 'theme' ? 'brand' : color) + 'Primary'].split('_')[1];
    return acc;
  }, {});

  return override && typeof override.inflection === 'number' ? override.inflection > inflectionPoints[color] ? black : white : white;
};

var primaryColorsByVariation = function primaryColorsByVariation() {
  var colors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return primaryColors.reduce(function (acc, color) {
    var override = colors[color];
    acc['color_' + color + 'Primary'] = getWhiteOrBlackTextColor(color, colors, override);
    return acc;
  }, {});
};

export default function createTheme(options) {
  var colors = options && options.colors;

  var grayRamp = colors && colors.gray ? createColorRamp(getRamp(colors.gray, 'gray'), 'color_gray_') : createColorRamp(palette.gray, 'color_gray_');
  var themeRamp = colors && colors.theme ? createColorRamp(getRamp(colors.theme, 'theme'), 'color_theme_') : createColorRamp(palette.brand, 'color_theme_');

  return _extends({}, themeFromTokens(tokens), nonTokenVariables(colors), colors ? colorOverrides(colors) : undefined, colors ? primaryColorsByVariation(colors) : undefined, grayRamp, themeRamp, {
    color_black: colors && colors.black || palette.black,
    color_white: colors && colors.white || palette.white

  }, options && options.overrides);
}
import { bpfrpt_proptype_Color } from './generated/palette';
import { bpfrpt_proptype_Ramp } from './themeFromTokens';