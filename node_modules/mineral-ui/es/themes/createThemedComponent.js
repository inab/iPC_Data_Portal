var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import wrapDisplayName from 'recompose/wrapDisplayName';
import withTheme from './withTheme';
import ThemeProvider from './ThemeProvider';

export default function createThemedComponent(WrappedComponent, theme) {
  var Wrapper = function Wrapper(props, context) {
    var outTheme = typeof theme === 'function' ? theme(props, context) : theme;

    var ignore = props.theme,
        outProps = _objectWithoutProperties(props, ['theme']);

    return _jsx(ThemeProvider, {
      theme: outTheme
    }, void 0, React.createElement(WrappedComponent, outProps));
  };

  Wrapper.propTypes = process.env.NODE_ENV !== "production" ? WrappedComponent.propTypes : {};

  Wrapper.displayName = wrapDisplayName(WrappedComponent, 'Themed');

  return withTheme(Wrapper);
}