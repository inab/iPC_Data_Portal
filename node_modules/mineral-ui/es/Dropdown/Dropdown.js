var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Children, Component, cloneElement } from 'react';
import { findDOMNode } from 'react-dom';
import deepEqual from 'react-fast-compare';
import memoizeOne from 'memoize-one';
import scrollIntoViewIfNeeded from 'scroll-into-view-if-needed';
import { composeEventHandlers, generateId, isRenderProp } from '../utils';
import Menu, { getItems } from '../Menu/Menu';
import MenuItem from '../Menu/MenuItem';
import Root from '../Popover';
import DropdownContent, { componentTheme as dropdownContentComponentTheme } from './DropdownContent';
import ItemMatcher from './ItemMatcher';

var bpfrpt_proptype_RenderFn = PropTypes.func;


export var componentTheme = function componentTheme(baseTheme) {
  return _extends({}, dropdownContentComponentTheme(baseTheme), baseTheme);
};

/**
 * Dropdown presents a list of actions after a user interacts with a trigger.
 */

var Dropdown = function (_Component) {
  _inherits(Dropdown, _Component);

  function Dropdown() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Dropdown);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      highlightedIndex: _this.props.defaultHighlightedIndex,
      isOpen: Boolean(_this.props.defaultIsOpen)
    }, _this.id = _this.props.id || 'dropdown-' + generateId(), _this.getItems = memoizeOne(getItems, deepEqual), _this.getStateAndHelpers = function () {
      return {
        state: {
          highlightedIndex: _this.getControllableValue('highlightedIndex'),
          isOpen: _this.getControllableValue('isOpen')
        },
        helpers: {
          close: _this.close,
          focusTrigger: _this.focusTrigger,
          open: _this.open
        }
      };
    }, _this.setTriggerRef = function (node) {
      _this.dropdownTrigger = node;
    }, _this.getContentProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var ignoreSubtitle = props.subtitle,
          ignoreTitle = props.title,
          ignoreTabIndex = props.tabIndex,
          restProps = _objectWithoutProperties(props, ['subtitle', 'title', 'tabIndex']);

      var _this$props = _this.props,
          modifiers = _this$props.modifiers,
          placement = _this$props.placement,
          wide = _this$props.wide;


      return _extends({}, restProps, {
        children: _this.renderMenu(),
        id: _this.getContentId(),
        modifiers: modifiers,
        placement: placement,
        wide: wide
      });
    }, _this.renderContent = function () {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          props = _ref2.props;

      return React.createElement(DropdownContent, _this.getContentProps(props));
    }, _this.getContentId = function () {
      return _this.id + '-content';
    }, _this.getMenuId = function () {
      return _this.id + '-menu';
    }, _this.getMenuItemId = function (index) {
      return _this.id + '-item-' + index;
    }, _this.getTriggerProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var isOpen = _this.getControllableValue('isOpen');
      var contentId = _this.getContentId();
      var children = _this.props.children;


      return _extends({}, isRenderProp(children) ? props : {}, isOpen ? {
        'aria-activedescendant': _this.getHighlightedItemId() || _this.getMenuId()
      } : {}, {
        'aria-describedby': contentId,
        'aria-haspopup': true,
        'aria-owns': contentId
      }, !isRenderProp(children) ? props : {}, {
        onKeyDown: composeEventHandlers(props.onKeyDown, _this.onTriggerKeyDown),
        onKeyUp: composeEventHandlers(props.onKeyUp, _this.onTriggerKeyUp)
      });
    }, _this.renderTrigger = function () {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          props = _ref3.props;

      var children = _this.props.children;


      if (isRenderProp(children)) {
        return children(_extends({}, _this.getStateAndHelpers(), {
          props: _this.getTriggerProps(props)
        }));
      }

      var child = Children.only(children);
      return cloneElement(child, _this.getTriggerProps(child.props));
    }, _this.getMenuProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _this$props2 = _this.props,
          data = _this$props2.data,
          itemKey = _this$props2.itemKey;


      return _extends({}, props, {
        id: _this.getMenuId(),
        itemKey: itemKey,
        data: data,
        highlightedIndex: _this.getControllableValue('highlightedIndex'),
        item: _this.renderItem,
        role: 'menu'
      });
    }, _this.renderMenu = function () {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          props = _ref4.props;

      var menu = _this.props.menu;


      if (isRenderProp(menu)) {
        return menu(_extends({}, _this.getStateAndHelpers(), {
          props: _this.getMenuProps(props)
        }));
      }

      return React.createElement(Menu, _this.getMenuProps(props));
    }, _this.getItemProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var highlightedIndex = _this.getControllableValue('highlightedIndex');
      var itemProps = props.props;
      var index = itemProps.index,
          item = itemProps.item;


      return _extends({}, itemProps, item, {
        'aria-disabled': _this.props.disabled || item.disabled,
        children: item.text,
        id: _this.getMenuItemId(index),
        isHighlighted: highlightedIndex === index,
        role: 'menuitem',
        tabIndex: null, // Unset tabIndex because we use arrow keys to navigate instead
        onClick: composeEventHandlers(item.onClick, _this.onItemClick)
      });
    }, _this.renderItem = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var item = _this.props.item;


      if (isRenderProp(item)) {
        return item(_extends({}, props, _this.getStateAndHelpers(), {
          props: _this.getItemProps(props)
        }));
      }

      return React.createElement(MenuItem, _this.getItemProps(props));
    }, _this.getHighlightedItemId = function () {
      var highlightedIndex = _this.getControllableValue('highlightedIndex');
      return highlightedIndex !== undefined && highlightedIndex !== null ? _this.getMenuItemId(highlightedIndex) : undefined;
    }, _this.hasHighlightedIndex = function () {
      return _this.getControllableValue('highlightedIndex') != undefined;
    }, _this.onTriggerKeyUp = function (event) {
      // Prevent Firefox from triggering Popover's onClick handler when
      // space key is used to activate trigger.
      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=501496
      event.key === ' ' && event.preventDefault();
    }, _this.onTriggerKeyDown = function (event) {
      var key = event.key;

      var isOpen = _this.getControllableValue('isOpen');

      if (key === 'ArrowUp') {
        event.preventDefault();
        _this.highlightPreviousItem();
        !isOpen && _this.open(event);
      } else if (key === 'ArrowDown') {
        event.preventDefault();
        _this.highlightNextItem();
        !isOpen && _this.open(event);
      } else if (key === 'Home' && isOpen) {
        event.preventDefault();
        _this.highlightItemAtIndex(0);
      } else if (key === 'End' && isOpen) {
        event.preventDefault();
        _this.highlightItemAtIndex(_this.items.length - 1);
      } else if (key === 'Enter' || key === ' ') {
        event.preventDefault();
        isOpen ? _this.hasHighlightedIndex() ? _this.clickHighlightedItem() : _this.close(event) : _this.open(event);
      } else if (isOpen) {
        _this.highlightItemMatchingKey(key);
      }
    }, _this.findItemMatchingKey = function (key) {
      _this.itemMatcher = _this.itemMatcher || new ItemMatcher();
      return _this.itemMatcher.findMatchingItem(_this.items, _this.getControllableValue('highlightedIndex'), key);
    }, _this.highlightItemMatchingKey = function (key) {
      var matchingItem = _this.findItemMatchingKey(key);
      matchingItem && _this.highlightItemAtIndex(_this.items.indexOf(matchingItem));
    }, _this.highlightItemAtIndex = function (index) {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState({ highlightedIndex: index }, _this.scrollHighlightedItemIntoViewIfNeeded);
      }
    }, _this.highlightNextItem = function () {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState(function (prevState) {
          return {
            highlightedIndex: prevState.highlightedIndex === null || prevState.highlightedIndex === undefined || prevState.highlightedIndex === _this.items.length - 1 ? 0 : prevState.highlightedIndex + 1
          };
        }, _this.scrollHighlightedItemIntoViewIfNeeded);
      }
    }, _this.highlightPreviousItem = function () {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState(function (prevState) {
          return {
            highlightedIndex: !prevState.highlightedIndex ? _this.items.length - 1 : prevState.highlightedIndex - 1
          };
        }, _this.scrollHighlightedItemIntoViewIfNeeded);
      }
    }, _this.scrollHighlightedItemIntoViewIfNeeded = function () {
      var highlightedItemNode = global.document.getElementById(_this.getHighlightedItemId());
      var boundary = findDOMNode(_this); // eslint-disable-line react/no-find-dom-node

      if (highlightedItemNode && boundary) {
        scrollIntoViewIfNeeded(highlightedItemNode, { boundary: boundary });
      }
    }, _this.clickHighlightedItem = function () {
      var highlightedItemNode = global.document.getElementById(_this.getHighlightedItemId());
      highlightedItemNode && highlightedItemNode.click();
    }, _this.open = function (event) {
      if (_this.isControlled('isOpen')) {
        _this.openActions(event);
      } else {
        _this.setState(function () {
          return { isOpen: true };
        }, function () {
          _this.openActions(event);
        });
      }
    }, _this.openActions = function (event) {
      _this.scrollHighlightedItemIntoViewIfNeeded();
      _this.props.onOpen && _this.props.onOpen(event);
    }, _this.close = function (event) {
      if (!_this.isControlled('highlightedIndex')) {
        _this.setState({ highlightedIndex: null });
      }

      if (_this.isControlled('isOpen')) {
        _this.closeActions(event);
      } else {
        _this.setState(function () {
          return { isOpen: false };
        }, function () {
          _this.closeActions(event);
        });
      }
    }, _this.closeActions = function (event) {
      _this.props.onClose && _this.props.onClose(event);
    }, _this.onItemClick = function (event) {
      _this.close(event);
      _this.focusTrigger();
    }, _this.focusTrigger = function () {
      var node = findDOMNode(_this.dropdownTrigger); // eslint-disable-line react/no-find-dom-node
      if (node && node.firstChild && node.firstChild instanceof HTMLElement) {
        node.firstChild.focus();
      }
    }, _this.isControlled = function (prop) {
      return _this.props.hasOwnProperty(prop);
    }, _this.getControllableValue = function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Dropdown, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          data = _props.data,
          ignoreItem = _props.item,
          ignoreMenu = _props.menu,
          restProps = _objectWithoutProperties(_props, ['children', 'data', 'item', 'menu']);

      var isOpen = this.getControllableValue('isOpen');

      var rootProps = _extends({}, restProps, {
        id: this.id,
        isOpen: isOpen,
        onClose: this.close,
        onOpen: this.open,
        content: this.renderContent,
        triggerRef: this.setTriggerRef
      });

      this.items = this.getItems(data);

      return React.createElement(
        Root,
        rootProps,
        isRenderProp(children) ? this.renderTrigger : this.renderTrigger()
      );
    }
  }]);

  return Dropdown;
}(Component);

Dropdown.defaultProps = {
  itemKey: 'text',
  placement: 'bottom-start'
};
export default Dropdown;
Dropdown.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Trigger for the Dropdown. Optionally provides custom rendering control.
   * See the [custom trigger example](/components/dropdown#custom-trigger)
   * and our [render props guide](/render-props).
   */
  children: PropTypes.oneOfType([function () {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  }, function () {
    return (typeof RenderFn === 'function' ? PropTypes.instanceOf(RenderFn) : PropTypes.any).apply(this, arguments);
  }]).isRequired,

  /**
   * Data from which the [Menu](/components/menu#data) will be constructed
   * (see [example](#data))
   */
  data: PropTypes.oneOfType([function () {
    return (typeof bpfrpt_proptype_Items === 'function' ? bpfrpt_proptype_Items : PropTypes.shape(bpfrpt_proptype_Items)).apply(this, arguments);
  }, function () {
    return (typeof bpfrpt_proptype_ItemGroups === 'function' ? bpfrpt_proptype_ItemGroups : PropTypes.shape(bpfrpt_proptype_ItemGroups)).apply(this, arguments);
  }]).isRequired,

  /**
   * Index of item to be highlighted upon initialization. Primarily for
   * use with uncontrolled components.
   */
  defaultHighlightedIndex: PropTypes.number,

  /**
   * Open the Dropdown upon initialization. Primarily for use with uncontrolled
   * components.
   */
  defaultIsOpen: PropTypes.bool,

  /** Disable the Dropdown */
  disabled: PropTypes.bool,

  /** Index of the highlighted item. For use with controlled components. */
  highlightedIndex: PropTypes.number,

  /** Id of the Dropdown */
  id: PropTypes.string,

  /**
   * Determines whether the Dropdown is open. For use with controlled
   * components.
   */
  isOpen: PropTypes.bool,

  /**
   * Provides custom rendering control for the items. See the
   * [custom item example](/components/dropdown#custom-item) and
   * our [render props guide](/render-props).
   */
  item: function item() {
    return (typeof RenderFn === 'function' ? PropTypes.instanceOf(RenderFn) : PropTypes.any).apply(this, arguments);
  },

  /**
   * Specifies a key in the item data that gives an item its unique identity.
   * See the [React docs](https://reactjs.org/docs/lists-and-keys.html#keys).
   */
  itemKey: PropTypes.string,

  /**
   * Provides custom rendering control for the menu. See the
   * [custom menu example](/components/dropdown#custom-menu) and
   * our [render props guide](/render-props).
   */
  menu: function menu() {
    return (typeof RenderFn === 'function' ? PropTypes.instanceOf(RenderFn) : PropTypes.any).apply(this, arguments);
  },

  /**
   * Plugins that are used to alter behavior. See
   * [PopperJS docs](https://popper.js.org/popper-documentation.html#modifiers)
   * for options.
   */
  modifiers: PropTypes.object,

  /** Called when Dropdown is closed */
  onClose: PropTypes.func,

  /** Called when Dropdown is opened */
  onOpen: PropTypes.func,

  /** Placement of the Dropdown menu */
  placement: PropTypes.oneOf(['bottom-end', 'bottom-start', 'left-end', 'left-start', 'right-end', 'right-start', 'top-end', 'top-start']),

  /**
   * Use a Portal to render the Dropdown menu to the body rather than as a
   * sibling to the trigger
   */
  usePortal: PropTypes.bool,

  /** Display a wider Dropdown menu */
  wide: PropTypes.bool
} : {};
import { bpfrpt_proptype_Items } from '../Menu/Menu';
import { bpfrpt_proptype_ItemGroups } from '../Menu/Menu';
import PropTypes from 'prop-types';