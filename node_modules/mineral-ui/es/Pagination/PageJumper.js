var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import { createStyledComponent } from '../styles';
import { FlexItem } from '../Flex';
import { FormField } from '../Form';
import TextInput from '../TextInput';

var styles = {
  root: function root(_ref) {
    var width = _ref.width;
    return { width: width };
  },
  input: {
    '& > input': {
      MozAppearance: 'textfield',

      '&::-webkit-inner-spin-button, &::-webkit-outer-spin-button': {
        WebkitAppearance: 'none',
        margin: 0
      }
    }
  }
};

var NumberInput = createStyledComponent(TextInput, styles.input);
var Root = createStyledComponent(FlexItem, styles.root);

var PageJumper = function (_PureComponent) {
  _inherits(PageJumper, _PureComponent);

  function PageJumper() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, PageJumper);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = PageJumper.__proto__ || Object.getPrototypeOf(PageJumper)).call.apply(_ref2, [this].concat(args))), _this), _this.handlePageJump = function (event) {
      var key = event.key,
          input = event.currentTarget,
          type = event.type;


      if (type === 'blur' || type === 'keydown' && key === 'Enter') {
        var _this$props = _this.props,
            _currentPage = _this$props.currentPage,
            _onPageChange = _this$props.onPageChange,
            _totalPages = _this$props.totalPages;

        var page = parseInt(input.value);
        if (page >= 1 && page <= _totalPages && page !== _currentPage) {
          _onPageChange(page);
        }
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(PageJumper, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          inputRef = _props.inputRef,
          messages = _props.messages,
          size = _props.size,
          restProps = _objectWithoutProperties(_props, ['inputRef', 'messages', 'size']);

      var rootProps = _extends({}, restProps);

      var label = messages.label,
          placeholder = messages.placeholder;

      var inputProps = {
        label: label,
        hideLabel: true,
        input: NumberInput,
        caption: label,
        inputRef: inputRef,
        onBlur: this.handlePageJump,
        onKeyDown: this.handlePageJump,
        pattern: '[0-9]*',
        placeholder: placeholder,
        size: size,
        type: 'number'
      };

      return React.createElement(
        Root,
        rootProps,
        React.createElement(FormField, inputProps)
      );
    }
  }]);

  return PageJumper;
}(PureComponent);

export default PageJumper;
PageJumper.propTypes = process.env.NODE_ENV !== "production" ? {
  "aria-label": PropTypes.string,
  currentPage: PropTypes.number.isRequired,
  inputRef: PropTypes.func.isRequired,
  messages: PropTypes.shape({
    label: PropTypes.string.isRequired,
    placeholder: PropTypes.string.isRequired,
    __exact__: function __exact__(values, prop, displayName) {
      var props = {
        label: true,
        placeholder: true
      };
      var extra = [];

      for (var k in values) {
        if (values.hasOwnProperty(k) && !props.hasOwnProperty(k)) {
          extra.push(k);
        }
      }

      if (extra.length > 0) {
        return new Error('Invalid additional prop(s) ' + JSON.stringify(extra));
      }
    }
  }).isRequired,
  onPageChange: PropTypes.func.isRequired,
  size: PropTypes.oneOf(['small', 'medium', 'large', 'jumbo']),
  totalPages: PropTypes.number.isRequired
} : {};
import PropTypes from 'prop-types';