var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import { createThemedComponent, mapComponentThemes } from '../themes';
import Choice, { componentTheme as choiceComponentTheme } from '../Choice/Choice';
import IconChecked from '../Icon/IconRadioButtonCheck';

export var componentTheme = function componentTheme(baseTheme) {
  return mapComponentThemes({
    name: 'Choice',
    theme: choiceComponentTheme(baseTheme)
  }, {
    name: 'Radio',
    theme: {
      RadioControl_borderRadius: '100%'
    }
  }, baseTheme);
};

var Root = createThemedComponent(Choice, function (_ref) {
  var baseTheme = _ref.theme;
  return mapComponentThemes({
    name: 'Radio',
    theme: componentTheme(baseTheme)
  }, {
    name: 'Choice',
    theme: {}
  }, baseTheme);
});

/**
 * Radio is an interactive control that can be turned on or off. Radios are most
 * often used in [groups](/components/radio-group), wherein only a single option may be
 * selected.
 */

var _ref2 = _jsx(IconChecked, {});

var Radio = function (_PureComponent) {
  _inherits(Radio, _PureComponent);

  function Radio() {
    _classCallCheck(this, Radio);

    return _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).apply(this, arguments));
  }

  _createClass(Radio, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          inputRef = _props.inputRef,
          otherRootProps = _props.rootProps,
          restProps = _objectWithoutProperties(_props, ['className', 'inputRef', 'rootProps']);

      var rootProps = _extends({
        iconChecked: _ref2,
        inputRef: function (_inputRef) {
          function inputRef(_x) {
            return _inputRef.apply(this, arguments);
          }

          inputRef.toString = function () {
            return _inputRef.toString();
          };

          return inputRef;
        }(function (ref) {
          if (inputRef) {
            inputRef(ref);
          }
        }),
        rootProps: _extends({
          className: className
        }, otherRootProps),
        type: 'radio'
      }, restProps);

      return React.createElement(Root, rootProps);
    }
  }]);

  return Radio;
}(PureComponent);

Radio.defaultProps = {
  labelPosition: 'end',
  size: 'large'
};
Radio.displayName = 'Radio';
export default Radio;
Radio.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Checked state of the radio button. Primarily for use with controlled
   * components. If this prop is specified, an `onChange` handler must also be
   * specified. See also: `defaultChecked`.
   */
  checked: PropTypes.bool,

  /** @Private CSS className */
  className: PropTypes.string,

  /**
   * Initial checked state of the radio button; primarily for use with
   * uncontrolled components
   */
  defaultChecked: PropTypes.bool,

  /** Disables the radio button */
  disabled: PropTypes.bool,

  /** Visually hide label, but keep available for [assistive technologies](https://webaccess.berkeley.edu/resources/assistive-technology) */
  hideLabel: PropTypes.bool,

  /** Ref for the radio button */
  inputRef: PropTypes.func,

  /** Indicates that the value of the input is invalid */
  invalid: PropTypes.bool,

  /** Maximize the distance between the label and the control */
  justify: PropTypes.bool,

  /** Label associated with the input element */
  label: PropTypes.oneOfType([PropTypes.string, function () {
    return (typeof React$Element === 'function' ? PropTypes.instanceOf(React$Element) : PropTypes.any).apply(this, arguments);
  }]).isRequired,

  /** Determines the position of the label relative to the control */
  labelPosition: PropTypes.oneOf(['start', 'end']),

  /** Used to uniquely define a group of radio buttons */
  name: PropTypes.string,

  /** Function called when a radio button is selected */
  onChange: PropTypes.func,

  /** Indicates that the user must select an option before submitting a form */
  required: PropTypes.bool,

  /** Props to be applied directly to the root element rather than the input */
  rootProps: PropTypes.object,

  /** Available sizes */
  size: PropTypes.oneOf(['small', 'medium', 'large', 'jumbo']),

  /** The value of the radio button */
  value: PropTypes.string
} : {};
import PropTypes from 'prop-types';