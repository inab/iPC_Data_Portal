var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { createStyledComponent, pxToEm } from '../styles';
import { generateId } from '../utils';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    Icon_fill: 'currentcolor',
    Icon_size_small: pxToEm(12),
    Icon_size_medium: pxToEm(16),
    Icon_size_large: pxToEm(20)
  }, baseTheme);
};

var iconStyles = function iconStyles(_ref) {
  var color = _ref.color,
      rtl = _ref.rtl,
      size = _ref.size,
      baseTheme = _ref.theme;

  var theme = componentTheme(baseTheme);

  return {
    color: color,
    fill: theme.Icon_fill,
    fontSize: theme.fontSize_base,
    height: theme['Icon_size_' + size] || size,
    transform: theme.direction === 'rtl' && rtl && 'scaleX(-1)',
    width: theme['Icon_size_' + size] || size
  };
};

var Root = createStyledComponent('svg', iconStyles, { rootEl: 'svg' });

/**
 * Icons use graphical symbols to represent an object or concept in your UI.
 * They can be used to aid comprehension of core actions in your app, and to provide feedback for user input.
 *
 * The Icon component allows you to use your own SVG to easily create an icon.
 *
 * In addition to the generic Icon component, Mineral UI provides a large number of
 * pre-built Icon components, available separately in the [mineral-ui-icons](https://www.npmjs.com/package/mineral-ui-icons) package.
 */

var Icon = function (_Component) {
  _inherits(Icon, _Component);

  function Icon() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, Icon);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Icon.__proto__ || Object.getPrototypeOf(Icon)).call.apply(_ref2, [this].concat(args))), _this), _this.id = 'icon-' + generateId(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Icon, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          title = _props.title,
          children = _props.children,
          restProps = _objectWithoutProperties(_props, ['title', 'children']);

      var titleElementId = 'icon-title-' + this.id;
      var rootProps = _extends({
        'aria-hidden': title ? null : true,
        'aria-labelledby': title && titleElementId,
        focusable: 'false',
        role: 'img',
        viewBox: '0 0 24 24'
      }, restProps);

      var titleProps = {
        id: titleElementId
      };

      return React.createElement(
        Root,
        rootProps,
        title && React.createElement(
          'title',
          titleProps,
          title
        ),
        children
      );
    }
  }]);

  return Icon;
}(Component);

Icon.displayName = 'Icon';
Icon.defaultProps = {
  size: 'medium'
};
export default Icon;
Icon.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Available sizes, including custom - e.g. '5em' or '20px' */
  size: PropTypes.oneOfType([PropTypes.oneOf(['small']), PropTypes.oneOf(['medium']), PropTypes.oneOf(['large']), PropTypes.string]),

  /** SVG content, required for the generic Icon component */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  },

  /** Fill color */
  color: PropTypes.string,

  /** Flip the Icon horizontally when used with RTL languages */
  rtl: PropTypes.bool,

  /** Alternative text */
  title: PropTypes.string
} : {};
import PropTypes from 'prop-types';