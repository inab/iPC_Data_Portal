var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React, { cloneElement } from 'react';
import { createStyledComponent } from '../styles';
import { findByType } from '../utils/children';
import DialogRow from './DialogRow';
import DialogTitle from './DialogTitle';

var Root = createStyledComponent(DialogRow, {
  display: 'flex',
  flex: '0 0 auto',
  justifyContent: 'space-between'
}, {
  displayName: 'DialogHeader',
  withProps: { element: 'header' }
});

/**
 * DialogHeader displays title content and an optional close button at the top
 * of the [Dialog](/components/dialog).
 */
export default function DialogHeader(props) {
  var children = props.children,
      closeButton = props.closeButton,
      titleProps = props.titleProps,
      rootProps = _objectWithoutProperties(props, ['children', 'closeButton', 'titleProps']);

  var title = findByType(children, DialogTitle);
  if (title) {
    title = cloneElement(title, _extends({}, titleProps, title.props));
  }

  return React.createElement(
    Root,
    rootProps,
    title || children,
    closeButton
  );
}
DialogHeader.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Rendered Dialog title; use of [DialogTitle](/components/dialog-title) is
   * recommended
   */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  },

  /** Rendered close button */
  closeButton: function closeButton() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  },

  /** @Private */
  titleProps: PropTypes.object
} : {};
import PropTypes from 'prop-types';