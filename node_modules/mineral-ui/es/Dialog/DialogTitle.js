var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { createStyledComponent, pxToEm } from '../styles';
import { withTheme } from '../themes';
import IconDanger from '../Icon/IconDanger';
import IconSuccess from '../Icon/IconSuccess';
import IconWarning from '../Icon/IconWarning';
import Text, { textWithThemeOverrides } from '../Text';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    DialogTitle_color: baseTheme.h4_color,
    DialogTitle_fontSize: baseTheme.h4_fontSize,
    DialogTitle_fontWeight: baseTheme.h4_fontWeight,

    DialogTitleIcon_margin: baseTheme.space_inline_sm,
    DialogTitleIcon_size: pxToEm(24)

  }, baseTheme);
};

var styles = {
  root: function root(_ref) {
    var baseTheme = _ref.theme,
        variant = _ref.variant;

    var theme = componentTheme(baseTheme);
    var marginProperty = theme.direction === 'rtl' ? 'marginLeft' : 'marginRight';

    return {
      color: variant ? theme['color_' + variant] : theme.DialogTitle_color,
      display: 'flex',

      '& > [role="img"]': _defineProperty({
        color: variant ? theme['icon_color_' + variant] : null,
        flex: '0 0 auto'
      }, marginProperty, theme.DialogTitleIcon_margin)
    };
  },
  titleContent: {
    color: 'inherit',
    flex: '1 1 auto'
  }
};

var Root = createStyledComponent('div', styles.root, {
  displayName: 'DialogTitle'
});
var Title = createStyledComponent(Text, styles.titleContent);

var variantIcons = {
  danger: IconDanger,
  success: IconSuccess,
  warning: IconWarning
};

/**
 * DialogTitle displays the title of Dialog.
 */
var DialogTitle = function DialogTitle(_ref2) {
  var id = _ref2.id,
      theme = _ref2.theme,
      variant = _ref2.variant,
      restProps = _objectWithoutProperties(_ref2, ['id', 'theme', 'variant']);

  var rootProps = _extends({
    variant: variant
  }, restProps);

  var TitleContent = function TitleContent(props) {
    return React.createElement(Title, _extends({ id: id }, props));
  };

  var title = textWithThemeOverrides(_extends({
    displayName: 'DialogTitle',
    textComponent: TitleContent,
    theme: theme
  }, restProps));

  var Icon = function Icon() {
    return null;
  };
  if (variant) {
    Icon = variantIcons[variant];
  }

  return React.createElement(
    Root,
    rootProps,
    variant && _jsx(Icon, {
      size: componentTheme(theme).DialogTitleIcon_size
    }),
    title
  );
};

DialogTitle.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Available styles */
  appearance: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),

  /** Rendered DialogTitle content */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },

  /** Available HTML elements; styles can be overridden with `appearance` */
  element: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),

  /** Id of the DialogTitle */
  id: PropTypes.string,

  /** @Private App theme; see [Theming](/theming) */
  theme: PropTypes.object.isRequired,

  /** Available variants */
  variant: PropTypes.oneOf(['danger', 'success', 'warning'])
} : {};
DialogTitle.defaultProps = {
  appearance: 'h4',
  element: 'h1'
};

export default withTheme(DialogTitle);
import PropTypes from 'prop-types';