var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { cloneElement } from 'react';
import Button from '../Button';
import { findAllByType } from '../utils/children';
import { createStyledComponent } from '../styles';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    DialogActionsItem_margin: baseTheme.space_stack_sm

  }, baseTheme);
};

var Root = createStyledComponent('div', function (_ref) {
  var baseTheme = _ref.theme;

  var theme = componentTheme(baseTheme);
  var marginProperty = theme.direction === 'rtl' ? 'marginLeft' : 'marginRight';

  return {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'flex-end',

    '& > *:not(:last-child)': _defineProperty({}, marginProperty, theme.DialogActionsItem_margin)
  };
}, {
  displayName: 'DialogActions'
});

/**
 * DialogActions renders primary and secondary actions inside
 * [Dialog](/components/dialog).
 */
export default function DialogActions(props) {
  var children = props.children,
      variant = props.variant,
      rootProps = _objectWithoutProperties(props, ['children', 'variant']);

  var actions = findAllByType(children, Button);
  var lastIndex = actions.length - 1;
  actions = actions.map(function (action, index) {
    var props = action.props;
    /* eslint-disable react/prop-types */

    return cloneElement(action, {
      key: index,
      minimal: props.minimal !== undefined ? props.minimal : index !== lastIndex,
      primary: props.primary !== undefined ? props.primary : index === lastIndex,
      variant: props.variant !== undefined ? props.variant : index === lastIndex ? variant : undefined
    });
    /* eslint-enable react/prop-types */
  });

  return React.createElement(
    Root,
    rootProps,
    actions
  );
}
DialogActions.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Rendered [Button(s)](/components/button) */
  children: PropTypes.oneOfType([function () {
    return (typeof React$Element === 'function' ? PropTypes.instanceOf(React$Element) : PropTypes.any).apply(this, arguments);
  }, PropTypes.arrayOf(function () {
    return (typeof React$Element === 'function' ? PropTypes.instanceOf(React$Element).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  })]),

  /** Available variants */
  variant: PropTypes.oneOf(['danger', 'success', 'warning'])
} : {};
import PropTypes from 'prop-types';