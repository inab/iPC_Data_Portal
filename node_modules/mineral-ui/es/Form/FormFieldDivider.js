var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React from 'react';
import { createStyledComponent } from '../styles';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    FormFieldDivider_borderColor: baseTheme.borderColor,
    FormFieldDivider_borderWidth: '1px',
    FormFieldDivider_margin: baseTheme.space_stack_sm

  }, baseTheme);
};

var Root = createStyledComponent('div', function (_ref) {
  var baseTheme = _ref.theme;

  var theme = componentTheme(baseTheme);

  return {
    backgroundColor: theme.FormFieldDivider_borderColor,
    height: theme.FormFieldDivider_borderWidth,
    margin: theme.FormFieldDivider_margin + ' 0'
  };
}, {
  displayName: 'FormFieldDivider'
});

/**
 * FormFieldDivider separates [FormFields](/components/form-field) to group form inputs.
 *
 * FormFieldDividers help your users grok forms with several inputs by hinting
 * at related fields, without explicitly adding a legend.
 */
export default function FormFieldDivider(props) {
  return React.createElement(Root, _extends({}, props, { role: 'separator' }));
}