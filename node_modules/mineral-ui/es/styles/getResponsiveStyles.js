var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * Converts an array of breakpoints (numbers and theme variable keys) to an
 * array of CSS media query strings.
 *
 * Input: [100, 200]
 *
 * Ouput: [
 *   '@media (min-width: 100px) and (max-width: 199px)',
 *   '@media (min-width: 200px)'
 * ]
 */
var getMediaQueries = function getMediaQueries(breakpoints, theme) {
  var queries = [];

  var getQueryWidth = function getQueryWidth(value) {
    return typeof value === 'number' ? value + 'px' : theme['breakpoint_' + value] || value;
  };

  for (var i = 0; i <= breakpoints.length; i++) {
    if (i === breakpoints.length) {
      queries.push('@media (min-width: ' + getQueryWidth(breakpoints[i - 1]) + ')');
    } else if (i > 0) {
      queries.push('@media (min-width: ' + getQueryWidth(breakpoints[i - 1]) + ') and (max-width: ' + (parseInt(getQueryWidth(breakpoints[i])) - 1) + 'px)');
    }
  }

  return queries;
};

/*
 * Given array that can contain null values and an index, checks if array[index]
 * is null. If it is, then it returns the next-most-previous non-null value in
 * the array until it gets to array[0], which it returns regardless.
 */

export var getPrevNonNull = function getPrevNonNull(values, index) {
  var value = Array.isArray(values) && values[index];
  if (index > 0) {
    return value === null ? getPrevNonNull(values, index - 1) : value;
  } else {
    return value;
  }
};

/*
 * Returns an object of style properties and their values (as interpreted
 * through mapValueToProperty, if provided). If an index is provided, then each
 * style property is an array, and this will use array[index] as the value.
 */
var getStyles = function getStyles(styleKeys, styles, mapValueToProperty, index) {
  return styleKeys.reduce(function (acc, property) {
    var indexInUse = index || 0;
    var styleValue = styles[property];
    var actualValue = Array.isArray(styleValue) ? getPrevNonNull(styleValue, indexInUse) : styleValue;
    acc[property] = mapValueToProperty ? mapValueToProperty(property, actualValue) : actualValue;

    return acc;
  }, {});
};

/*
 * Helper to potentially disperse an object of style properties (whole values
 * can be an array) across a provided (optional) array of breakpoints, which is
 * converted to an object with CSS media query string keys.
 *
 * See tests for input/output.
 */
export default function getResponsiveStyles(_ref) {
  var breakpoints = _ref.breakpoints,
      mapValueToProperty = _ref.mapValueToProperty,
      styles = _ref.styles,
      theme = _ref.theme;

  var styleKeys = Object.keys(styles);

  if (breakpoints) {
    var breakpointsLength = breakpoints.length;
    var mediaQueries = getMediaQueries(breakpoints, theme);
    var responsiveStyleKeys = styleKeys.filter(function (key) {
      var value = styles[key];
      if (value && Array.isArray(value)) {
        /*
         * If a style property is an array, that array must be one longer than
         * the breakpoints array. The first value is the no-breakpoint case, the
         * second value corresponds to the first breakpoint, etc...
         */
        if (value.length === breakpointsLength + 1) {
          return true;
        } else {
          // prettier-ignore
          throw new Error(key + '.length (' + value.length + ') must equal breakpoints.length + 1 (' + (breakpointsLength + 1) + ')');
        }
      }
    });
    var nonResponsiveStyleKeys = styleKeys.filter(function (key) {
      return !Array.isArray(styles[key]);
    });

    // Start with the non-responsive style properties and the first value of the
    // responsive properties.
    var result = _extends({}, getStyles(nonResponsiveStyleKeys, styles, mapValueToProperty), getStyles(responsiveStyleKeys, styles, mapValueToProperty, 0));

    return mediaQueries.reduce(function (acc, query, index) {
      acc[query] = _extends({}, getStyles(responsiveStyleKeys, styles, mapValueToProperty, index + 1));
      return acc;
    }, result);
  } else {
    return getStyles(styleKeys, styles, mapValueToProperty);
  }
}