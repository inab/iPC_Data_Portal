var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import styled from 'react-emotion';
import withPropsFn from 'recompose/withProps';
import componentStyleReset from './componentStyleReset';
import isValidProp from '../utils/isValidProp';

export default function createStyledComponent(element, styles) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var displayName = options.displayName,
      _options$filterProps = options.filterProps,
      filterProps = _options$filterProps === undefined ? [] : _options$filterProps,
      _options$forwardProps = options.forwardProps,
      forwardProps = _options$forwardProps === undefined ? [] : _options$forwardProps,
      includeStyleReset = options.includeStyleReset,
      rootEl = options.rootEl,
      withProps = options.withProps;

  var outStyles = function outStyles(props, context) {
    var componentStyles = typeof styles === 'function' ? styles(props, context) : styles;

    if (includeStyleReset) {
      var resetStyles = componentStyleReset(props);
      if (Array.isArray(componentStyles)) {
        componentStyles.unshift(resetStyles);
      } else {
        componentStyles = _extends({}, resetStyles, componentStyles);
      }
    }

    return componentStyles;
  };

  if (displayName && typeof element !== 'string') {
    element.displayName = displayName;
  }

  var styledComponent = styled(element, _extends({}, process.env.NODE_ENV !== 'production' && displayName ? { label: displayName } : undefined, {
    shouldForwardProp: function shouldForwardProp(prop) {
      /*
       * These props are filtered in Emotion's default implementation of
       * shouldForwardProp, which this overrides.
       */
      var filteredProps = ['innerRef', 'theme'].concat(filterProps);
      var isFiltered = filteredProps.indexOf(prop) !== -1;
      var isForwarded = forwardProps.indexOf(prop) !== -1;
      var tag = typeof element === 'string' ? element : rootEl;

      return !isFiltered && (isForwarded || isValidProp(tag, prop));
    }
  }))(outStyles);

  return withProps ? withPropsFn(withProps)(styledComponent) : styledComponent;
}