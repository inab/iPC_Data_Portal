var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { createStyledComponent } from '../styles';
import Checkbox from '../Checkbox';
import TableCell, { componentTheme as tableCellComponentTheme } from './TableCell';
import TableHeaderCell, { componentTheme as tableHeaderCellComponentTheme } from './TableHeaderCell';
import { TableContext } from './TableBase';

var PaddedCheckbox = createStyledComponent(Checkbox, function (_ref) {
  var density = _ref.density,
      isHeader = _ref.isHeader,
      baseTheme = _ref.theme;

  var theme = isHeader ? tableHeaderCellComponentTheme(baseTheme) : tableCellComponentTheme(baseTheme);
  var themePrefix = isHeader ? 'TableHeaderCell' : 'TableCell';
  var paddingVertical = density === 'spacious' ? theme[themePrefix + '_paddingVertical_spacious'] : theme[themePrefix + '_paddingVertical'];

  return {
    padding: paddingVertical + ' ' + theme[themePrefix + '_paddingHorizontal']
  };
}, {
  withProps: { hideLabel: true }
});

var TableSelectableCell = function (_Component) {
  _inherits(TableSelectableCell, _Component);

  function TableSelectableCell() {
    _classCallCheck(this, TableSelectableCell);

    return _possibleConstructorReturn(this, (TableSelectableCell.__proto__ || Object.getPrototypeOf(TableSelectableCell)).apply(this, arguments));
  }

  _createClass(TableSelectableCell, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return this.props.checked !== nextProps.checked || this.props.indeterminate !== nextProps.indeterminate;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _jsx(TableContext.Consumer, {}, void 0, function (_ref2) {
        var density = _ref2.density;

        var _props = _this2.props,
            checked = _props.checked,
            disabled = _props.disabled,
            indeterminate = _props.indeterminate,
            isHeader = _props.isHeader,
            label = _props.label,
            onChange = _props.onChange,
            restProps = _objectWithoutProperties(_props, ['checked', 'disabled', 'indeterminate', 'isHeader', 'label', 'onChange']);

        var Root = isHeader ? TableHeaderCell : TableCell;
        var rootProps = _extends({
          noPadding: true,
          width: isHeader ? 1 : undefined
        }, restProps);
        var checkboxProps = {
          checked: checked,
          disabled: disabled,
          density: density,
          hideLabel: true,
          indeterminate: indeterminate,
          isHeader: isHeader,
          label: label,
          onChange: onChange
        };

        return React.createElement(
          Root,
          rootProps,
          React.createElement(PaddedCheckbox, checkboxProps)
        );
      });
    }
  }]);

  return TableSelectableCell;
}(Component);

export default TableSelectableCell;
TableSelectableCell.propTypes = process.env.NODE_ENV !== "production" ? {
  checked: PropTypes.bool,
  disabled: PropTypes.bool,
  indeterminate: PropTypes.bool,
  isHeader: PropTypes.bool,
  label: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired
} : {};
import PropTypes from 'prop-types';