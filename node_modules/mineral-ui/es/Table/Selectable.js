var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'react';
import deepEqual from 'react-fast-compare';

var bpfrpt_proptype_SelectableType = {
  all: PropTypes.bool.isRequired,
  some: PropTypes.bool.isRequired,
  isSelected: PropTypes.func.isRequired,
  toggle: function toggle() {
    return (typeof Toggle === 'function' ? PropTypes.instanceOf(Toggle).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },
  toggleAll: function toggleAll() {
    return (typeof ToggleAll === 'function' ? PropTypes.instanceOf(ToggleAll).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  }
};
var bpfrpt_proptype_Toggle = PropTypes.func;
var bpfrpt_proptype_ToggleAll = PropTypes.func;

var Selectable = function (_Component) {
  _inherits(Selectable, _Component);

  function Selectable() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Selectable);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Selectable.__proto__ || Object.getPrototypeOf(Selectable)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      selected: _this.props.defaultSelected || []
    }, _this.toggle = function (item) {
      if (_this.isControlled('selected')) {
        _this.toggleActions(item);
      } else {
        _this.setState(function (prevState) {
          var selected = prevState.selected.slice(0);
          var index = selected.indexOf(item);
          var hasItem = index !== -1;
          hasItem ? selected.splice(index, 1) : selected.push(item);

          return {
            selected: selected
          };
        }, function () {
          _this.toggleActions(item);
        });
      }
    }, _this.toggleActions = function (item) {
      var onToggle = _this.props.onToggle;

      onToggle && onToggle(item, _this.isSelected(item));
    }, _this.toggleAll = function () {
      var none = _this.noneSelected();
      if (_this.isControlled('selected')) {
        _this.toggleAllActions(none);
      } else {
        _this.setState({
          selected: none ? _this.props.data : []
        }, function () {
          _this.toggleAllActions(none);
        });
      }
    }, _this.toggleAllActions = function (none) {
      var _this$props = _this.props,
          data = _this$props.data,
          onToggleAll = _this$props.onToggleAll;

      onToggleAll && onToggleAll(none ? data : [], none);
    }, _this.allSelected = function () {
      var selected = _this.getControllableValue('selected');
      return selected && selected.length === _this.props.data.length;
    }, _this.noneSelected = function () {
      var selected = _this.getControllableValue('selected');
      return selected && selected.length === 0;
    }, _this.someSelected = function () {
      var selected = _this.getControllableValue('selected');
      var all = _this.allSelected();
      return selected && selected.length > 0 && !all;
    }, _this.isSelected = function (item) {
      var selected = _this.getControllableValue('selected');
      return selected && selected.indexOf(item) !== -1;
    }, _this.isControlled = function (prop) {
      return _this.props.hasOwnProperty(prop);
    }, _this.getControllableValue = function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Selectable, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!deepEqual(this.props.selected, nextProps.selected)) {
        this.setState({
          selected: nextProps.selected
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var props = _extends({}, this.props, {
        selectable: _extends({}, this.state, {
          all: this.allSelected(),
          none: this.noneSelected(),
          some: this.someSelected(),
          isSelected: this.isSelected,
          toggle: this.toggle,
          toggleAll: this.toggleAll
        })
      });

      return this.props.children(props);
    }
  }]);

  return Selectable;
}(Component);

export default Selectable;
Selectable.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.func.isRequired,
  data: function data() {
    return (typeof Data === 'function' ? PropTypes.instanceOf(Data).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },
  defaultSelected: function defaultSelected() {
    return (typeof Data === 'function' ? PropTypes.instanceOf(Data) : PropTypes.any).apply(this, arguments);
  },
  onToggle: PropTypes.func,
  onToggleAll: PropTypes.func,
  selected: function selected() {
    return (typeof Data === 'function' ? PropTypes.instanceOf(Data) : PropTypes.any).apply(this, arguments);
  }
} : {};
import PropTypes from 'prop-types';