var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'react';

var bpfrpt_proptype_Sort = {
  key: PropTypes.string.isRequired,
  descending: PropTypes.bool
};
var bpfrpt_proptype_SortComparator = PropTypes.func;
var bpfrpt_proptype_Comparators = PropTypes.objectOf(PropTypes.func.isRequired);
var bpfrpt_proptype_SortableType = {
  data: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,
  sort: PropTypes.shape({
    key: PropTypes.string.isRequired,
    descending: PropTypes.bool
  }),
  sortFn: PropTypes.func.isRequired
};


var normalizedValue = function normalizedValue(value) {
  return value === null || value === undefined ? '' : typeof value === 'string' ? value.toUpperCase() : value;
};

export var defaultSortComparator = function defaultSortComparator(a, b, key) {
  var valueA = normalizedValue(a[key]);
  var valueB = normalizedValue(b[key]);

  return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;
};

var Sortable = function (_Component) {
  _inherits(Sortable, _Component);

  function Sortable() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Sortable);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Sortable.__proto__ || Object.getPrototypeOf(Sortable)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      sort: _this.props.defaultSort
    }, _this.sort = function (sort) {
      if (_this.isControlled('sort')) {
        _this.sortActions(sort);
      } else {
        _this.setState({
          sort: sort
        }, function () {
          _this.sortActions(sort);
        });
      }
    }, _this.sortActions = function (sort) {
      var onSort = _this.props.onSort;

      onSort && onSort(sort);
    }, _this.sortData = function () {
      var _this$props = _this.props,
          comparators = _this$props.comparators,
          data = _this$props.data;

      var sort = _this.getControllableValue('sort');

      var sortComparator = comparators && comparators[sort.key] || _this.props.sortComparator;

      return data.slice(0).sort(function (a, b) {
        var asc = sortComparator(a, b, sort.key);
        var desc = asc * -1;
        return sort.descending ? desc : asc;
      });
    }, _this.isControlled = function (prop) {
      return _this.props.hasOwnProperty(prop);
    }, _this.getControllableValue = function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Sortable, [{
    key: 'render',
    value: function render() {
      var sort = this.getControllableValue('sort');
      var isControlled = this.isControlled('sort');

      var props = _extends({}, this.props, {
        sortable: {
          data: sort && !isControlled ? this.sortData() : this.props.data,
          sort: sort,
          sortFn: this.sort
        }
      });

      return this.props.children(props);
    }
  }]);

  return Sortable;
}(Component);

Sortable.defaultProps = {
  sortComparator: defaultSortComparator
};
export default Sortable;
Sortable.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.func.isRequired,
  comparators: function comparators() {
    return (typeof Comparators === 'function' ? PropTypes.instanceOf(Comparators) : PropTypes.any).apply(this, arguments);
  },
  data: function data() {
    return (typeof Data === 'function' ? PropTypes.instanceOf(Data).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },
  defaultSort: function defaultSort() {
    return (typeof Sort === 'function' ? PropTypes.instanceOf(Sort) : PropTypes.any).apply(this, arguments);
  },
  onSort: PropTypes.func,
  sort: function sort() {
    return (typeof Sort === 'function' ? PropTypes.instanceOf(Sort) : PropTypes.any).apply(this, arguments);
  },
  sortComparator: function sortComparator() {
    return (typeof SortComparator === 'function' ? PropTypes.instanceOf(SortComparator).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  }
} : {};
import PropTypes from 'prop-types';