var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';

import { createStyledComponent } from '../styles';
import { withTheme } from '../themes';
import Text, { textWithThemeOverrides } from '../Text';

var bpfrpt_proptype_TitleAppearance = PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']);


export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    TableTitle_color: baseTheme.h4_color,
    TableTitle_fontSize: baseTheme.h4_fontSize,
    TableTitle_fontWeight: baseTheme.h4_fontWeight,
    TableTitle_marginBottom: baseTheme.space_stack_sm

  }, baseTheme);
};

var Root = createStyledComponent('caption', function (_ref) {
  var hide = _ref.hide,
      baseTheme = _ref.theme;

  var theme = componentTheme(baseTheme);

  return _extends({
    marginBottom: theme.TableTitle_marginBottom
  }, hide ? {
    border: '0',
    clip: 'rect(0 0 0 0)',
    clipPath: 'inset(50%)',
    height: '1px',
    margin: '-1px',
    overflow: 'hidden',
    padding: '0',
    position: 'absolute',
    whiteSpace: 'nowrap',
    width: '1px'
  } : undefined);
}, {
  displayName: 'Caption',
  rootEl: 'caption'
});

/**
 * TableTitle
 */
var TableTitle = function TableTitle(_ref2) {
  var hide = _ref2.hide,
      id = _ref2.id,
      theme = _ref2.theme,
      restProps = _objectWithoutProperties(_ref2, ['hide', 'id', 'theme']);

  var rootProps = _extends({
    hide: hide
  }, restProps);

  var TitleContent = function TitleContent(props) {
    return React.createElement(Text, _extends({ align: 'start', id: id }, props));
  };

  var title = textWithThemeOverrides(_extends({
    displayName: 'TableTitle',
    textComponent: TitleContent,
    theme: theme
  }, restProps));

  return React.createElement(
    Root,
    rootProps,
    title
  );
};

TableTitle.propTypes = process.env.NODE_ENV !== "production" ? {
  appearance: function appearance() {
    return (typeof TitleAppearance === 'function' ? PropTypes.instanceOf(TitleAppearance) : PropTypes.any).apply(this, arguments);
  },
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  },
  element: function element() {
    return (typeof TitleAppearance === 'function' ? PropTypes.instanceOf(TitleAppearance) : PropTypes.any).apply(this, arguments);
  },
  hide: PropTypes.bool,
  id: PropTypes.string.isRequired,
  theme: PropTypes.object.isRequired
} : {};
export default withTheme(TableTitle);
import PropTypes from 'prop-types';