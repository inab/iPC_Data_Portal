var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
import memoizeOne from 'memoize-one';
import { createStyledComponent, getNormalizedValue, pxToEm } from '../styles';
import { isRenderProp, rtlTextAlign } from '../utils';
import { TableContext } from './TableBase';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    TableCell_borderVertical: null,
    TableCell_borderVertical_highContrast: null,
    TableCell_fontSize: baseTheme.fontSize_ui,
    TableCell_paddingHorizontal: baseTheme.space_inline_md,
    TableCell_paddingVertical: baseTheme.space_stack_sm,
    TableCell_paddingVertical_spacious: pxToEm(12),
    TableCell_verticalAlign: 'top'

  }, baseTheme);
};

var styles = function styles(_ref) {
  var density = _ref.density,
      highContrast = _ref.highContrast,
      noPadding = _ref.noPadding,
      textAlign = _ref.textAlign,
      baseTheme = _ref.theme;

  var theme = componentTheme(baseTheme);
  var fontSize = theme.TableCell_fontSize;
  var rtl = theme.direction === 'rtl';
  var borderProperty = rtl ? 'borderRight' : 'borderLeft';
  var borderVertical = highContrast ? theme.TableCell_borderVertical_highContrast : theme.TableCell_borderVertical;
  var paddingHorizontal = getNormalizedValue(theme.TableCell_paddingHorizontal, fontSize);
  var paddingVertical = getNormalizedValue(density === 'spacious' ? theme.TableCell_paddingVertical_spacious : theme.TableCell_paddingVertical, fontSize);

  return {
    fontSize: fontSize,
    fontWeight: 'inherit',
    padding: noPadding ? 0 : paddingVertical + ' ' + paddingHorizontal,
    textAlign: rtlTextAlign(textAlign || 'start', theme.direction),
    verticalAlign: theme.TableCell_verticalAlign,

    '&:not(:first-child)': _defineProperty({}, borderProperty, borderVertical)
  };
};

var createRootNode = function createRootNode(props) {
  var defaultElement = TableCell.defaultProps.element;
  var element = props.element && props.element !== defaultElement ? props.element : props.primary ? 'th' : defaultElement;

  return createStyledComponent(element, styles, {
    displayName: 'TableCell',
    rootEl: element
  });
};

/**
 * TableCell
 */

var TableCell = function (_PureComponent) {
  _inherits(TableCell, _PureComponent);

  function TableCell() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, TableCell);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = TableCell.__proto__ || Object.getPrototypeOf(TableCell)).call.apply(_ref2, [this].concat(args))), _this), _this.getRootNode = memoizeOne(createRootNode, function (nextProps, prevProps) {
      return nextProps.element === prevProps.element && nextProps.primary === prevProps.primary;
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  // Must be an instance method to avoid affecting other instances memoized keys


  _createClass(TableCell, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _jsx(TableContext.Consumer, {}, void 0, function (tableContextProps) {
        var _props = _this2.props,
            primary = _props.primary,
            render = _props.render,
            restProps = _objectWithoutProperties(_props, ['primary', 'render']);

        var rootProps = _extends({}, tableContextProps, primary ? { scope: 'row' } : undefined, restProps);

        if (isRenderProp(render)) {
          return render({
            props: rootProps
          });
        }

        var Root = _this2.getRootNode(_this2.props);
        return React.createElement(Root, rootProps);
      });
    }
  }]);

  return TableCell;
}(PureComponent);

TableCell.defaultProps = {
  element: 'td'
};
export default TableCell;
TableCell.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Rendered content */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  },

  /** Column key */
  columnKey: PropTypes.string,

  /** @Private Rendered element */
  element: PropTypes.string,

  /** Remove padding */
  noPadding: PropTypes.bool,

  /** See Table's Column type */
  primary: PropTypes.bool,

  /** Row index */
  rowIndex: PropTypes.number,

  /**
   * Provides custom rendering control. See the
   * [custom cell example](/components/table/#custom-cell) and
   * our [render props guide](/render-props).
   */
  render: function render() {
    return (typeof bpfrpt_proptype_RenderFn === 'function' ? bpfrpt_proptype_RenderFn : PropTypes.shape(bpfrpt_proptype_RenderFn)).apply(this, arguments);
  },

  /** See Table's Column type */
  textAlign: PropTypes.oneOf(['start', 'end', 'center', 'justify'])
} : {};
import { bpfrpt_proptype_RenderFn } from './Table';
import PropTypes from 'prop-types';