var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import { createStyledComponent } from '../styles';
import { componentTheme as cardComponentTheme } from './Card';
import CardRow from './CardRow';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    CardBlock_fontSize: baseTheme.fontSize_ui,
    CardBlock_lineHeight: baseTheme.lineHeight_prose

  }, baseTheme);
};

var styles = {
  inner: function inner(props) {
    var theme = componentTheme(props.theme);

    return {
      fontSize: theme.CardBlock_fontSize,
      lineHeight: theme.CardBlock_lineHeight
    };
  },
  root: function root(props) {
    var theme = cardComponentTheme(props.theme);

    return {
      '&:last-child': {
        marginBottom: theme.CardRow_marginVerticalLast
      }
    };
  }
};

var Root = createStyledComponent(CardRow, styles.root, {
  displayName: 'CardBlock'
});
var Inner = createStyledComponent('div', styles.inner);

/**
 * CardBlock is used to normalize font sizes for content and to provide
 * consistent margins and padding.
 */
export default function CardBlock(props) {
  var children = props.children,
      restProps = _objectWithoutProperties(props, ['children']);

  return React.createElement(
    Root,
    restProps,
    _jsx(Inner, {}, void 0, children)
  );
}
CardBlock.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Contents of CardBlock */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  }
} : {};
import PropTypes from 'prop-types';