var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React, { Children, cloneElement } from 'react';
import { createStyledComponent, getNormalizedValue } from '../styles';
import Button from '../Button';
import { componentTheme as cardComponentTheme } from './Card';
import { componentTheme as cardBlockComponentTheme } from './CardBlock';
import CardRow from './CardRow';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    CardActionsAction_spaceInline: baseTheme.space_inline_sm

  }, baseTheme);
};

var styles = {
  action: function action(props) {
    var theme = _extends({}, componentTheme(props.theme), cardBlockComponentTheme(props.theme));
    var rtl = theme.direction === 'rtl';
    var fontSize = theme.CardBlock_fontSize;
    var actionsGap = getNormalizedValue(theme.CardActionsAction_spaceInline, fontSize);

    return {
      alignItems: 'center',
      display: 'flex',
      flex: '0 0 auto',
      fontSize: fontSize,
      marginBottom: actionsGap,
      marginLeft: rtl ? null : actionsGap,
      marginRight: rtl ? actionsGap : null
    };
  },
  root: function root(props) {
    var theme = _extends({}, componentTheme(props.theme), cardComponentTheme(props.theme));

    return {
      display: 'flex',
      flexWrap: 'wrap',
      justifyContent: 'flex-end',
      // We subtract `theme.CardActionsAction_spaceInline` because of the marginBottom on Action.
      marginBottom: parseFloat(theme.CardRow_marginVertical) - parseFloat(theme.CardActionsAction_spaceInline) + 'em'
    };
  }
};

var Root = createStyledComponent(CardRow, styles.root, {
  displayName: 'CardActions'
});
var Action = createStyledComponent('span', styles.action);

/**
 * The CardActions component allows you to lay out actions inside your [Card](/components/card).
 */
export default function CardActions(props) {
  var children = props.children,
      restProps = _objectWithoutProperties(props, ['children']);

  var actions = Children.map(children, function (child, index) {
    if (child.type === Button) {
      child = cloneElement(child, { size: 'medium' });
    }
    return _jsx(Action, {}, index, child);
  });

  return React.createElement(
    Root,
    restProps,
    actions
  );
}
CardActions.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Actions associated with Card; see [Button](/components/button), [Link](/components/link) */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node).isRequired : PropTypes.any.isRequired).apply(this, arguments);
  }
} : {};
import PropTypes from 'prop-types';