var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import { createStyledComponent, pxToEm } from '../styles';
import { createThemedComponent } from '../themes';
import Button from '../Button';
import IconExpandLess from '../Icon/IconExpandLess';
import IconExpandMore from '../Icon/IconExpandMore';
import { componentTheme as cardComponentTheme } from './Card';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    CardFooter_backgroundColor: baseTheme.well_backgroundColor,
    CardFooter_borderColor: baseTheme.borderColor,

    CardFooterRow_marginVertical: baseTheme.space_stack_sm,
    CardFooterRow_marginVerticalLast: baseTheme.space_stack_md,

    CardFooterTitle_color: baseTheme.h5_color,
    CardFooterTitle_fontSize: baseTheme.h5_fontSize,
    CardFooterTitle_fontWeight: baseTheme.h5_fontWeight

  }, baseTheme);
};

/*
 * CardFooter can have children like CardBlock and CardActions. When those
 * components are used directly inside Card they have a specific top/bottom
 * margin, but when they're used within CardFooter, they have a different
 * top/bottom margin. This technique accomplishes that without writing a bunch
 * of descendant selectors.
 */
var footerTheme = function footerTheme(_ref) {
  var theme = _ref.theme;
  return {
    CardRow_marginVertical: componentTheme(theme).CardFooterRow_marginVertical,
    CardRow_marginVerticalLast: componentTheme(theme).CardFooterRow_marginVerticalLast
  };
};

var styles = {
  root: function root(_ref2) {
    var variant = _ref2.variant,
        baseTheme = _ref2.theme;

    var theme = _extends({}, componentTheme(baseTheme), cardComponentTheme(baseTheme));

    if (variant) {
      theme = _extends({}, theme, {
        CardFooter_backgroundColor: theme['well_backgroundColor_' + variant],
        CardFooter_borderColor: theme['well_borderColor_' + variant]
      });
    }

    // [1] Making the footer overlap the Card border. The `calc` bit accounts
    //     for the paddingBottom on Card to prevent margin collapse.
    return {
      backgroundColor: theme.CardFooter_backgroundColor,
      border: '1px solid ' + theme.CardFooter_borderColor,
      borderRadius: '0 0 ' + theme.Card_borderRadius + ' ' + theme.Card_borderRadius,
      margin: '0 -1px calc(-1px - 0.01em) -1px', // [1]
      paddingBottom: '0.01em', // Necessary to prevent margin collapse of last-child
      paddingTop: '0.01em' // Necessary to prevent margin collapse of first-child
    };
  },
  title: function title(props) {
    var theme = _extends({}, componentTheme(props.theme), cardComponentTheme(props.theme));
    return {
      alignItems: 'flex-start',
      display: 'flex',
      marginBottom: theme.CardFooterRow_marginVertical,
      marginTop: theme.CardFooterRow_marginVertical,
      paddingLeft: theme.CardRow_paddingHorizontal,
      paddingRight: theme.CardRow_paddingHorizontal
    };
  },
  titleContent: function titleContent(props) {
    var theme = componentTheme(props.theme);

    return {
      color: theme.CardFooterTitle_color,
      flex: '1 1 auto',
      fontSize: theme.CardFooterTitle_fontSize,
      fontWeight: theme.CardFooterTitle_fontWeight,
      margin: 0
    };
  },
  /*
   * A large Button, even with zero'd padding, is still a bit too large in this
   * context. These styles allow the Button to shrink, but the Icon remains the
   * same size.
   */
  toggleButton: function toggleButton(_ref3) {
    var theme = _ref3.theme,
        variant = _ref3.variant;
    return _extends({
      flex: '0 0 auto',
      height: 'auto',
      minWidth: 0,
      overflow: 'hidden',
      padding: 0,
      transform: 'translateY(-' + pxToEm(1) + ')' }, variant ? {
      '&:hover': {
        backgroundColor: theme['backgroundColor_' + variant + '_hover']
      }
    } : undefined, {

      // Inner
      '& > span': {
        display: 'block',
        margin: '-' + pxToEm(4)
      },

      // Icon
      '& [role="img"]': {
        color: theme.icon_color
      }
    });
  }
};

var Root = createStyledComponent('div', styles.root, {
  displayName: 'CardFooter'
});
/*
 * We shouldn't just create a themed 'div', because it won't be able to apply
 * the provided theme to itself, which breaks the expectation of
 * createThemedComponent. So, we theme a simple functional component that
 * returns a 'div' instead.
 */
var Content = createThemedComponent(function (props) {
  return React.createElement('div', props);
}, footerTheme);
var Title = createStyledComponent('div', styles.title);
var TitleContent = createStyledComponent('h4', styles.titleContent);
var ToggleButton = createStyledComponent(Button, styles.toggleButton);

/**
 * CardFooter is used to append a visually distinct section to [Card](/components/card).
 */

var CardFooter = function (_Component) {
  _inherits(CardFooter, _Component);

  function CardFooter() {
    var _ref4;

    var _temp, _this, _ret;

    _classCallCheck(this, CardFooter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref4 = CardFooter.__proto__ || Object.getPrototypeOf(CardFooter)).call.apply(_ref4, [this].concat(args))), _this), _this.state = {
      isOpen: !_this.props.expandable || Boolean(_this.props.defaultIsOpen)
    }, _this.close = function (event) {
      if (_this.isControlled('isOpen')) {
        _this.closeActions(event);
      } else {
        _this.setState(function () {
          return { isOpen: false };
        }, function () {
          _this.closeActions(event);
        });
      }
    }, _this.closeActions = function (event) {
      _this.props.onClose && _this.props.onClose(event);
    }, _this.open = function (event) {
      if (_this.isControlled('isOpen')) {
        _this.openActions(event);
      } else {
        _this.setState(function () {
          return { isOpen: true };
        }, function () {
          _this.openActions(event);
        });
      }
    }, _this.openActions = function (event) {
      _this.props.onOpen && _this.props.onOpen(event);
    }, _this.toggleOpen = function (event) {
      var isOpen = _this.getControllableValue('isOpen');
      if (isOpen) {
        _this.close(event);
      } else {
        _this.open(event);
      }
    }, _this.isControlled = function (prop) {
      return _this.props.hasOwnProperty(prop);
    }, _this.getControllableValue = function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CardFooter, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          expandable = _props.expandable,
          title = _props.title,
          _props$triggerTitle = _props.triggerTitle,
          triggerTitle = _props$triggerTitle === undefined ? CardFooter.defaultProps.triggerTitle : _props$triggerTitle,
          variant = _props.variant,
          restProps = _objectWithoutProperties(_props, ['children', 'expandable', 'title', 'triggerTitle', 'variant']);

      var rootProps = _extends({
        variant: variant
      }, restProps);

      var isOpen = Boolean(this.getControllableValue('isOpen'));

      var ExpandCollapseIcon = isOpen ? IconExpandLess : IconExpandMore;

      return React.createElement(
        Root,
        rootProps,
        title && _jsx(Title, {}, void 0, _jsx(TitleContent, {}, void 0, title), expandable && _jsx(ToggleButton, {
          iconStart: _jsx(ExpandCollapseIcon, {
            title: triggerTitle(isOpen)
          }),
          minimal: true,
          onClick: this.toggleOpen,
          variant: variant
        })),
        isOpen && children && _jsx(Content, {}, void 0, children)
      );
    }
  }]);

  return CardFooter;
}(Component);

CardFooter.defaultProps = {
  triggerTitle: function triggerTitle(isOpen) {
    return isOpen ? 'Collapse contents' : 'Expand contents';
  }
};
export default CardFooter;
CardFooter.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Content of CardFooter */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  },

  /** If `expandable`, expand CardFooter immediately upon initialization */
  defaultIsOpen: PropTypes.bool,

  /** Display a trigger to expand/collapse CardFooter contents (`title` is required for this feature)*/
  expandable: PropTypes.bool,

  /** For use with controlled components, in which the app manages CardFooter state */
  isOpen: PropTypes.bool,

  /** If `expandable`, called when CardFooter is collapsed */
  onClose: PropTypes.func,

  /** If `expandable`, called when CardFooter is expanded */
  onOpen: PropTypes.func,

  /** Title of the footer */
  title: PropTypes.oneOfType([PropTypes.string, function () {
    return (typeof React$Element === 'function' ? PropTypes.instanceOf(React$Element) : PropTypes.any).apply(this, arguments);
  }]),

  /** If `expandable`, title for expand/collapse trigger */
  triggerTitle: PropTypes.func,

  /** Available variants */
  variant: PropTypes.oneOf(['danger', 'success', 'warning'])
} : {};
import PropTypes from 'prop-types';