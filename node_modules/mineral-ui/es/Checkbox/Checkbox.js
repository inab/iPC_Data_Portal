var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import { canUseDOM } from 'exenv';
import { createThemedComponent, mapComponentThemes } from '../themes';
import Choice, { componentTheme as choiceComponentTheme } from '../Choice/Choice';
import IconChecked from '../Icon/IconCheckBoxCheck';
import IconIndeterminate from '../Icon/IconCheckBoxIndeterminate';
import { composeEventHandlers } from '../utils';

export var componentTheme = function componentTheme(baseTheme) {
  return mapComponentThemes({
    name: 'Choice',
    theme: choiceComponentTheme(baseTheme)
  }, {
    name: 'Checkbox',
    theme: {}
  }, baseTheme);
};

var Root = createThemedComponent(Choice, function (_ref) {
  var baseTheme = _ref.theme;
  return mapComponentThemes({
    name: 'Checkbox',
    theme: componentTheme(baseTheme)
  }, {
    name: 'Choice',
    theme: {}
  }, baseTheme);
});

// Detect if browser triggers change event when click indeterminate checkbox
// IE/Edge/other? do not
var indeterminateClickTriggersChangeEvent = function () {
  var supportsOnChange = false;

  if (canUseDOM && process.env.NODE_ENV !== 'test') {
    var _document = document,
        body = _document.body;

    var checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.indeterminate = true;
    checkbox.setAttribute('hidden', 'true');
    checkbox.addEventListener('change', function () {
      supportsOnChange = true;
    });

    body && body.appendChild(checkbox);
    checkbox.click();
    body && body.removeChild(checkbox);
  }

  return supportsOnChange;
}();

/**
 * Checkbox is an interactive control that can be turned on or off. Checkboxes
 * are often used in [groups](/components/checkbox-group), wherein multiple options may be
 * selected.
 */

var _ref3 = _jsx(IconIndeterminate, {});

var _ref4 = _jsx(IconChecked, {});

var Checkbox = function (_PureComponent) {
  _inherits(Checkbox, _PureComponent);

  function Checkbox() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, Checkbox);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call.apply(_ref2, [this].concat(args))), _this), _this.setInputRef = function (node) {
      var inputRef = _this.props.inputRef;

      _this.input = node;
      inputRef && inputRef(node);
    }, _this.updateState = function (indeterminate, checked) {
      _this.indeterminate = indeterminate;
      if (_this.input) {
        _this.input.indeterminate = indeterminate;
        _this.input.checked = checked;
      }
    }, _this.handleClick = function (event) {
      var _this$props = _this.props,
          defaultIndeterminate = _this$props.defaultIndeterminate,
          indeterminate = _this$props.indeterminate,
          onChange = _this$props.onChange;


      if (defaultIndeterminate || indeterminate) {
        var nextIndeterminate = _this.isControlled('indeterminate') ? _this.getIndeterminateValue() : !_this.getIndeterminateValue();

        _this.updateState(nextIndeterminate, nextIndeterminate);

        if (!indeterminateClickTriggersChangeEvent) {
          onChange && onChange(event);
        }
      }
    }, _this.isControlled = function (prop) {
      return _this.props.hasOwnProperty(prop);
    }, _this.getIndeterminateValue = function () {
      return Boolean(_this.isControlled('indeterminate') ? _this.props.indeterminate : _this.indeterminate);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Checkbox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          checked = _props.checked,
          defaultChecked = _props.defaultChecked,
          defaultIndeterminate = _props.defaultIndeterminate,
          indeterminate = _props.indeterminate;


      var isIndeterminate = Boolean(indeterminate || defaultIndeterminate);
      var isChecked = Boolean(isIndeterminate || checked || defaultChecked);

      this.updateState(isIndeterminate, isChecked);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _props2 = this.props,
          checked = _props2.checked,
          indeterminate = _props2.indeterminate;


      if (prevProps.indeterminate !== indeterminate || prevProps.checked !== checked) {
        this.updateState(Boolean(indeterminate), Boolean(indeterminate || checked));
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          className = _props3.className,
          defaultIndeterminate = _props3.defaultIndeterminate,
          indeterminate = _props3.indeterminate,
          onClick = _props3.onClick,
          otherRootProps = _props3.rootProps,
          restProps = _objectWithoutProperties(_props3, ['className', 'defaultIndeterminate', 'indeterminate', 'onClick', 'rootProps']);

      var rootProps = _extends({
        iconChecked: defaultIndeterminate || indeterminate ? _ref3 : _ref4,
        inputRef: this.setInputRef,
        onClick: composeEventHandlers(onClick, this.handleClick),
        rootProps: _extends({
          className: className
        }, otherRootProps),
        type: 'checkbox'
      }, restProps);

      return React.createElement(Root, rootProps);
    }
  }]);

  return Checkbox;
}(PureComponent);

Checkbox.defaultProps = {
  labelPosition: 'end',
  size: 'large'
};
Checkbox.displayName = 'Checkbox';
export default Checkbox;
Checkbox.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Checked state of the checkbox. Primarily for use with controlled
   * components. If this prop is specified, an `onChange` handler must also be
   * specified. See also: `defaultChecked`.
   */
  checked: PropTypes.bool,

  /** @Private CSS className */
  className: PropTypes.string,

  /**
   * Initial checked state of the checkbox; primarily for use with
   * uncontrolled components
   */
  defaultChecked: PropTypes.bool,

  /**
   * Initial indeterminate state of the checkbox; primarily for use with
   * uncontrolled components
   */
  defaultIndeterminate: PropTypes.bool,

  /** Disables the checkbox */
  disabled: PropTypes.bool,

  /** Visually hide label, but keep available for [assistive technologies](https://webaccess.berkeley.edu/resources/assistive-technology) */
  hideLabel: PropTypes.bool,

  /**
   * Partially checked state. Primarily for use with controlled components.
   * If this prop is specified, an `onChange` handler must also be
   * specified. See also: `defaultIndeterminate`.
   */
  indeterminate: PropTypes.bool,

  /** Ref for the checkbox */
  inputRef: PropTypes.func,

  /** Indicates that the value of the input is invalid */
  invalid: PropTypes.bool,

  /** Maximize the distance between the label and the control */
  justify: PropTypes.bool,

  /** Label associated with the input element */
  label: PropTypes.oneOfType([PropTypes.string, function () {
    return (typeof React$Element === 'function' ? PropTypes.instanceOf(React$Element) : PropTypes.any).apply(this, arguments);
  }]).isRequired,

  /** Determines the position of the label relative to the control */
  labelPosition: PropTypes.oneOf(['start', 'end']),

  /** Used to uniquely define a group of checkboxes */
  name: PropTypes.string,

  /** Function called when a checkbox is selected */
  onChange: PropTypes.func,

  /** @Private Function called when a checkbox is clicked. */
  onClick: PropTypes.func,

  /** Indicates that the user must select an option before submitting a form */
  required: PropTypes.bool,

  /** Props to be applied directly to the root element rather than the input */
  rootProps: PropTypes.object,

  /** Available sizes */
  size: PropTypes.oneOf(['small', 'medium', 'large', 'jumbo']),

  /** The value of the checkbox */
  value: PropTypes.string
} : {};
import PropTypes from 'prop-types';