var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import { createThemedComponent, mapComponentThemes } from '../themes';
import ChoiceGroup, { componentTheme as choiceGroupComponentTheme } from '../Choice/ChoiceGroup';
import Checkbox from './Checkbox';

export var componentTheme = function componentTheme(baseTheme) {
  return mapComponentThemes({
    name: 'ChoiceGroup',
    theme: choiceGroupComponentTheme(baseTheme)
  }, {
    name: 'CheckboxGroup',
    theme: {}
  }, baseTheme);
};

var Root = createThemedComponent(ChoiceGroup, function (_ref) {
  var baseTheme = _ref.theme;
  return mapComponentThemes({
    name: 'CheckboxGroup',
    theme: componentTheme(baseTheme)
  }, {
    name: 'ChoiceGroup',
    theme: {}
  }, baseTheme);
});

/**
 * CheckboxGroup allows authors to construct a group of
 * [Checkboxes](/components/checkbox) and provides a simpler API than working with
 * Checkbox directly.
 *
 * CheckboxGroup allows users to select multiple options from a list.
 */
var CheckboxGroup = function CheckboxGroup(props) {
  var otherRootProps = props.rootProps,
      restProps = _objectWithoutProperties(props, ['rootProps']);

  var rootProps = _extends({
    rootProps: _extends({}, otherRootProps),
    input: Checkbox,
    type: 'checkbox'
  }, restProps);

  return React.createElement(Root, rootProps);
};

CheckboxGroup.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Array of values of the selected Checkboxes; primarily for use with
   * controlled components. If this prop is specified, an `onChange` handler
   * must also be specified. See also: `defaultChecked`.
   */
  checked: PropTypes.arrayOf(PropTypes.string.isRequired),

  /** Mineral [Checkbox](/components/checkbox) components */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  },

  /** Data used to contruct [Checkboxes](/components/checkbox), see [example](#data) */
  data: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.oneOfType([PropTypes.string, function () {
      return (typeof React$Element === 'function' ? PropTypes.instanceOf(React$Element) : PropTypes.any).apply(this, arguments);
    }]).isRequired,
    value: PropTypes.string.isRequired
  }).isRequired),

  /**
   * Array of values of the selected [Checkboxes](/components/checkbox); primarily for
   * use with uncontrolled components.
   */
  defaultChecked: PropTypes.arrayOf(PropTypes.string.isRequired),

  /** Display the choices inline horizontally rather than stacked vertically. */
  inline: PropTypes.bool,

  /** The name of the group */
  name: PropTypes.string.isRequired,

  /** Function called when a choice is selected */
  onChange: PropTypes.func,

  /** Props to be applied directly to the root element */
  rootProps: PropTypes.object
} : {};
CheckboxGroup.displayName = 'CheckboxGroup';

export default CheckboxGroup;
import PropTypes from 'prop-types';