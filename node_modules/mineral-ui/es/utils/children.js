var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

import { Children } from 'react';
import { toArray } from './collections';

var hasChildren = function hasChildren(child) {
  return Boolean(child && child.props && child.props.children);
};

var hasComplexChildren = function hasComplexChildren(child) {
  return hasChildren(child) && _typeof(child.props.children) === 'object';
};

export var findDeep = function findDeep(children, finder) {
  return Children.toArray(children).find(function (child) {
    return hasComplexChildren(child) ? findDeep(child.props.children, finder) : finder(child);
  });
};

export function findByType(children, type) {
  var match = void 0;

  Children.forEach(children, function (child) {
    if (!match && child && child.type === type) {
      match = child;
    }
  });

  return match;
}

export function findAllByType(children, type) {
  return Children.map(children, function (child) {
    if (child && child.type === type) {
      return child;
    }
  });
}

export function excludeByType(children, type) {
  var types = toArray(type);
  return Children.map(children, function (child) {
    if (types.indexOf(child.type) === -1) {
      return child;
    }
  });
}