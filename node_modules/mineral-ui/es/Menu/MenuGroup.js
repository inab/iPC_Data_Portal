var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import { createStyledComponent } from '../styles';
import MenuGroupTitle from './MenuGroupTitle';

export var componentTheme = function componentTheme(baseTheme) {
  return _extends({
    MenuGroup_margin: baseTheme.space_stack_sm

  }, baseTheme);
};

var Root = createStyledComponent('div', function (props) {
  var theme = componentTheme(props.theme);

  return {
    margin: theme.MenuGroup_margin + ' 0',
    '&:first-child,& + &': {
      marginTop: 0
    },

    '&:last-child': {
      marginBottom: 0
    }
  };
}, {
  displayName: 'MenuGroup'
});

/**
 * MenuGroups assemble [MenuItems](/components/menu-item) and can display a title.
 * Grouping Menu options provides context clues to users about related actions.
 * An optional title can be added to reinforce the intent of the grouping.
 */
export default function MenuGroup(props) {
  var children = props.children,
      title = props.title,
      restProps = _objectWithoutProperties(props, ['children', 'title']);

  return React.createElement(
    Root,
    restProps,
    title && _jsx(MenuGroupTitle, {}, void 0, title),
    children
  );
}
MenuGroup.propTypes = process.env.NODE_ENV !== "production" ? {
  /** [MenuItems](/components/menu-item) */
  children: function children() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  },

  /** Title for the group */
  title: function title() {
    return (typeof React$Node === 'function' ? PropTypes.instanceOf(React$Node) : PropTypes.any).apply(this, arguments);
  }
} : {};
import PropTypes from 'prop-types';