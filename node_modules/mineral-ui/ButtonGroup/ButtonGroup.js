'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentTheme = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('../styles');

var _collections = require('../utils/collections');

var _children2 = require('../utils/children');

var _composeEventHandlers = require('../utils/composeEventHandlers');

var _composeEventHandlers2 = _interopRequireDefault(_composeEventHandlers);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var componentTheme = exports.componentTheme = function componentTheme(baseTheme) {
  return _extends({
    ButtonGroupButton_backgroundColor_checkedDisabled: baseTheme.color_gray_40,
    ButtonGroupButton_border_disabled: 'solid 1px ' + baseTheme.borderColor,
    ButtonGroupButton_borderColor_active: baseTheme.borderColor_theme_active,
    ButtonGroupButton_borderColor_hover: baseTheme.borderColor_theme_hover,
    ButtonGroupButton_borderStartColor: baseTheme.borderColor,
    ButtonGroupButton_borderStartColor_checked: 'currentcolor',
    ButtonGroupButton_color_checkedDisabled: baseTheme.color_gray_60

  }, baseTheme);
};

var styles = function styles(_ref) {
  var _buttonNotFirs, _buttonNotLast;

  var fullWidth = _ref.fullWidth,
      baseTheme = _ref.theme,
      variant = _ref.variant;

  var theme = componentTheme(baseTheme);
  if (variant) {
    // prettier-ignore
    theme = _extends({}, theme, {
      ButtonGroupButton_borderColor_active: theme['borderColor_' + variant + '_active'],
      ButtonGroupButton_borderColor_hover: theme['borderColor_' + variant + '_hover']
    });
  }
  var _theme = theme,
      direction = _theme.direction;

  var rtl = direction === 'rtl';
  var start = rtl ? 'Right' : 'Left';
  var end = rtl ? 'Left' : 'Right';

  var borderStartColorProperty = 'border' + start + 'Color';
  var borderEndColorProperty = 'border' + end + 'Color';

  var borderBottomStartRadiusProperty = 'borderBottom' + start + 'Radius';
  var borderBottomEndRadiusProperty = 'borderBottom' + end + 'Radius';

  var borderTopStartRadiusProperty = 'borderTop' + start + 'Radius';
  var borderTopEndRadiusProperty = 'borderTop' + end + 'Radius';

  return {
    display: 'flex',

    '& button': {
      flexGrow: fullWidth && 1,

      '&:focus, &:active': {
        position: 'relative'
      },

      '&:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])': {
        borderColor: theme.ButtonGroupButton_borderColor_hover,

        '&[data-variant="danger"]': {
          borderColor: theme.borderColor_danger_hover
        },

        '&[data-variant="success"]': {
          borderColor: theme.borderColor_success_hover
        },

        '&[data-variant="warning"]': {
          borderColor: theme.borderColor_warning_hover
        }
      },

      '&:active:not(:focus):not([aria-checked=true]):not([disabled])': {
        borderColor: theme.ButtonGroupButton_borderColor_active,

        '&[data-variant="danger"]': {
          borderColor: theme.borderColor_danger_active
        },

        '&[data-variant="success"]': {
          borderColor: theme.borderColor_success_active
        },

        '&[data-variant="warning"]': {
          borderColor: theme.borderColor_warning_active
        }
      },

      '&[disabled]': {
        border: theme.ButtonGroupButton_border_disabled,

        '&[aria-checked=true]': {
          backgroundColor: theme.ButtonGroupButton_backgroundColor_checkedDisabled,
          color: theme.ButtonGroupButton_color_checkedDisabled,

          '&:hover': {
            color: theme.ButtonGroupButton_color_checkedDisabled
          }
        }
      }
    },

    // 1 - Buttons except the first
    // 2 - "Anything" except the first with a nested button
    '& > button:not(:first-child), & > *:not(:first-child) button': (_buttonNotFirs = {}, _defineProperty(_buttonNotFirs, borderBottomStartRadiusProperty, 0), _defineProperty(_buttonNotFirs, borderTopStartRadiusProperty, 0), _buttonNotFirs),

    // 1 - Buttons except the last
    // 2 - "Anything" except the last with a nested button
    '& > button:not(:last-child), & > *:not(:last-child) button': (_buttonNotLast = {}, _defineProperty(_buttonNotLast, borderBottomEndRadiusProperty, 0), _defineProperty(_buttonNotLast, borderTopEndRadiusProperty, 0), _defineProperty(_buttonNotLast, borderEndColorProperty, 'transparent'), _buttonNotLast),

    // 1 - Mode'd, unchecked buttons
    // 2 - Non-mode'd buttons
    // 3 - Non-mode'd "anything" with a nested button
    '& > [aria-checked=false], & > button:not([aria-checked]), & > *:not([aria-checked]) button': {
      '&:focus, & button:focus': {
        borderLeftColor: theme.ButtonGroupButton_borderStartColor,
        borderRightColor: theme.ButtonGroupButton_borderStartColor
      }
    },

    // Mode'd, unchecked, un-focused, un-hovered button immediately following a mode'd, unchecked button
    '& > [aria-checked=false] + [aria-checked=false]:not(:focus)': _defineProperty({}, borderStartColorProperty, theme.ButtonGroupButton_borderStartColor),

    // 1 - Mode'd, unchecked, un-focused buttons immediately following a mode'd, unchecked, non-disabled, hovered button
    // 2 - Non-mode'd, un-focused buttons immediately following a non-mode'd, non-disabled, hovered "anything"
    // 3 - Non-mode'd "anything" with a nested, un-focused button immediately following a non-mode'd, non-disabled, hovered "anything"
    '& > [aria-checked=false]:not([disabled]):hover + [aria-checked=false], & > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]), & > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button': {
      '&:not(:focus)': _defineProperty({}, borderStartColorProperty, 'transparent')
    },

    // Mode'd, unchecked, un-focused buttons immediately following a mode'd, checked button
    '& > [aria-checked=true] + [aria-checked=false]:not(:focus)': _defineProperty({}, borderStartColorProperty, 'transparent'),

    // Mode'd, checked, un-focused buttons immediately following a mode'd checked button
    '& > [aria-checked=true] + [aria-checked=true]:not(:focus)': _defineProperty({}, borderStartColorProperty, theme.ButtonGroupButton_borderStartColor_checked)
  };
};

// This check is intentionally loose. We cannot do a direct type comparison as
// we want to allow for styled buttons, themed buttons, and buttons inside of
// wrappers like Dropdowns, Popovers, and Tooltips.
// NOTE: We can rely on displayName, without fear of it being mangled, even in
// production, as long as it is set statically on each component
// https://github.com/facebook/react/issues/4915#issuecomment-335803765
var isButtonComponent = function isButtonComponent(element) {
  return (/Button/.test(element.type.displayName)
  );
};

var isItemAtIndexChecked = function isItemAtIndexChecked(checked, index) {
  var isSet = checked instanceof Set;
  var checkedSet = isSet ? checked : (0, _collections.setFromArray)((0, _collections.toArray)(checked));
  // $FlowFixMe - Refinement to Set not working
  return checkedSet.has(index);
};

var getDefaultCheckedState = function getDefaultCheckedState(props) {
  var _children = props.children,
      defaultChecked = props.defaultChecked,
      mode = props.mode;

  var children = _react.Children.toArray(_children);

  if (mode && defaultChecked !== undefined) {
    var defaultCheckedArray = (0, _collections.toArray)(defaultChecked);
    var _checked = mode === 'checkbox' ? defaultCheckedArray : [defaultCheckedArray[0]];
    return (0, _collections.setFromArray)(_checked);
  }

  var checked = new Set();

  children.forEach(function (child, index) {
    if (mode === 'checkbox') {
      if (child.props.defaultChecked) {
        checked.add(index);
      }
    } else if (mode === 'radio') {
      var selectedChild = children.find(function (child) {
        return child.props.defaultChecked;
      });
      var _index = children.indexOf(selectedChild);
      if (_index !== -1) {
        checked.add(_index);
      }
    }
  });

  return checked;
};

var Root = (0, _styles.createStyledComponent)('div', styles, {
  displayName: 'ButtonGroup',
  includeStyleReset: true
});

/**
 * ButtonGroup allows authors to stylistically group a set of related
 * [Buttons](/components/button) or construct a group of selectable Buttons that
 * behave like [Radios](/components/radio) or [Checkboxes](/components/checkbox).
 */

var ButtonGroup = function (_Component) {
  _inherits(ButtonGroup, _Component);

  function ButtonGroup() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, ButtonGroup);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = ButtonGroup.__proto__ || Object.getPrototypeOf(ButtonGroup)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
      checked: getDefaultCheckedState(_this.props)
    }, _this.handleClick = function (index, event) {
      var mode = _this.props.mode;


      if (!mode) {
        return _this.clickActions(event, false);
      }

      event.persist();
      var target = event.currentTarget;


      if (_this.isControlled('checked')) {
        _this.clickActions(event, true);
      } else {
        var changed = void 0;
        _this.setState(function (prevState) {
          var checked = void 0;
          if (mode === 'checkbox') {
            changed = true;
            checked = prevState.checked;
            var dataIndex = parseInt(target.getAttribute('data-index'));
            checked.has(dataIndex) ? checked.delete(dataIndex) : checked.add(dataIndex);
          } else {
            checked = (0, _collections.setFromArray)([index]);
            changed = [].concat(_toConsumableArray(prevState.checked))[0] !== [].concat(_toConsumableArray(checked))[0];
          }

          return { checked: checked };
        }, function () {
          _this.clickActions(event, changed);
        });
      }
    }, _this.clickActions = function (event, changed) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          onClick = _this$props.onClick;


      onClick && onClick(event);
      changed && onChange && onChange(event);
    }, _this.isControlled = function (prop) {
      return _this.props.hasOwnProperty(prop);
    }, _this.getControllableValue = function (key) {
      return _this.isControlled(key) ? _this.props[key] : _this.state[key];
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ButtonGroup, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          disabled = _props.disabled,
          fullWidth = _props.fullWidth,
          mode = _props.mode,
          ignoreOnClick = _props.onClick,
          size = _props.size,
          variant = _props.variant,
          restProps = _objectWithoutProperties(_props, ['children', 'disabled', 'fullWidth', 'mode', 'onClick', 'size', 'variant']);

      var rootProps = _extends({
        disabled: disabled,
        fullWidth: fullWidth,
        mode: mode,
        role: mode === 'radio' ? 'radiogroup' : 'group',
        variant: variant
      }, restProps);
      var checked = this.getControllableValue('checked');
      var buttons = _react.Children.map(children, function (child, index) {
        var isToggleable = Boolean(mode);
        var isChecked = isItemAtIndexChecked(checked, index);
        var isButton = isButtonComponent(child);
        var nestedButton = isButton ? undefined : // Must be able to find styled/themed buttons inside of triggers
        (0, _children2.findDeep)(child.props.children, isButtonComponent);

        return (0, _react.cloneElement)(child, _extends({}, isToggleable ? { 'aria-checked': isChecked } : undefined, nestedButton ? {
          children: (0, _react.cloneElement)(nestedButton, {
            'data-variant': nestedButton.props.variant,
            variant: nestedButton.props.variant || variant
          })
        } : undefined, {
          'data-index': index
        }, isButton ? { 'data-variant': child.props.variant } : undefined, {
          disabled: disabled || child.props.disabled,
          key: index
        }, isToggleable && isChecked ? { primary: true } : undefined, {
          onClick: (0, _composeEventHandlers2.default)(child.props.onClick, _this2.handleClick.bind(null, index))
        }, isToggleable ? { role: mode } : undefined, {
          size: size
        }, variant && isButton ? { variant: child.props.variant || variant } : undefined));
      });

      return _react2.default.createElement(
        Root,
        rootProps,
        buttons
      );
    }
  }]);

  return ButtonGroup;
}(_react.Component);

ButtonGroup.displayName = 'ButtonGroup';
exports.default = ButtonGroup;
ButtonGroup.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Accessible label */
  "aria-label": _propTypes2.default.string.isRequired,

  /**
   * Index or array of indices of the selected [Button(s)](/components/button).
   * Primarily for use with controlled components with a `mode` prop defined.
   * If this prop is specified, an `onClick` handler must also be specified.
   * See also: `defaultChecked`
   */
  checked: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.number.isRequired)]),

  /** Mineral [Button](/components/button) components */
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },

  /**
   * Index or array of indices of the selected [Button(s)](/components/button);
   * primarily for use with uncontrolled components with a `mode` prop defined.
   */
  defaultChecked: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.number.isRequired)]),

  /** Disable all [Button](/components/button) children */
  disabled: _propTypes2.default.bool,

  /** Stretch ButtonGroup to fill its container */
  fullWidth: _propTypes2.default.bool,

  /** Behavioral mode of [Button](/components/button) children: either
   [Radio](/components/radio) or [Checkbox](/components/checkbox) */
  mode: _propTypes2.default.oneOf(['checkbox', 'radio']),

  /** Called when a toggleable Button is selected */
  onChange: _propTypes2.default.func,

  /** Called with the click event */
  onClick: _propTypes2.default.func,

  /** Available sizes */
  size: _propTypes2.default.oneOf(['small', 'medium', 'large', 'jumbo']),

  /** Available variants */
  variant: _propTypes2.default.oneOf(['danger', 'success', 'warning'])
} : {};