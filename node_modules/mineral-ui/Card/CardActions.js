'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentTheme = undefined;

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = CardActions;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('../styles');

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Card = require('./Card');

var _CardBlock = require('./CardBlock');

var _CardRow = require('./CardRow');

var _CardRow2 = _interopRequireDefault(_CardRow);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var componentTheme = exports.componentTheme = function componentTheme(baseTheme) {
  return _extends({
    CardActionsAction_spaceInline: baseTheme.space_inline_sm

  }, baseTheme);
};

var styles = {
  action: function action(props) {
    var theme = _extends({}, componentTheme(props.theme), (0, _CardBlock.componentTheme)(props.theme));
    var rtl = theme.direction === 'rtl';
    var fontSize = theme.CardBlock_fontSize;
    var actionsGap = (0, _styles.getNormalizedValue)(theme.CardActionsAction_spaceInline, fontSize);

    return {
      alignItems: 'center',
      display: 'flex',
      flex: '0 0 auto',
      fontSize: fontSize,
      marginBottom: actionsGap,
      marginLeft: rtl ? null : actionsGap,
      marginRight: rtl ? actionsGap : null
    };
  },
  root: function root(props) {
    var theme = _extends({}, componentTheme(props.theme), (0, _Card.componentTheme)(props.theme));

    return {
      display: 'flex',
      flexWrap: 'wrap',
      justifyContent: 'flex-end',
      // We subtract `theme.CardActionsAction_spaceInline` because of the marginBottom on Action.
      marginBottom: parseFloat(theme.CardRow_marginVertical) - parseFloat(theme.CardActionsAction_spaceInline) + 'em'
    };
  }
};

var Root = (0, _styles.createStyledComponent)(_CardRow2.default, styles.root, {
  displayName: 'CardActions'
});
var Action = (0, _styles.createStyledComponent)('span', styles.action);

/**
 * The CardActions component allows you to lay out actions inside your [Card](/components/card).
 */
function CardActions(props) {
  var children = props.children,
      restProps = _objectWithoutProperties(props, ['children']);

  var actions = _react.Children.map(children, function (child, index) {
    if (child.type === _Button2.default) {
      child = (0, _react.cloneElement)(child, { size: 'medium' });
    }
    return _jsx(Action, {}, index, child);
  });

  return _react2.default.createElement(
    Root,
    restProps,
    actions
  );
}
CardActions.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Actions associated with Card; see [Button](/components/button), [Link](/components/link) */
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  }
} : {};