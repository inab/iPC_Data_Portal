'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findDeep = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.findByType = findByType;
exports.findAllByType = findAllByType;
exports.excludeByType = excludeByType;

var _react = require('react');

var _collections = require('./collections');

var hasChildren = function hasChildren(child) {
  return Boolean(child && child.props && child.props.children);
};

var hasComplexChildren = function hasComplexChildren(child) {
  return hasChildren(child) && _typeof(child.props.children) === 'object';
};

var findDeep = exports.findDeep = function findDeep(children, finder) {
  return _react.Children.toArray(children).find(function (child) {
    return hasComplexChildren(child) ? findDeep(child.props.children, finder) : finder(child);
  });
};

function findByType(children, type) {
  var match = void 0;

  _react.Children.forEach(children, function (child) {
    if (!match && child && child.type === type) {
      match = child;
    }
  });

  return match;
}

function findAllByType(children, type) {
  return _react.Children.map(children, function (child) {
    if (child && child.type === type) {
      return child;
    }
  });
}

function excludeByType(children, type) {
  var types = (0, _collections.toArray)(type);
  return _react.Children.map(children, function (child) {
    if (types.indexOf(child.type) === -1) {
      return child;
    }
  });
}