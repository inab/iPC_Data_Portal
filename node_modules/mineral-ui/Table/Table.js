'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactFastCompare = require('react-fast-compare');

var _reactFastCompare2 = _interopRequireDefault(_reactFastCompare);

var _Selectable = require('./Selectable');

var _Selectable2 = _interopRequireDefault(_Selectable);

var _Sortable = require('./Sortable');

var _Sortable2 = _interopRequireDefault(_Sortable);

var _TableBase = require('./TableBase');

var _TableBase2 = _interopRequireDefault(_TableBase);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var bpfrpt_proptype_Columns = _propTypes2.default.arrayOf(function () {
  return (typeof Column === 'function' ? _propTypes2.default.instanceOf(Column).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
});

var bpfrpt_proptype_Column = {
  cell: function cell() {
    return (typeof RenderFn === 'function' ? _propTypes2.default.instanceOf(RenderFn) : _propTypes2.default.any).apply(this, arguments);
  },
  content: function content() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  headerCell: function headerCell() {
    return (typeof RenderFn === 'function' ? _propTypes2.default.instanceOf(RenderFn) : _propTypes2.default.any).apply(this, arguments);
  },
  key: _propTypes2.default.string.isRequired,
  label: _propTypes2.default.string,
  maxWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  minWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  primary: _propTypes2.default.bool,
  sortable: _propTypes2.default.bool,
  sortComparator: _propTypes2.default.func,
  textAlign: _propTypes2.default.oneOf(['start', 'end', 'center', 'justify']),
  width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
};

// See demos/Table/index.js additionalTypes for descriptions

var bpfrpt_proptype_Messages = {
  deselectAllRows: _propTypes2.default.string.isRequired,
  deselectRow: _propTypes2.default.string.isRequired,
  selectAllRows: _propTypes2.default.string.isRequired,
  selectRow: _propTypes2.default.string.isRequired,
  selectedRows: _propTypes2.default.string.isRequired,
  sortColumnAscending: _propTypes2.default.string.isRequired,
  sortColumnDescending: _propTypes2.default.string.isRequired
};
var bpfrpt_proptype_Row = _propTypes2.default.object;

var bpfrpt_proptype_Rows = _propTypes2.default.arrayOf(_propTypes2.default.object.isRequired);

var bpfrpt_proptype_RenderFn = _propTypes2.default.func;
var bpfrpt_proptype_RenderProps = {
  props: _propTypes2.default.object.isRequired,
  state: _propTypes2.default.object,
  helpers: _propTypes2.default.object
};


var generateColumns = function generateColumns(data) {
  return data[0] ? Object.keys(data[0]).reduce(function (acc, value) {
    acc.push({ content: value, key: value });
    return acc;
  }, []) : [];
};

var getColumns = function getColumns(_ref) {
  var columns = _ref.columns,
      data = _ref.data;
  return columns || generateColumns(data);
};

var getComparators = function getComparators(_ref2) {
  var columns = _ref2.columns;

  var comparators = columns && columns.reduce(function (acc, column) {
    var key = column.key,
        sortComparator = column.sortComparator;

    if (sortComparator) {
      acc[key] = sortComparator;
    }
    return acc;
  }, {});

  return comparators && Object.keys(comparators).length ? comparators : undefined;
};

var getSelectableRows = function getSelectableRows(rows) {
  return rows.filter(function (row) {
    return !row.disabled;
  });
};

var getSortable = function getSortable(_ref3) {
  var columns = _ref3.columns,
      defaultSort = _ref3.defaultSort,
      sort = _ref3.sort,
      sortable = _ref3.sortable;
  return Boolean(defaultSort || sort || sortable || columns && columns.some(function (column) {
    return column.sortable;
  }));
};

/**
 * Table displays structured data with sortable columns and selectable rows.
 */

var Table = function (_Component) {
  _inherits(Table, _Component);

  function Table() {
    var _ref4;

    var _temp, _this, _ret;

    _classCallCheck(this, Table);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref4 = Table.__proto__ || Object.getPrototypeOf(Table)).call.apply(_ref4, [this].concat(args))), _this), _this.columns = getColumns(_this.props), _this.comparators = getComparators(_this.props), _this.selectableRows = getSelectableRows(_this.props.data), _this.sortable = getSortable(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Table, [{
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps) {
      var columnsChanged = !(0, _reactFastCompare2.default)(this.props.columns, nextProps.columns);
      var dataChanged = !(0, _reactFastCompare2.default)(this.props.data, nextProps.data);

      if (columnsChanged || !this.props.columns && dataChanged) {
        this.columns = getColumns(nextProps);
      }

      if (columnsChanged) {
        this.sortable = getSortable(nextProps);
        this.comparators = getComparators(nextProps);
      }

      if (dataChanged) {
        this.selectableRows = getSelectableRows(nextProps.data);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          defaultSelectedRows = _props.defaultSelectedRows,
          onToggleRow = _props.onToggleRow,
          onToggleAllRows = _props.onToggleAllRows,
          selectable = _props.selectable,
          selectedRows = _props.selectedRows,
          sortable = _props.sortable,
          restProps = _objectWithoutProperties(_props, ['defaultSelectedRows', 'onToggleRow', 'onToggleAllRows', 'selectable', 'selectedRows', 'sortable']);

      var rootProps = _extends({}, restProps, {
        columns: this.columns,
        comparators: this.comparators
      }, defaultSelectedRows ? { defaultSelected: getSelectableRows(defaultSelectedRows) } : undefined, onToggleRow ? { onToggle: onToggleRow } : undefined, onToggleAllRows ? { onToggleAll: onToggleAllRows } : undefined, selectedRows ? { selected: selectedRows } : undefined, selectable ? { selectableRows: this.selectableRows } : undefined, this.sortable ? { sortable: sortable } : undefined);

      if (selectable && this.sortable) {
        return _react2.default.createElement(SelectableSortableTable, rootProps);
      } else if (selectable) {
        return _react2.default.createElement(SelectableTable, rootProps);
      } else if (this.sortable) {
        return _react2.default.createElement(SortableTable, rootProps);
      } else {
        var ignoreSortable = rootProps.sortable,
            rootPropsWithoutSortable = _objectWithoutProperties(rootProps, ['sortable']);

        return _react2.default.createElement(_TableBase2.default, rootPropsWithoutSortable);
      }
    }
  }]);

  return Table;
}(_react.Component);

/* eslint-disable react/prop-types */


Table.defaultProps = {
  density: 'compact',
  messages: {
    deselectAllRows: 'Deselect all rows',
    deselectRow: 'Deselect row',
    selectAllRows: 'Select all rows',
    selectedRows: 'Selected rows',
    selectRow: 'Select row',
    sortColumnAscending: 'Sort column in ascending order',
    sortColumnDescending: 'Sort column in descending order'
  },
  titleElement: 'h4'
};
Table.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Column definitions ([see Column type for details](#Column-type)) */
  columns: function columns() {
    return (typeof Columns === 'function' ? _propTypes2.default.instanceOf(Columns) : _propTypes2.default.any).apply(this, arguments);
  },

  /** Row data ([see example for more details](#basic)) */
  data: function data() {
    return (typeof Rows === 'function' ? _propTypes2.default.instanceOf(Rows).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },

  /** Initially selected rows when `selectable = true`. Primarily for use with uncontrolled components. */
  defaultSelectedRows: _propTypes2.default.arrayOf(_propTypes2.default.object.isRequired),

  /** Initially sorted column & direction. Primarily for use with uncontrolled components. */
  defaultSort: _propTypes2.default.shape({
    key: _propTypes2.default.string.isRequired,
    descending: _propTypes2.default.bool
  }),

  /** Amount of vertical space in Table's cells */
  density: _propTypes2.default.oneOf(['compact', 'spacious']),

  /** Visually hide Table's header, but keep available for [assistive technologies](https://webaccess.berkeley.edu/resources/assistive-technology) */
  hideHeader: _propTypes2.default.bool,

  /** Visually hide Table's title, but keep available for [assistive technologies](https://webaccess.berkeley.edu/resources/assistive-technology) */
  hideTitle: _propTypes2.default.bool,

  /** Render Table with high-contrast styles */
  highContrast: _propTypes2.default.bool,

  /**
   * Various messages and labels used by Table
   * ([see example for more details](#rtl))
   */
  messages: function messages() {
    return (typeof Messages === 'function' ? _propTypes2.default.instanceOf(Messages) : _propTypes2.default.any).apply(this, arguments);
  },

  /** Called when data is sorted */
  onSort: _propTypes2.default.func,

  /** Called when all rows are selected/deselected */
  onToggleAllRows: _propTypes2.default.func,

  /** Called when a single row is selected/deselected */
  onToggleRow: _propTypes2.default.func,

  /**
   * Specifies a key in the row data that gives a row its unique identity.
   * See the [React docs](https://reactjs.org/docs/lists-and-keys.html#keys).
   */
  rowKey: _propTypes2.default.string,

  /**
   * Determines the scrolling behavior when Table's width exceeds that of its
   * container
   */
  scrollable: _propTypes2.default.bool,

  /**
   * Enable the user to select rows. Prepends a column for checkboxes to your
   * Table.
   */
  selectable: _propTypes2.default.bool,

  /**
   * Selected rows when `selectable = true`. Primarily for use with controlled
   * components.
   */
  selectedRows: _propTypes2.default.arrayOf(_propTypes2.default.object.isRequired),

  /**
   * Sorted column & direction
   */
  sort: _propTypes2.default.shape({
    key: _propTypes2.default.string.isRequired,
    descending: _propTypes2.default.bool
  }),

  /** Enable the user to sort all columns */
  sortable: _propTypes2.default.bool,

  /**
   * The [sort comparator function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Description)
   * used by sortable columns
   */
  sortComparator: _propTypes2.default.func,

  /** Renders Table with alternating row stripes */
  striped: _propTypes2.default.bool,

  /** Title for Table */
  title: function title() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },

  /** Available title styles (see [Text](/components/text)) */
  titleAppearance: _propTypes2.default.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),

  /** Available title elements (see [Text](/components/text)) */
  titleElement: _propTypes2.default.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
} : {};
var SelectableTable = function SelectableTable(props) {
  var data = props.data,
      selectableRows = props.selectableRows;

  return _react2.default.createElement(
    _Selectable2.default,
    _extends({}, props, { data: selectableRows }),
    function (props) {
      return _react2.default.createElement(_TableBase2.default, _extends({}, props, { data: data }));
    }
  );
};

var SortableTable = function SortableTable(props) {
  return _react2.default.createElement(
    _Sortable2.default,
    _extends({}, props, { isSortable: props.sortable }),
    function (_ref5) {
      var props = _objectWithoutProperties(_ref5, []);

      return _react2.default.createElement(_TableBase2.default, _extends({}, props, { data: props.sortable.data }));
    }
  );
};

var SelectableSortableTable = function SelectableSortableTable(props) {
  var data = props.data,
      selectableRows = props.selectableRows;

  return _react2.default.createElement(
    _Selectable2.default,
    _extends({}, props, { data: selectableRows }),
    function (props) {
      return _react2.default.createElement(SortableTable, _extends({}, props, { data: data }));
    }
  );
};
/* eslint-enable */

exports.default = Table;