'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentTheme = undefined;

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

var _EventListener = require('../EventListener');

var _EventListener2 = _interopRequireDefault(_EventListener);

var _styles = require('../styles');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// prettier-ignore
var componentTheme = exports.componentTheme = function componentTheme(baseTheme) {
  return _extends({
    OverflowContainer_outline_focus: '1px solid ' + baseTheme.borderColor_theme_focus

  }, baseTheme);
};

var Root = (0, _styles.createStyledComponent)('div', function (_ref) {
  var hideScrollbars = _ref.hideScrollbars,
      scrollX = _ref.scrollX,
      scrollY = _ref.scrollY,
      baseTheme = _ref.theme;

  var theme = componentTheme(baseTheme);

  return _extends({
    outline: 0,
    overflowX: scrollX ? 'auto' : undefined,
    overflowY: scrollY ? 'auto' : undefined,
    // Prevent flash of focus style when interacting with children
    transition: 'outline 0.1s 0.25s',

    '&:focus': {
      outline: theme.OverflowContainer_outline_focus
    }

  }, hideScrollbars ? {
    overflow: '-moz-scrollbars-none',
    '-ms-overflow-style': 'none',

    '&::-webkit-scrollbar': {
      display: 'none'
    }
  } : undefined);
}, {
  displayName: 'OverflowContainer'
});

/**
 * OverflowContainer
 */

var OverflowContainer = function (_Component) {
  _inherits(OverflowContainer, _Component);

  function OverflowContainer() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, OverflowContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = OverflowContainer.__proto__ || Object.getPrototypeOf(OverflowContainer)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
      scrollable: false
    }, _this.setContainerRef = function (node) {
      var containerRef = _this.props.containerRef;


      _this.container = node;
      containerRef && containerRef(node);
    }, _this.updateScrollable = function () {
      var _this$props = _this.props,
          scrollX = _this$props.scrollX,
          scrollY = _this$props.scrollY;

      var node = _this.container;
      if (node) {
        var _scrollable = Boolean(scrollX && node.scrollWidth > node.clientWidth || scrollY && node.scrollHeight > node.clientHeight);
        if (_this.state.scrollable !== _scrollable) {
          _this.setState({
            scrollable: _scrollable
          });
        }
      }
    }, _this.handleWindowResize = (0, _lodash2.default)(_this.updateScrollable, 500), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(OverflowContainer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateScrollable();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.updateScrollable();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          tabIndex = _props.tabIndex,
          restProps = _objectWithoutProperties(_props, ['children', 'tabIndex']);

      var rootProps = _extends({
        innerRef: this.setContainerRef
      }, tabIndex !== undefined ? { tabIndex: tabIndex } : this.state.scrollable ? { tabIndex: 0 } : undefined, restProps);
      return _react2.default.createElement(
        Root,
        rootProps,
        children,
        _jsx(_EventListener2.default, {
          listeners: [{
            target: 'window',
            event: 'resize',
            handler: this.handleWindowResize
          }]
        })
      );
    }
  }]);

  return OverflowContainer;
}(_react.Component);

exports.default = OverflowContainer;
OverflowContainer.propTypes = process.env.NODE_ENV !== "production" ? {
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node) : _propTypes2.default.any).apply(this, arguments);
  },
  containerRef: _propTypes2.default.func,
  hideScrollbars: _propTypes2.default.bool,
  scrollX: _propTypes2.default.bool,
  scrollY: _propTypes2.default.bool,
  tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
} : {};