'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentTheme = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('../styles');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var componentTheme = exports.componentTheme = function componentTheme(baseTheme) {
  var colors = {
    background: baseTheme.input_backgroundColor,
    regular: baseTheme.borderColor,
    checked: baseTheme.borderColor_theme,
    focus: baseTheme.borderColor_theme_focus,
    hover: baseTheme.borderColor_theme_hover
  };

  // prettier-ignore
  return _extends({
    ChoiceControl_backgroundColor: colors.background,
    ChoiceControl_backgroundColor_checked: colors.checked,
    ChoiceControl_backgroundColor_checkedHover: colors.hover,
    ChoiceControl_borderColor: colors.regular,
    ChoiceControl_borderColor_hover: colors.hover,
    ChoiceControl_borderColor_checked: colors.checked,
    ChoiceControl_borderColor_checkedHover: colors.hover,
    ChoiceControl_borderRadius: baseTheme.borderRadius_1,
    ChoiceControl_boxShadow_focus: '0 0 0 1px ' + baseTheme.boxShadow_focusInner + ', 0 0 0 2px ' + colors.focus,
    ChoiceControl_size: (0, _styles.pxToEm)(16),
    ChoiceControl_size_jumbo: (0, _styles.pxToEm)(24),

    ChoiceText_color: baseTheme.color,
    ChoiceText_fontSize: baseTheme.fontSize_ui,
    ChoiceText_fontSize_small: (0, _styles.pxToEm)(12),
    ChoiceText_marginHorizontal: baseTheme.space_inline_md

  }, baseTheme);
};

var styles = {
  control: function control(_ref) {
    var disabled = _ref.disabled,
        size = _ref.size,
        baseTheme = _ref.theme;

    var theme = componentTheme(baseTheme);
    var backgroundColor = disabled ? theme.input_backgroundColor_disabled : theme.ChoiceControl_backgroundColor;
    var controlDimensions = size === 'jumbo' ? theme.ChoiceControl_size_jumbo : theme.ChoiceControl_size;

    return {
      alignItems: 'center',
      backgroundColor: backgroundColor,
      borderColor: theme.ChoiceControl_borderColor,
      borderRadius: theme.ChoiceControl_borderRadius,
      borderStyle: 'solid',
      borderWidth: '1px',
      color: backgroundColor,
      content: '""',
      display: 'flex',
      flex: 'none',
      height: controlDimensions,
      justifyContent: 'center',
      width: controlDimensions,

      '& svg': {
        fill: 'currentColor',
        height: 'auto',
        width: '100%'
      }
    };
  },
  input: function input(_ref2) {
    var baseTheme = _ref2.theme;

    var theme = componentTheme(baseTheme);

    return _extends({
      border: '0',
      clip: 'rect(0 0 0 0)',
      clipPath: 'inset(50%)',
      height: '1px',
      margin: '-1px',
      overflow: 'hidden',
      padding: '0',
      position: 'absolute',
      whiteSpace: 'nowrap',
      width: '1px'
    }, {

      '&:focus': {
        '& + span': {
          boxShadow: theme.ChoiceControl_boxShadow_focus
        }
      },

      '&:checked,&[type="checkbox"]:indeterminate': {
        '& + span': {
          backgroundColor: theme.ChoiceControl_backgroundColor_checked,
          borderColor: theme.ChoiceControl_borderColor_checked
        },

        '&:hover': {
          '& + span': {
            backgroundColor: theme.ChoiceControl_backgroundColor_checkedHover,
            borderColor: theme.ChoiceControl_borderColor_checkedHover
          }
        },

        '&:disabled': {
          '& + span': {
            backgroundColor: theme.ChoiceControl_borderColor,
            borderColor: theme.ChoiceControl_borderColor,
            color: theme.ChoiceControl_backgroundColor
          }
        }
      }
    });
  },
  root: function root(_ref3) {
    var disabled = _ref3.disabled,
        justify = _ref3.justify,
        hideLabel = _ref3.hideLabel,
        labelPosition = _ref3.labelPosition,
        size = _ref3.size,
        baseTheme = _ref3.theme;

    var theme = componentTheme(baseTheme);
    var labelPositionStart = labelPosition === 'start';

    return _extends({
      alignItems: 'center',
      cursor: !disabled && 'pointer',
      display: 'flex',
      position: 'relative',
      flexDirection: labelPositionStart && 'row-reverse',
      justifyContent: !justify && (labelPositionStart ? 'flex-end' : 'flex-start'),

      '&:hover': {
        '& span:first-of-type': {
          borderColor: !disabled && theme.ChoiceControl_borderColor_hover
        }
      }

    }, hideLabel ? {
      '&::after': {
        content: "'.'",
        fontSize: size === 'small' ? theme.ChoiceText_fontSize_small : theme.ChoiceText_fontSize,
        visibility: 'hidden',
        width: '0.1px'
      }
    } : undefined);
  },
  text: function text(_ref4) {
    var disabled = _ref4.disabled,
        hideLabel = _ref4.hideLabel,
        justify = _ref4.justify,
        labelPosition = _ref4.labelPosition,
        size = _ref4.size,
        baseTheme = _ref4.theme;

    var theme = componentTheme(baseTheme);
    var rtl = theme.direction === 'rtl';
    var labelPositionStart = labelPosition === 'start';
    var fontSize = size === 'small' ? theme.ChoiceText_fontSize_small : theme.ChoiceText_fontSize;
    var marginHorizontal = justify ? 'auto' : (0, _styles.getNormalizedValue)(theme.ChoiceText_marginHorizontal, fontSize);

    return _extends({
      color: disabled ? theme.color_disabled : theme.ChoiceText_color,
      fontSize: fontSize,
      marginLeft: labelPositionStart && !rtl || !labelPositionStart && rtl ? 0 : marginHorizontal,
      marginRight: labelPositionStart && !rtl || !labelPositionStart && rtl ? marginHorizontal : 0

    }, hideLabel ? {
      border: '0',
      clip: 'rect(0 0 0 0)',
      clipPath: 'inset(50%)',
      height: '1px',
      margin: '-1px',
      overflow: 'hidden',
      padding: '0',
      position: 'absolute',
      whiteSpace: 'nowrap',
      width: '1px'
    } : undefined);
  }
};

var Root = (0, _styles.createStyledComponent)('label', styles.root, {
  displayName: 'Choice',
  includeStyleReset: true
});
var Input = (0, _styles.createStyledComponent)('input', styles.input, {
  rootEl: 'input'
});
var Text = (0, _styles.createStyledComponent)('span', styles.text, {
  displayName: 'Text'
});
var Control = (0, _styles.createStyledComponent)('span', styles.control, {
  displayName: 'Control'
});

/**
 * Choice is base renderer for Checkbox and Radio.
 */

var Choice = function (_PureComponent) {
  _inherits(Choice, _PureComponent);

  function Choice() {
    _classCallCheck(this, Choice);

    return _possibleConstructorReturn(this, (Choice.__proto__ || Object.getPrototypeOf(Choice)).apply(this, arguments));
  }

  _createClass(Choice, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          disabled = _props.disabled,
          hideLabel = _props.hideLabel,
          iconChecked = _props.iconChecked,
          inputRef = _props.inputRef,
          invalid = _props.invalid,
          justify = _props.justify,
          label = _props.label,
          labelPosition = _props.labelPosition,
          required = _props.required,
          otherRootProps = _props.rootProps,
          size = _props.size,
          restProps = _objectWithoutProperties(_props, ['className', 'disabled', 'hideLabel', 'iconChecked', 'inputRef', 'invalid', 'justify', 'label', 'labelPosition', 'required', 'rootProps', 'size']);

      var rootProps = _extends({
        className: className,
        disabled: disabled,
        justify: justify,
        hideLabel: hideLabel,
        labelPosition: labelPosition,
        size: size
      }, otherRootProps);

      var inputProps = _extends({
        'aria-invalid': invalid,
        'aria-required': required,
        disabled: disabled,
        innerRef: function innerRef(ref) {
          if (inputRef) {
            inputRef(ref);
          }
        },
        required: required,
        size: size
      }, restProps);

      var controlProps = {
        disabled: disabled,
        size: size
      };

      var textProps = {
        disabled: disabled,
        hideLabel: hideLabel,
        justify: justify,
        labelPosition: labelPosition,
        size: size
      };

      return _react2.default.createElement(
        Root,
        rootProps,
        _react2.default.createElement(Input, inputProps),
        _react2.default.createElement(
          Control,
          controlProps,
          iconChecked
        ),
        _react2.default.createElement(
          Text,
          textProps,
          label
        )
      );
    }
  }]);

  return Choice;
}(_react.PureComponent);

Choice.defaultProps = {
  labelPosition: 'end',
  size: 'large'
};
exports.default = Choice;
Choice.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Checked state of the input. Primarily for use with controlled
   * components. If this prop is specified, an `onChange` handler must also be
   * specified. See also: `defaultChecked`.
   */
  checked: _propTypes2.default.bool,

  /** @Private CSS className */
  className: _propTypes2.default.string,

  /** Determines the position of the label relative to the control */
  labelPosition: _propTypes2.default.oneOf(['start', 'end']),

  /**
   * Initial checked state of the input; primarily for use with
   * uncontrolled components
   */
  defaultChecked: _propTypes2.default.bool,

  /** Disables the input */
  disabled: _propTypes2.default.bool,

  /** Maximize the distance between the label and the control */
  justify: _propTypes2.default.bool,

  /** The checked icon */
  iconChecked: function iconChecked() {
    return (typeof React$Element === 'function' ? _propTypes2.default.instanceOf(React$Element).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },

  /** Ref for the input */
  inputRef: _propTypes2.default.func,

  /** Props to be applied directly to the root element rather than the input */
  rootProps: _propTypes2.default.object,

  /** Visually hide label, but keep available for [assistive technologies](https://webaccess.berkeley.edu/resources/assistive-technology) */
  hideLabel: _propTypes2.default.bool,

  /** Indicates that the value of the input is invalid */
  invalid: _propTypes2.default.bool,

  /** Label associated with the input element */
  label: _propTypes2.default.oneOfType([_propTypes2.default.string, function () {
    return (typeof React$Element === 'function' ? _propTypes2.default.instanceOf(React$Element) : _propTypes2.default.any).apply(this, arguments);
  }]).isRequired,

  /** Used to uniquely define a group of inputs */
  name: _propTypes2.default.string,

  /** Function called when a input is selected */
  onChange: _propTypes2.default.func,

  /** Indicates that the user must select an option before submitting a form */
  required: _propTypes2.default.bool,

  /** Available sizes */
  size: _propTypes2.default.oneOf(['small', 'medium', 'large', 'jumbo']),

  /** The type of HTML input */
  type: _propTypes2.default.oneOf(['checkbox', 'radio']).isRequired,

  /** The value of the input */
  value: _propTypes2.default.string
} : {};