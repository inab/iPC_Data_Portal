'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentTheme = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('../styles');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var componentTheme = exports.componentTheme = function componentTheme(baseTheme) {
  return _extends({
    ChoiceGroupControl_marginHorizontal_inline: baseTheme.space_inline_xl,
    ChoiceGroupControl_marginVertical_stacked: baseTheme.space_stack_md,
    ChoiceGroupControl_marginVertical_stackedJumbo: baseTheme.space_stack_lg

  }, baseTheme);
};

var styles = {
  root: function root(_ref) {
    var inline = _ref.inline,
        size = _ref.size,
        baseTheme = _ref.theme;

    var theme = componentTheme(baseTheme);

    return {
      display: 'flex',
      flexDirection: inline ? 'row' : 'column',

      '& > *:not(:last-child)': {
        marginBottom: inline ? 0 : size === 'jumbo' ? theme.ChoiceGroupControl_marginVertical_stackedJumbo : theme.ChoiceGroupControl_marginVertical_stacked,
        marginRight: inline ? theme.ChoiceGroupControl_marginHorizontal_inline : undefined
      }
    };
  }
};

var Root = (0, _styles.createStyledComponent)('div', styles.root, {
  displayName: 'ChoiceGroup',
  includeStyleReset: true
});

var isChecked = function isChecked(checked, value) {
  return Array.isArray(checked) ? checked.indexOf(value) !== -1 : checked === value;
};

/**
 * ChoiceGroup allows users to construct a group
 * of [Radios](/components/radio) or [Checkboxes](/components/checkbox) and
 * provides a simpler API than working with Radio or Checkbox directly.
 */
var ChoiceGroup = function ChoiceGroup(props) {
  var checked = props.checked,
      children = props.children,
      data = props.data,
      defaultChecked = props.defaultChecked,
      inline = props.inline,
      input = props.input,
      invalid = props.invalid,
      required = props.required,
      role = props.role,
      otherRootProps = props.rootProps,
      size = props.size,
      type = props.type,
      restProps = _objectWithoutProperties(props, ['checked', 'children', 'data', 'defaultChecked', 'inline', 'input', 'invalid', 'required', 'role', 'rootProps', 'size', 'type']);

  var rootProps = _extends({
    inline: inline,
    role: role,
    size: size
  }, otherRootProps);

  var inputProps = function inputProps(value, index) {
    var inputData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    return _extends({
      checked: checked !== undefined ? isChecked(checked, value) : undefined,
      defaultChecked: defaultChecked !== undefined ? isChecked(defaultChecked, value) : undefined,
      invalid: type === 'checkbox' ? undefined : invalid,
      key: index,
      required: type === 'checkbox' ? undefined : required,
      size: size
    }, restProps, inputData);
  };

  var inputs = null;
  if (data && input) {
    inputs = data.map(function (inputData, index) {
      return (0, _react.createElement)(input, inputProps(inputData.value, index, inputData));
    });
  } else if (children) {
    inputs = _react.Children.map(children, function (child, index) {
      return (0, _react.cloneElement)(child, inputProps(child.props.value, index));
    });
  }

  return _react2.default.createElement(
    Root,
    rootProps,
    inputs
  );
};

ChoiceGroup.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Value of the selected Radio or an array of values of the selected
   * Checkboxes. Primarily for use with controlled components. If this prop is
   * specified, an `onChange` handler must also be specified. See also:
   * `defaultChecked`.
   */
  checked: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string.isRequired)]),

  /** Mineral Checkbox or Radio components */
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node) : _propTypes2.default.any).apply(this, arguments);
  },

  /** Data used to contruct Checkboxes, see [example](#data) */
  data: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, function () {
      return (typeof React$Element === 'function' ? _propTypes2.default.instanceOf(React$Element) : _propTypes2.default.any).apply(this, arguments);
    }]).isRequired,
    value: _propTypes2.default.string.isRequired
  }).isRequired),

  /**
   * Value of the selected Radio or an array of values of the selected
   * Checkboxes.  Primarily for use with uncontrolled components.
   */
  defaultChecked: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string.isRequired)]),

  /** Display the choices inline horizontally rather than stacked vertically. */
  inline: _propTypes2.default.bool,

  /**
   * The class of input to render. e.g. Checkbox or Radio
   */
  input: function input() {
    return (typeof React$ComponentType === 'function' ? _propTypes2.default.instanceOf(React$ComponentType) : _propTypes2.default.any).apply(this, arguments);
  },

  /**
   * @Private Indicates that the field is invalid. Not forwarded for checkboxes.
   */
  invalid: _propTypes2.default.bool,

  /** The name of the group */
  name: _propTypes2.default.string.isRequired,

  /** Function called when a choice is selected */
  onChange: _propTypes2.default.func,

  /**
   * @Private Indicates that the field is required. Not forwarded for checkboxes.
   */
  required: _propTypes2.default.bool,

  /** The aria role for the group */
  role: _propTypes2.default.string,

  /** Props to be applied directly to the root element */
  rootProps: _propTypes2.default.object,

  /** @Private Available sizes */
  size: _propTypes2.default.oneOf(['small', 'medium', 'large', 'jumbo']),

  /** Type of component that will be rendered */
  type: _propTypes2.default.oneOf(['checkbox', 'radio']).isRequired
} : {};
ChoiceGroup.defaultProps = {
  role: 'group',
  size: 'large'
};

exports.default = ChoiceGroup;