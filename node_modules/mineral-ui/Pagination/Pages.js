'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('../styles');

var _themes = require('../themes');

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _IconChevronLeft = require('../Icon/IconChevronLeft');

var _IconChevronLeft2 = _interopRequireDefault(_IconChevronLeft);

var _IconChevronRight = require('../Icon/IconChevronRight');

var _IconChevronRight2 = _interopRequireDefault(_IconChevronRight);

var _Flex = require('../Flex');

var _Pagination = require('./Pagination');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Container = (0, _styles.createStyledComponent)(_Flex.FlexItem, function (_ref) {
  var baseTheme = _ref.theme;

  var theme = (0, _Pagination.componentTheme)(baseTheme);
  var rtl = theme.direction === 'rtl';
  var middleMargin = rtl ? 'marginLeft' : 'marginRight';
  return {
    '& > button, & > span': {
      '&:not(:last-child)': _defineProperty({}, middleMargin, theme.Pagination_gutterWidth)
    }
  };
});

var firstPage = function firstPage(current) {
  return current === 1;
};
var lastPage = function lastPage(current, total) {
  return current === total;
};
var isDisabled = function isDisabled(next, currentPage, totalPages) {
  return next ? lastPage(currentPage, totalPages) : firstPage(currentPage);
};

var EllipsisButton = (0, _themes.createThemedComponent)(_Button2.default, function (_ref2) {
  var theme = _ref2.theme;
  return {
    color_disabled: theme.color_theme
  };
});

var getPageButtons = function getPageButtons(_ref3) {
  var currentPage = _ref3.currentPage,
      handleClick = _ref3.handleClick,
      messages = _ref3.messages,
      size = _ref3.size,
      totalPages = _ref3.totalPages,
      visibleRange = _ref3.visibleRange;

  return [].concat(_toConsumableArray(Array(totalPages))).map(function (_, i) {
    return i;
  }).map(function (_, index) {
    var page = index + 1;
    var evenOffset = visibleRange % 2 === 0 ? 1 : 0;
    var pagesBuffer = void 0;
    if (currentPage <= visibleRange || visibleRange === 1 && currentPage === 2) {
      pagesBuffer = visibleRange - currentPage + 3 - evenOffset;
    } else if (currentPage > totalPages - visibleRange || visibleRange === 1 && currentPage === totalPages - 1) {
      pagesBuffer = visibleRange - (totalPages - currentPage) + 2 - evenOffset;
    } else {
      pagesBuffer = Math.ceil(visibleRange / 2);
    }

    var firstPageInRange = page === currentPage - pagesBuffer && !firstPage(page);
    var lastPageInRange = page === currentPage + pagesBuffer && !lastPage(page, totalPages);
    var isPageOutOfRange = page < currentPage - pagesBuffer || page > currentPage + pagesBuffer;
    var isCurrentPage = page === currentPage;
    var isFirstPage = firstPage(page);
    var isLastPage = lastPage(page, totalPages);

    var pageView = null;
    if (firstPageInRange || lastPageInRange) {
      pageView = _jsx(EllipsisButton, {
        disabled: true,
        element: 'span',
        minimal: true,
        size: 'medium'
      }, page, '\u2026');
    } else if (!isPageOutOfRange || isFirstPage || isLastPage) {
      pageView = _react2.default.createElement(
        _Button2.default,
        _extends({}, isCurrentPage ? { 'aria-current': true } : undefined, isCurrentPage || isLastPage ? {
          'aria-label': messages.pageLabel(isCurrentPage, isLastPage, page)
        } : undefined, {
          minimal: true,
          primary: isCurrentPage,
          key: page,
          onClick: handleClick.bind(null, page),
          size: size }),
        page
      );
    }
    return pageView;
  }).filter(function (page) {
    return !!page;
  });
};

getPageButtons.propTypes = process.env.NODE_ENV !== "production" ? {
  currentPage: _propTypes2.default.number.isRequired,
  handleClick: _propTypes2.default.func.isRequired,
  handleIncrement: _propTypes2.default.func.isRequired,
  showPageNumbers: _propTypes2.default.bool,
  messages: _propTypes2.default.shape({
    pageLabel: _propTypes2.default.func.isRequired,
    next: _propTypes2.default.string.isRequired,
    previous: _propTypes2.default.string.isRequired,
    __exact__: function __exact__(values, prop, displayName) {
      var props = {
        pageLabel: true,
        next: true,
        previous: true
      };
      var extra = [];

      for (var k in values) {
        if (values.hasOwnProperty(k) && !props.hasOwnProperty(k)) {
          extra.push(k);
        }
      }

      if (extra.length > 0) {
        return new Error('Invalid additional prop(s) ' + JSON.stringify(extra));
      }
    }
  }).isRequired,
  size: _propTypes2.default.oneOf(['small', 'medium', 'large', 'jumbo']),
  totalPages: _propTypes2.default.number.isRequired,
  visibleRange: _propTypes2.default.number.isRequired
} : {};

var _ref5 = _jsx(_IconChevronRight2.default, {});

var _ref6 = _jsx(_IconChevronLeft2.default, {});

var IncrementButton = function IncrementButton(_ref4) {
  var _extends2;

  var currentPage = _ref4.currentPage,
      direction = _ref4.direction,
      focusedNodeWhenDisabled = _ref4.focusedNodeWhenDisabled,
      handleIncrement = _ref4.handleIncrement,
      messages = _ref4.messages,
      size = _ref4.size,
      totalPages = _ref4.totalPages,
      restProps = _objectWithoutProperties(_ref4, ['currentPage', 'direction', 'focusedNodeWhenDisabled', 'handleIncrement', 'messages', 'size', 'totalPages']);

  var next = direction === 'next';
  var incrementIcon = next ? _ref5 : _ref6;
  var iconPosition = next ? 'iconEnd' : 'iconStart';

  var handleClick = function handleClick(next) {
    handleIncrement(next, function (nextPage) {
      isDisabled(next, nextPage, totalPages) && focusedNodeWhenDisabled && focusedNodeWhenDisabled.focus();
    });
  };

  var buttonProps = _extends((_extends2 = {
    children: messages[direction],
    disabled: isDisabled(next, currentPage, totalPages)
  }, _defineProperty(_extends2, iconPosition, incrementIcon), _defineProperty(_extends2, 'minimal', true), _defineProperty(_extends2, 'onClick', handleClick.bind(null, next)), _defineProperty(_extends2, 'size', size), _extends2), restProps);

  return _react2.default.createElement(_Button2.default, buttonProps);
};

IncrementButton.propTypes = process.env.NODE_ENV !== "production" ? {
  currentPage: _propTypes2.default.number.isRequired,
  handleClick: _propTypes2.default.func.isRequired,
  handleIncrement: _propTypes2.default.func.isRequired,
  showPageNumbers: _propTypes2.default.bool,
  messages: _propTypes2.default.shape({
    pageLabel: _propTypes2.default.func.isRequired,
    next: _propTypes2.default.string.isRequired,
    previous: _propTypes2.default.string.isRequired,
    __exact__: function __exact__(values, prop, displayName) {
      var props = {
        pageLabel: true,
        next: true,
        previous: true
      };
      var extra = [];

      for (var k in values) {
        if (values.hasOwnProperty(k) && !props.hasOwnProperty(k)) {
          extra.push(k);
        }
      }

      if (extra.length > 0) {
        return new Error('Invalid additional prop(s) ' + JSON.stringify(extra));
      }
    }
  }).isRequired,
  size: _propTypes2.default.oneOf(['small', 'medium', 'large', 'jumbo']),
  totalPages: _propTypes2.default.number.isRequired,
  visibleRange: _propTypes2.default.number.isRequired,
  direction: _propTypes2.default.string.isRequired,
  focusedNodeWhenDisabled: function focusedNodeWhenDisabled() {
    return (typeof HTMLButtonElement === 'function' ? _propTypes2.default.instanceOf(HTMLButtonElement) : _propTypes2.default.any).apply(this, arguments);
  }
} : {};

var Pages = function (_PureComponent) {
  _inherits(Pages, _PureComponent);

  function Pages() {
    var _ref7;

    var _temp, _this, _ret;

    _classCallCheck(this, Pages);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref7 = Pages.__proto__ || Object.getPrototypeOf(Pages)).call.apply(_ref7, [this].concat(args))), _this), _this.setPreviousButtonRef = function (node) {
      _this.previousButton = node;
    }, _this.setNextButtonRef = function (node) {
      _this.nextButton = node;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Pages, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          showPageNumbers = _props.showPageNumbers,
          restProps = _objectWithoutProperties(_props, ['showPageNumbers']);

      return _react2.default.createElement(
        Container,
        restProps,
        _react2.default.createElement(IncrementButton, _extends({
          direction: 'previous',
          focusedNodeWhenDisabled: this.nextButton,
          innerRef: this.setPreviousButtonRef
        }, restProps)),
        showPageNumbers && getPageButtons(this.props),
        _react2.default.createElement(IncrementButton, _extends({
          direction: 'next',
          focusedNodeWhenDisabled: this.previousButton,
          innerRef: this.setNextButtonRef
        }, restProps))
      );
    }
  }]);

  return Pages;
}(_react.PureComponent);

exports.default = Pages;
Pages.propTypes = process.env.NODE_ENV !== "production" ? {
  currentPage: _propTypes2.default.number.isRequired,
  handleClick: _propTypes2.default.func.isRequired,
  handleIncrement: _propTypes2.default.func.isRequired,
  showPageNumbers: _propTypes2.default.bool,
  messages: _propTypes2.default.shape({
    pageLabel: _propTypes2.default.func.isRequired,
    next: _propTypes2.default.string.isRequired,
    previous: _propTypes2.default.string.isRequired,
    __exact__: function __exact__(values, prop, displayName) {
      var props = {
        pageLabel: true,
        next: true,
        previous: true
      };
      var extra = [];

      for (var k in values) {
        if (values.hasOwnProperty(k) && !props.hasOwnProperty(k)) {
          extra.push(k);
        }
      }

      if (extra.length > 0) {
        return new Error('Invalid additional prop(s) ' + JSON.stringify(extra));
      }
    }
  }).isRequired,
  size: _propTypes2.default.oneOf(['small', 'medium', 'large', 'jumbo']),
  totalPages: _propTypes2.default.number.isRequired,
  visibleRange: _propTypes2.default.number.isRequired
} : {};