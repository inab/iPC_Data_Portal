'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentTheme = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('../styles');

var _IconDanger = require('../Icon/IconDanger');

var _IconDanger2 = _interopRequireDefault(_IconDanger);

var _IconSuccess = require('../Icon/IconSuccess');

var _IconSuccess2 = _interopRequireDefault(_IconSuccess);

var _IconWarning = require('../Icon/IconWarning');

var _IconWarning2 = _interopRequireDefault(_IconWarning);

var _Menu = require('./Menu');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Some of these values (all of the margins & paddings and the content fontSize)
// come from Button (large)
// prettier-ignore
var componentTheme = exports.componentTheme = function componentTheme(baseTheme) {
  return _extends({
    MenuItem_backgroundColor_selected: baseTheme.backgroundColor_theme_selected,
    MenuItem_backgroundColor_active: baseTheme.color_gray_20,
    MenuItem_backgroundColor_focus: baseTheme.color_gray_10,
    MenuItem_backgroundColor_hover: baseTheme.color_gray_10,
    MenuItem_backgroundColor_selectedActive: baseTheme.backgroundColor_theme_selectedActive,
    MenuItem_backgroundColor_selectedHover: baseTheme.backgroundColor_theme_selectedHover,
    MenuItem_color: baseTheme.color,
    MenuItem_fontWeight: baseTheme.fontWeight_regular,
    MenuItem_fontWeight_selected: baseTheme.fontWeight_bold,
    MenuItem_paddingHorizontal: baseTheme.space_inset_md,
    MenuItem_paddingVertical: baseTheme.space_inset_sm,

    MenuItemContent_fontSize: baseTheme.fontSize_ui,

    MenuItemIcon_color: baseTheme.icon_color_theme,
    MenuItemIcon_margin: baseTheme.space_inset_sm,

    MenuItemSecondaryText_color: baseTheme.color_mouse,
    MenuItemSecondaryText_fontSize: baseTheme.fontSize_mouse

  }, baseTheme);
};

// These styles are based off of Button, with significant changes
var styles = {
  content: {
    display: 'flex',
    flex: '1 1 auto',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    padding: (0, _styles.pxToEm)(3) + ' 0 ' + (0, _styles.pxToEm)(4),
    whiteSpace: 'normal',
    wordBreak: 'break-all'
  },
  inner: {
    display: 'flex',
    justifyContent: 'space-between'
  },
  menuItem: function menuItem(_ref) {
    var disabled = _ref.disabled,
        isHighlighted = _ref.isHighlighted,
        baseTheme = _ref.theme,
        variant = _ref.variant;

    var theme = componentTheme(baseTheme);

    if (variant) {
      // prettier-ignore
      theme = _extends({}, theme, {
        MenuItem_backgroundColor_active: theme['backgroundColor_' + variant + '_active'],
        MenuItem_backgroundColor_focus: theme['backgroundColor_' + variant + '_focus'],
        MenuItem_backgroundColor_hover: theme['backgroundColor_' + variant + '_hover'],
        MenuItem_color: theme['color_' + variant],
        MenuItemIcon_color: theme['icon_color_' + variant]
      });
    }

    return {
      backgroundColor: isHighlighted && theme.MenuItem_backgroundColor_hover,
      color: disabled ? theme.color_disabled : theme.MenuItem_color,
      cursor: disabled ? 'default' : 'pointer',
      fontWeight: theme.MenuItem_fontWeight,
      padding: theme.MenuItem_paddingVertical + ' ' + theme.MenuItem_paddingHorizontal,

      '&:focus': {
        backgroundColor: !disabled && theme.MenuItem_backgroundColor_focus,
        outline: 0
      },

      '&:hover': {
        backgroundColor: !disabled && theme.MenuItem_backgroundColor_hover
      },

      '&:active': {
        backgroundColor: !disabled && theme.MenuItem_backgroundColor_active
      },

      '&[aria-selected="true"]': {
        backgroundColor: isHighlighted ? theme.MenuItem_backgroundColor_selectedHover : theme.MenuItem_backgroundColor_selected,
        fontWeight: theme.MenuItem_fontWeight_selected,

        '&:active': {
          backgroundColor: !disabled && theme.MenuItem_backgroundColor_selectedActive
        }
      },

      '& [role="img"]': {
        boxSizing: 'content-box',
        color: disabled ? null : theme.MenuItemIcon_color,
        display: 'block',
        flex: '0 0 auto',

        '&:first-child': {
          marginLeft: theme.direction === 'rtl' ? theme.MenuItemIcon_margin : null,
          marginRight: theme.direction === 'ltr' ? theme.MenuItemIcon_margin : null
        },

        '&:last-child': {
          marginLeft: theme.direction === 'ltr' ? theme.MenuItemIcon_margin : null,
          marginRight: theme.direction === 'rtl' ? theme.MenuItemIcon_margin : null
        }
      }
    };
  },
  secondaryText: function secondaryText(props) {
    var theme = componentTheme(props.theme);

    var fontSize = theme.MenuItemSecondaryText_fontSize;

    return {
      color: theme.MenuItemSecondaryText_color,
      fontSize: fontSize,
      // The regular text fontSize is larger than that of the secondary text.
      // This magic number (optically) re-aligns both sets of text vertically.
      paddingTop: (0, _styles.getNormalizedValue)((0, _styles.pxToEm)(2), fontSize),
      wordBreak: 'break-word'
    };
  },
  text: function text(props) {
    var theme = componentTheme(props.theme);

    var fontSize = theme.MenuItemContent_fontSize;
    var margin = (0, _styles.getNormalizedValue)(theme.space_inline_sm, fontSize);

    return {
      fontSize: fontSize,
      marginLeft: theme.direction === 'rtl' && margin,
      marginRight: theme.direction === 'ltr' && margin,
      wordBreak: 'break-word'
    };
  }
};

var Root = (0, _styles.createStyledComponent)('div', styles.menuItem, {
  displayName: 'MenuItem'
});

var Content = (0, _styles.createStyledComponent)('span', styles.content);
var Inner = (0, _styles.createStyledComponent)('span', styles.inner);
var SecondaryText = (0, _styles.createStyledComponent)('span', styles.secondaryText);
var Text = (0, _styles.createStyledComponent)('span', styles.text);

var variantIcons = {
  danger: _jsx(_IconDanger2.default, {
    size: (0, _styles.pxToEm)(24)
  }),
  success: _jsx(_IconSuccess2.default, {
    size: (0, _styles.pxToEm)(24)
  }),
  warning: _jsx(_IconWarning2.default, {
    size: (0, _styles.pxToEm)(24)
  })
};

/**
 * A MenuItem represents an option in a [Menu](/components/menu). They can be
 * used to trigger actions or navigate to a new location. MenuItems provide
 * context through optional variants, secondary text, or
 * [Icons](/components/icon).
 *
 * A custom rendering hook is exposed to enable any extra functionality your app
 * requires.
 */

var MenuItem = function (_PureComponent) {
  _inherits(MenuItem, _PureComponent);

  function MenuItem() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, MenuItem);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = MenuItem.__proto__ || Object.getPrototypeOf(MenuItem)).call.apply(_ref2, [this].concat(args))), _this), _this.getItemProps = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var disabled = props.disabled,
          onClick = props.onClick,
          render = props.render,
          restProps = _objectWithoutProperties(props, ['disabled', 'onClick', 'render']);

      return _extends({}, render ? restProps : {}, {
        disabled: disabled,
        tabIndex: disabled ? '-1' : 0
      }, !render ? restProps : {}, !disabled ? { onClick: onClick, onKeyDown: _this.onKeyDown } : {});
    }, _this.onKeyDown = function (event) {
      var onClick = _this.props.onClick;

      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        onClick && onClick(event);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(MenuItem, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          iconEnd = _props.iconEnd,
          iconStart = _props.iconStart,
          render = _props.render,
          secondaryText = _props.secondaryText,
          variant = _props.variant;


      if (render) {
        return render({
          props: this.getItemProps(this.props)
        });
      }

      var rootProps = this.getItemProps(this.props);

      var startIcon = variant !== undefined && variant && variantIcons[variant];
      if (iconStart) {
        startIcon = (0, _react.cloneElement)(iconStart, {
          size: (0, _styles.pxToEm)(24),
          key: 'iconStart'
        });
      }
      var endIcon = iconEnd && (0, _react.cloneElement)(iconEnd, { size: (0, _styles.pxToEm)(24), key: 'iconEnd' });

      return _react2.default.createElement(
        Root,
        rootProps,
        _jsx(Inner, {}, void 0, startIcon, (children || secondaryText) && _jsx(Content, {}, void 0, _jsx(Text, {}, void 0, children), SecondaryText && _jsx(SecondaryText, {}, void 0, secondaryText)), endIcon)
      );
    }
  }]);

  return MenuItem;
}(_react.PureComponent);

exports.default = MenuItem;
MenuItem.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Rendered content of the component */
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node) : _propTypes2.default.any).apply(this, arguments);
  },

  /** Disable the menu item */
  disabled: _propTypes2.default.bool,

  /** Icon that goes after the children*/
  iconEnd: function iconEnd() {
    return (typeof React$Element === 'function' ? _propTypes2.default.instanceOf(React$Element) : _propTypes2.default.any).apply(this, arguments);
  },

  /** Icon that goes before the children */
  iconStart: function iconStart() {
    return (typeof React$Element === 'function' ? _propTypes2.default.instanceOf(React$Element) : _propTypes2.default.any).apply(this, arguments);
  },

  /** Item index - provided to render callback */
  index: _propTypes2.default.number,

  /** Display the item in an active style */
  isHighlighted: _propTypes2.default.bool,

  /** Item data - provided to render callback */
  item: function item() {
    return (typeof _Menu.bpfrpt_proptype_Item === 'function' ? _Menu.bpfrpt_proptype_Item : _propTypes2.default.shape(_Menu.bpfrpt_proptype_Item)).apply(this, arguments);
  },

  /** Called with the click event */
  onClick: _propTypes2.default.func,

  /**
   * Provides custom rendering control. See the
   * [custom item example](/components/menu#custom-item) and
   * our [render props guide](/render-props).
   */
  render: function render() {
    return (typeof RenderFn === 'function' ? _propTypes2.default.instanceOf(RenderFn) : _propTypes2.default.any).apply(this, arguments);
  },

  /** Secondary text */
  secondaryText: function secondaryText() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node) : _propTypes2.default.any).apply(this, arguments);
  },

  /** Available variants */
  variant: _propTypes2.default.oneOf(['danger', 'success', 'warning'])
} : {};