'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = DialogHeader;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('../styles');

var _children = require('../utils/children');

var _DialogRow = require('./DialogRow');

var _DialogRow2 = _interopRequireDefault(_DialogRow);

var _DialogTitle = require('./DialogTitle');

var _DialogTitle2 = _interopRequireDefault(_DialogTitle);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Root = (0, _styles.createStyledComponent)(_DialogRow2.default, {
  display: 'flex',
  flex: '0 0 auto',
  justifyContent: 'space-between'
}, {
  displayName: 'DialogHeader',
  withProps: { element: 'header' }
});

/**
 * DialogHeader displays title content and an optional close button at the top
 * of the [Dialog](/components/dialog).
 */
function DialogHeader(props) {
  var children = props.children,
      closeButton = props.closeButton,
      titleProps = props.titleProps,
      rootProps = _objectWithoutProperties(props, ['children', 'closeButton', 'titleProps']);

  var title = (0, _children.findByType)(children, _DialogTitle2.default);
  if (title) {
    title = (0, _react.cloneElement)(title, _extends({}, titleProps, title.props));
  }

  return _react2.default.createElement(
    Root,
    rootProps,
    title || children,
    closeButton
  );
}
DialogHeader.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Rendered Dialog title; use of [DialogTitle](/components/dialog-title) is
   * recommended
   */
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node) : _propTypes2.default.any).apply(this, arguments);
  },

  /** Rendered close button */
  closeButton: function closeButton() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node) : _propTypes2.default.any).apply(this, arguments);
  },

  /** @Private */
  titleProps: _propTypes2.default.object
} : {};