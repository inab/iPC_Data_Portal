'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentTheme = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _memoizeOne = require('memoize-one');

var _memoizeOne2 = _interopRequireDefault(_memoizeOne);

var _styles = require('../styles');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var componentTheme = exports.componentTheme = function componentTheme(baseTheme) {
  return _extends({
    DialogRow_fontSize: baseTheme.fontSize_ui,
    DialogRow_paddingHorizontal: baseTheme.space_inline_lg,
    DialogRow_marginVertical: baseTheme.space_stack_lg

  }, baseTheme);
};

var styles = {
  root: function root(_ref) {
    var baseTheme = _ref.theme;

    var theme = componentTheme(baseTheme);
    var fontSize = theme.DialogRow_fontSize;

    return {
      fontSize: fontSize,
      margin: (0, _styles.getNormalizedValue)(theme.DialogRow_marginVertical, fontSize) + ' 0',
      outline: 0,
      padding: '0 ' + (0, _styles.getNormalizedValue)(theme.DialogRow_paddingHorizontal, fontSize)
    };
  }
};

var createRootNode = function createRootNode(props) {
  var _props$element = props.element,
      element = _props$element === undefined ? DialogRow.defaultProps.element : _props$element;

  return (0, _styles.createStyledComponent)(element, styles.root, {
    includeStyleReset: true,
    rootEl: element
  });
};

var DialogRow = function (_Component) {
  _inherits(DialogRow, _Component);

  function DialogRow() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, DialogRow);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = DialogRow.__proto__ || Object.getPrototypeOf(DialogRow)).call.apply(_ref2, [this].concat(args))), _this), _this.getRootNode = (0, _memoizeOne2.default)(createRootNode, function (nextProps, prevProps) {
      return nextProps.element === prevProps.element;
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DialogRow, [{
    key: 'render',
    value: function render() {
      var Root = this.getRootNode(this.props);

      return _react2.default.createElement(Root, this.props);
    }
  }]);

  return DialogRow;
}(_react.Component);

DialogRow.defaultProps = { element: 'div' };
exports.default = DialogRow;
DialogRow.propTypes = process.env.NODE_ENV !== "production" ? {
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node) : _propTypes2.default.any).apply(this, arguments);
  },
  element: _propTypes2.default.string
} : {};