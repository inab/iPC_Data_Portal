'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = GridItem;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('../styles');

var _Flex = require('../Flex');

var _Flex2 = require('../Flex/Flex');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getFlexGrow = function getFlexGrow(value) {
  return value ? 0 : 1;
};
var getWidth = function getWidth(value, columns, gutter) {
  return value ? 'calc(' + value / columns * 100 + '% - ' + gutter + ')' : 0;
};

/*
 * [1] IE11 doesn't use the correct box-sizing model with the flex-basis
 *     property. The workaround is to set flex-basis to 'auto' and use 'width'
 *     instead.
 */
var styles = {
  root: function root(_ref) {
    var breakpoints = _ref.breakpoints,
        columns = _ref.columns,
        gutterWidth = _ref.gutterWidth,
        span = _ref.span,
        theme = _ref.theme;

    var gutter = typeof gutterWidth === 'number' ? gutterWidth + 'px' : theme['space_inline_' + gutterWidth] || gutterWidth;

    var mapValueToProperty = function mapValueToProperty(property, value) {
      var map = {
        flexGrow: getFlexGrow,
        width: function width(value) {
          return getWidth(value, columns, gutter);
        }
      };

      return map[property](value);
    };

    return _extends({
      flexBasis: 'auto' }, (0, _styles.getResponsiveStyles)({
      breakpoints: breakpoints,
      mapValueToProperty: mapValueToProperty,
      styles: {
        flexGrow: span,
        width: span // [1]
      },
      theme: theme
    }));
  }
};

var Root = (0, _styles.createStyledComponent)(_Flex.FlexItem, styles.root, {
  displayName: 'GridItem',
  filterProps: ['alignSelf', 'grow', 'inline', 'width'],
  withProps: { shrink: 0 }
});

/**
 * GridItem is used within [Grid](/components/grid) to lay out other components
 * in your app.
 */
function GridItem(props) {
  return _react2.default.createElement(Root, props);
}
GridItem.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Number of columns spanned [[Responsive-capable]](#responsive) */
  span: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.number)])
} : {};