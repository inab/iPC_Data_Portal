'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styles = require('../styles');

var _Flex = require('../Flex');

var _Flex2 = _interopRequireDefault(_Flex);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Root = (0, _styles.createStyledComponent)(_Flex2.default, { display: 'flex' }, {
  displayName: 'Grid',
  filterProps: ['direction', 'inline', 'justifyContent'],
  withProps: { wrap: true }
});


var getGridItems = function getGridItems(_ref) {
  var breakpoints = _ref.breakpoints,
      children = _ref.children,
      columns = _ref.columns,
      gutterWidth = _ref.gutterWidth;
  return _react.Children.map(children, function (child) {
    return (0, _react.cloneElement)(child, { breakpoints: breakpoints, columns: columns, gutterWidth: gutterWidth });
  });
};

/**
 * Grid component is used together with [GridItem](/components/grid-item) to lay
 * out other components in a columnar, and optionally responsive, manner.
 */
var Grid = function Grid(props) {
  return _react2.default.createElement(
    Root,
    props,
    getGridItems(props)
  );
};

Grid.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Align grid items vertically
   * [[Responsive-capable]](/components/flex#responsive)
   */
  alignItems: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['start']), _propTypes2.default.oneOf(['end']), _propTypes2.default.oneOf(['center']), _propTypes2.default.oneOf(['stretch']), _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['start', 'end', 'center', 'stretch']))]),

  /**
   * Media query (min-width) breakpoints along which to apply props marked
   * "&#xfeff;[[Responsive-capable]](/components/flex#responsive)&#xfeff;"
   */
  breakpoints: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired),

  /** Must be [GridItem(s)](./grid-item). */
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },

  /** Number of columns (see [GridItem's `span`](/components/grid-item#span)) */
  columns: _propTypes2.default.number,

  /** Size of horizontal gap between grid items */
  gutterWidth: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['xxs']), _propTypes2.default.oneOf(['xs']), _propTypes2.default.oneOf(['sm']), _propTypes2.default.oneOf(['md']), _propTypes2.default.oneOf(['lg']), _propTypes2.default.oneOf(['xl']), _propTypes2.default.oneOf(['xxl']), _propTypes2.default.number, _propTypes2.default.string])
} : {};
Grid.defaultProps = {
  alignItems: 'stretch', // Same as Flex
  columns: 12,
  gutterWidth: 'md' // Same as Flex
};

exports.default = Grid;