'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = mapComponentThemes;

/**
 * Generates a new component theme based on the theme of another component.
 *
 * preserveKeys
 *
 *   What does it do:
 *
 *     Ensures source theme variables are used in override styles when the
 *     source does not apply those styles and the override component is
 *     independently themeable
 *
 *     e.g. Necessary in TableHeaderCell (which is a themed TableCell) because
 *     TableCells and TableHeaderCells are both independently themeable
 *
 *   How to use:
 *
 *     Provide array of theme variable keys used in style properties applied by
 *     source component and not by override component
 */
function mapComponentThemes(source, override, baseTheme, preserveKeys) {
  var REGEXP_SOURCE_NAME = new RegExp('^' + source.name);
  var sourceThemeWithRenamedKeys = Object.keys(source.theme).reduce(function (acc, sourceKey) {
    if (REGEXP_SOURCE_NAME.test(sourceKey)) {
      var overrideKey = sourceKey.replace(REGEXP_SOURCE_NAME, override.name);
      acc[overrideKey] = source.theme[sourceKey];
    }
    return acc;
  }, {});
  var preserved = preserveKeys && preserveKeys.reduce(function (acc, sourceKey) {
    var keyProperty = sourceKey.split('_')[1];
    acc[override.name + '_' + keyProperty] = source.theme[sourceKey];
    return acc;
  }, {});

  return _extends({}, sourceThemeWithRenamedKeys, override.theme, baseTheme, preserved);
}