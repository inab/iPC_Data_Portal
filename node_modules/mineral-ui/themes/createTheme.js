'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonTokenVariables = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createTheme;

var _mineralUiTokens = require('mineral-ui-tokens');

var _mineralUiTokens2 = _interopRequireDefault(_mineralUiTokens);

var _createColorRamp = require('./createColorRamp');

var _createColorRamp2 = _interopRequireDefault(_createColorRamp);

var _fontSizeBase = require('./fontSizeBase');

var _fontSizeBase2 = _interopRequireDefault(_fontSizeBase);

var _colorAliases = require('./generated/colorAliases');

var _colorAliases2 = _interopRequireDefault(_colorAliases);

var _groupedByRampJsTokens = require('./generated/groupedByRampJsTokens');

var _groupedByRampJsTokens2 = _interopRequireDefault(_groupedByRampJsTokens);

var _palette = require('./generated/palette');

var _palette2 = _interopRequireDefault(_palette);

var _themeFromTokens = require('./themeFromTokens');

var _themeFromTokens2 = _interopRequireDefault(_themeFromTokens);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var primaryColors = ['theme', 'danger', 'success', 'warning'];

var nonTokenVariables = exports.nonTokenVariables = function nonTokenVariables(colors) {
  return {
    boxShadow_focusInner: colors && colors.white || _palette2.default.white,
    direction: 'ltr',
    fontSize_base: _fontSizeBase2.default
  };
};

var colorOverrides = function colorOverrides(colors) {
  return Object.keys(_groupedByRampJsTokens2.default).reduce(function (acc, color) {
    return colors[color] ? _extends({}, acc, (0, _themeFromTokens.themeFromColorTokens)({
      color: correctColorType(colors[color], color),
      colorName: color,
      tokens: _groupedByRampJsTokens2.default[color]
    })) : acc;
  }, {});
};

var correctColorType = function correctColorType(colorValue, color) {
  var isStringColor = ['black', 'white'].indexOf(color) !== -1;

  return typeof colorValue === 'string' && isStringColor ? colorValue : getRamp(colorValue, color);
};

var getRamp = function getRamp(color, keyName) {
  if (typeof color === 'string') {
    if (_palette2.default[color]) {
      return _palette2.default[color];
    } else {
      throw new Error('[mineral-ui/themes/createTheme]: Expected colors.' + keyName + ' to be a color ramp from the mineral-ui palette or a custom color ramp, but got \'' + color + '\'.\nSee https://mineral-ui.com/color#guidelines-ramps for the palette ramps.\nSee https://github.com/mineral-ui/mineral-ui/blob/master/packages/mineral-ui-tokens/src/blue.js for an example color ramp.');
    }
  }

  var ignoreInflection = color.inflection,
      ramp = _objectWithoutProperties(color, ['inflection']);

  return ramp;
};

var getWhiteOrBlackTextColor = function getWhiteOrBlackTextColor(color, colors, override) {
  var black = colors.black || _palette2.default.black;
  var white = colors.white || _palette2.default.white;

  var inflectionPoints = primaryColors.reduce(function (acc, color) {
    acc[color] = _colorAliases2.default['backgroundColor_' + (color === 'theme' ? 'brand' : color) + 'Primary'].split('_')[1];
    return acc;
  }, {});

  return override && typeof override.inflection === 'number' ? override.inflection > inflectionPoints[color] ? black : white : white;
};

var primaryColorsByVariation = function primaryColorsByVariation() {
  var colors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return primaryColors.reduce(function (acc, color) {
    var override = colors[color];
    acc['color_' + color + 'Primary'] = getWhiteOrBlackTextColor(color, colors, override);
    return acc;
  }, {});
};

function createTheme(options) {
  var colors = options && options.colors;

  var grayRamp = colors && colors.gray ? (0, _createColorRamp2.default)(getRamp(colors.gray, 'gray'), 'color_gray_') : (0, _createColorRamp2.default)(_palette2.default.gray, 'color_gray_');
  var themeRamp = colors && colors.theme ? (0, _createColorRamp2.default)(getRamp(colors.theme, 'theme'), 'color_theme_') : (0, _createColorRamp2.default)(_palette2.default.brand, 'color_theme_');

  return _extends({}, (0, _themeFromTokens2.default)(_mineralUiTokens2.default), nonTokenVariables(colors), colors ? colorOverrides(colors) : undefined, colors ? primaryColorsByVariation(colors) : undefined, grayRamp, themeRamp, {
    color_black: colors && colors.black || _palette2.default.black,
    color_white: colors && colors.white || _palette2.default.white

  }, options && options.overrides);
}