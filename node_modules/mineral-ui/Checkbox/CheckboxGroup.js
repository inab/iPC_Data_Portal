'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentTheme = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _themes = require('../themes');

var _ChoiceGroup = require('../Choice/ChoiceGroup');

var _ChoiceGroup2 = _interopRequireDefault(_ChoiceGroup);

var _Checkbox = require('./Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var componentTheme = exports.componentTheme = function componentTheme(baseTheme) {
  return (0, _themes.mapComponentThemes)({
    name: 'ChoiceGroup',
    theme: (0, _ChoiceGroup.componentTheme)(baseTheme)
  }, {
    name: 'CheckboxGroup',
    theme: {}
  }, baseTheme);
};

var Root = (0, _themes.createThemedComponent)(_ChoiceGroup2.default, function (_ref) {
  var baseTheme = _ref.theme;
  return (0, _themes.mapComponentThemes)({
    name: 'CheckboxGroup',
    theme: componentTheme(baseTheme)
  }, {
    name: 'ChoiceGroup',
    theme: {}
  }, baseTheme);
});

/**
 * CheckboxGroup allows authors to construct a group of
 * [Checkboxes](/components/checkbox) and provides a simpler API than working with
 * Checkbox directly.
 *
 * CheckboxGroup allows users to select multiple options from a list.
 */
var CheckboxGroup = function CheckboxGroup(props) {
  var otherRootProps = props.rootProps,
      restProps = _objectWithoutProperties(props, ['rootProps']);

  var rootProps = _extends({
    rootProps: _extends({}, otherRootProps),
    input: _Checkbox2.default,
    type: 'checkbox'
  }, restProps);

  return _react2.default.createElement(Root, rootProps);
};

CheckboxGroup.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Array of values of the selected Checkboxes; primarily for use with
   * controlled components. If this prop is specified, an `onChange` handler
   * must also be specified. See also: `defaultChecked`.
   */
  checked: _propTypes2.default.arrayOf(_propTypes2.default.string.isRequired),

  /** Mineral [Checkbox](/components/checkbox) components */
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node) : _propTypes2.default.any).apply(this, arguments);
  },

  /** Data used to contruct [Checkboxes](/components/checkbox), see [example](#data) */
  data: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, function () {
      return (typeof React$Element === 'function' ? _propTypes2.default.instanceOf(React$Element) : _propTypes2.default.any).apply(this, arguments);
    }]).isRequired,
    value: _propTypes2.default.string.isRequired
  }).isRequired),

  /**
   * Array of values of the selected [Checkboxes](/components/checkbox); primarily for
   * use with uncontrolled components.
   */
  defaultChecked: _propTypes2.default.arrayOf(_propTypes2.default.string.isRequired),

  /** Display the choices inline horizontally rather than stacked vertically. */
  inline: _propTypes2.default.bool,

  /** The name of the group */
  name: _propTypes2.default.string.isRequired,

  /** Function called when a choice is selected */
  onChange: _propTypes2.default.func,

  /** Props to be applied directly to the root element */
  rootProps: _propTypes2.default.object
} : {};
CheckboxGroup.displayName = 'CheckboxGroup';

exports.default = CheckboxGroup;