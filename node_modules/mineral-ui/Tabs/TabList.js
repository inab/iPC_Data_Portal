'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentTheme = undefined;

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

var _EventListener = require('../EventListener');

var _EventListener2 = _interopRequireDefault(_EventListener);

var _styles = require('../styles');

var _themes = require('../themes');

var _cssSelectors = require('../utils/cssSelectors');

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _IconChevronLeft = require('../Icon/IconChevronLeft');

var _IconChevronLeft2 = _interopRequireDefault(_IconChevronLeft);

var _IconChevronRight = require('../Icon/IconChevronRight');

var _IconChevronRight2 = _interopRequireDefault(_IconChevronRight);

var _IconExpandLess = require('../Icon/IconExpandLess');

var _IconExpandLess2 = _interopRequireDefault(_IconExpandLess);

var _IconExpandMore = require('../Icon/IconExpandMore');

var _IconExpandMore2 = _interopRequireDefault(_IconExpandMore);

var _OverflowContainer = require('../OverflowContainer');

var _TabPanel = require('./TabPanel');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var componentTheme = exports.componentTheme = function componentTheme(baseTheme) {
  return _extends({
    TabList_gutterHorizontal: baseTheme.space_inline_md,
    TabList_gutterVertical: baseTheme.space_stack_sm,

    TabListArrow_color: baseTheme.color_gray_80,
    TabListArrow_color_hover: baseTheme.color_theme,

    TabListOverflowContainer_boxShadowColor: baseTheme.color_white

  }, baseTheme);
};

var styles = {
  button: function button(_ref) {
    var baseTheme = _ref.theme;

    var theme = componentTheme(baseTheme);

    return {
      flexShrink: 0,

      '&:hover': {
        '& [role="img"]': {
          color: theme.TabListArrow_color_hover
        }
      },

      '& > span': {
        height: '100%'
      }
    };
  },
  inner: function inner(_ref2) {
    var position = _ref2.position,
        baseTheme = _ref2.theme,
        vertical = _ref2.vertical;

    var theme = _extends({}, componentTheme(baseTheme), (0, _TabPanel.componentTheme)(baseTheme));
    var rtl = theme.direction === 'rtl';
    var edge = {
      bottom: 'top',
      end: rtl ? 'right' : 'left',
      start: rtl ? 'left' : 'right',
      top: 'bottom'
    };
    var edgeProperty = edge[position];

    return _extends({
      display: 'flex'
    }, vertical ? { minHeight: '0%' } : { minWidth: '0%' }, theme.TabList_border ? {
      // OverflowContainerWithShadows > Shadows
      '&::before': _defineProperty({}, edgeProperty, theme.TabList_border.split('px')[0])
    } : undefined);
  },
  list: function list(_ref3) {
    var align = _ref3.align,
        count = _ref3.count,
        baseTheme = _ref3.theme,
        vertical = _ref3.vertical;

    var theme = componentTheme(baseTheme);
    var rtl = theme.direction === 'rtl';

    var childMarginProperty = vertical ? 'marginBottom' : rtl ? 'marginLeft' : 'marginRight';

    return {
      display: 'flex',
      flexDirection: vertical ? 'column' : undefined,
      flexGrow: 1,
      justifyContent: align ? align === 'center' ? align : 'flex-' + align : undefined,
      listStyle: 'none',
      margin: 0,
      padding: 0,
      whiteSpace: 'nowrap',

      // Tab
      '& > *': _extends({}, align === 'justify' ? vertical ? {
        display: 'flex',
        flexGrow: 1,

        // Anchor in Tab
        '& > *': { display: 'flex', height: 'auto' }
      } : {
        // prettier-ignore
        width: 'calc(' + 1 / count * 100 + '% - ' + theme.TabList_gutterHorizontal + ')'
      } : undefined, {

        '&:not(:last-child)': _defineProperty({}, childMarginProperty, vertical ? theme.TabList_gutterVertical : theme.TabList_gutterHorizontal)
      })
    };
  },
  root: function root(_ref4) {
    var height = _ref4.height,
        vertical = _ref4.vertical;
    return _extends({
      display: 'flex',
      flex: '0 0 auto',
      flexDirection: vertical ? 'column' : undefined,
      position: 'relative'

    }, vertical && height ? _defineProperty({}, _cssSelectors.onlyIEAndEdge, {
      height: height
    }) : undefined);
  }
};

var ThemedButton = (0, _themes.createThemedComponent)(_Button2.default, function (_ref6) {
  var baseTheme = _ref6.theme;

  var theme = componentTheme(baseTheme);
  return {
    Button_backgroundColor_minimal_active: null,
    Button_backgroundColor_minimal_hover: null,
    Button_borderRadius: 0,
    Button_borderWidth: 0,
    Button_boxShadow_focus: null,
    Button_paddingIconOnly_medium: 0,
    ButtonIcon_color: theme.TabListArrow_color,

    Icon_size_medium: (0, _styles.pxToEm)(20)
  };
});

var ThemedOverflowContainerWithShadows = (0, _themes.createThemedComponent)(_OverflowContainer.OverflowContainerWithShadows, function (_ref7) {
  var baseTheme = _ref7.theme;

  var theme = componentTheme(baseTheme);
  // prettier-ignore
  return {
    OverflowContainerWithShadows_boxShadowBottom: 'inset 0 -24px 22px -14px ' + theme.TabListOverflowContainer_boxShadowColor,
    OverflowContainerWithShadows_boxShadowLeft: 'inset 24px 0 22px -14px ' + theme.TabListOverflowContainer_boxShadowColor,
    OverflowContainerWithShadows_boxShadowRight: 'inset -24px 0 22px -14px ' + theme.TabListOverflowContainer_boxShadowColor,
    OverflowContainerWithShadows_boxShadowTop: 'inset 0 24px 22px -14px ' + theme.TabListOverflowContainer_boxShadowColor
  };
});

var ArrowButton = (0, _styles.createStyledComponent)(ThemedButton, styles.button, {
  displayName: 'ArrowButton'
});
var Inner = (0, _styles.createStyledComponent)(ThemedOverflowContainerWithShadows, styles.inner, {
  displayName: 'Inner',
  withProps: {
    hideScrollbars: true,
    // We handle our own "scroll with the keyboard" interaction in Tabs, so
    // null tabIndex is to prevent an extraneous tab stop
    tabIndex: null
  }
});
var List = (0, _styles.createStyledComponent)('ul', styles.list);
var Root = (0, _styles.createStyledComponent)('div', styles.root, {
  displayName: 'TabList'
});

var IncrementButton = function IncrementButton(_ref8) {
  var icon = _ref8.icon,
      restProps = _objectWithoutProperties(_ref8, ['icon']);

  return _react2.default.createElement(ArrowButton, _extends({
    'aria-hidden': true,
    iconStart: icon,
    minimal: true,
    size: 'medium',
    tabIndex: -1
  }, restProps));
};

/**
 * TabList
 */
IncrementButton.propTypes = process.env.NODE_ENV !== "production" ? {
  icon: function icon() {
    return (typeof React$Element === 'function' ? _propTypes2.default.instanceOf(React$Element).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  }
} : {};

var _ref10 = _jsx(_IconExpandLess2.default, {});

var _ref11 = _jsx(_IconChevronLeft2.default, {});

var _ref12 = _jsx(_IconExpandMore2.default, {});

var _ref13 = _jsx(_IconChevronRight2.default, {});

var TabList = function (_Component) {
  _inherits(TabList, _Component);

  function TabList() {
    var _ref9;

    var _temp, _this, _ret;

    _classCallCheck(this, TabList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref9 = TabList.__proto__ || Object.getPrototypeOf(TabList)).call.apply(_ref9, [this].concat(args))), _this), _this.state = {
      scrollable: false
    }, _this.setListRef = function (node) {
      _this.list = node;
    }, _this.setRootRef = function (node) {
      _this.root = node;
    }, _this.updateScrollable = function () {
      var vertical = _this.props.vertical;

      var listNode = _this.list;
      var rootNode = _this.root;

      if (listNode && rootNode) {
        var dimension = vertical ? 'Height' : 'Width';
        var _scrollable = Boolean(
        // $FlowFixMe - indexer property is missing in HTMLElement
        listNode['scroll' + dimension] > rootNode['client' + dimension]);
        if (_this.state.scrollable !== _scrollable) {
          _this.setState({
            scrollable: _scrollable
          });
        }
      }
    }, _this.handleWindowResize = (0, _lodash2.default)(_this.updateScrollable, 100), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TabList, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateScrollable();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps !== this.props) {
        this.updateScrollable();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          align = _props.align,
          children = _props.children,
          onIncrement = _props.onIncrement,
          position = _props.position,
          role = _props.role,
          vertical = _props.vertical,
          restProps = _objectWithoutProperties(_props, ['align', 'children', 'onIncrement', 'position', 'role', 'vertical']);

      var scrollable = this.state.scrollable;

      var rootProps = _extends({
        align: align,
        innerRef: this.setRootRef,
        vertical: vertical
      }, restProps, {
        'aria-label': undefined
      });
      var listProps = {
        align: align,
        'aria-label': restProps['aria-label'],
        count: _react.Children.count(children),
        innerRef: this.setListRef,
        role: role,
        vertical: vertical
      };

      var content = _react2.default.createElement(
        List,
        listProps,
        children
      );
      if (scrollable) {
        var innerProps = {
          position: position,
          scrollX: !vertical,
          scrollY: vertical,
          vertical: vertical
        };
        content = [_jsx(IncrementButton, {
          icon: vertical ? _ref10 : _ref11,
          onClick: function onClick(event) {
            onIncrement && onIncrement('ArrowLeft', event);
          }
        }, 'start'), _react2.default.createElement(
          Inner,
          _extends({ key: 'inner' }, innerProps),
          content
        ), _jsx(IncrementButton, {
          icon: vertical ? _ref12 : _ref13,
          onClick: function onClick(event) {
            onIncrement && onIncrement('ArrowRight', event);
          }
        }, 'end')];
      }

      return _react2.default.createElement(
        Root,
        rootProps,
        content,
        _jsx(_EventListener2.default, {
          listeners: [{
            event: 'resize',
            handler: this.handleWindowResize,
            target: 'window'
          }]
        })
      );
    }
  }]);

  return TabList;
}(_react.Component);

TabList.defaultProps = {
  position: 'top'
};
exports.default = TabList;
TabList.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Horizontal or vertical alignment of TabList children */
  align: _propTypes2.default.oneOf(['start', 'center', 'end', 'justify']),

  /** Accessible label for TabList */
  "aria-label": _propTypes2.default.string,

  /** Content of TabList */
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node) : _propTypes2.default.any).apply(this, arguments);
  },

  /** Height of parent, e.g. Tabs */
  height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

  /** Called when the selection is incremented to the next or previous item, e.g. Tab */
  onIncrement: _propTypes2.default.func,

  /** Position of TabList in relation to related content, e.g. TabPanel */
  position: _propTypes2.default.oneOf(['bottom', 'start', 'end', 'top']),

  /** Accessibility role of TabList */
  role: _propTypes2.default.string,

  /** Orientation of TabList */
  vertical: _propTypes2.default.bool
} : {};